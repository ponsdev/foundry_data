{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///./src/archive/df-chat-archive.ts","webpack:///./src/archive/DFChatArchiveNew.ts","webpack:///./src/archive/DFChatArchive.ts","webpack:///../common/Settings.ts","webpack:///./src/archive/DFChatArchiveManager.ts","webpack:///./src/archive/DFChatArchiveViewer.ts","webpack:///./src/edit/df-chat-edit.ts","webpack:///./src/edit/DFChatEditor.ts","webpack:///./src/logger/df-adventure-log.ts","webpack:///../common/libWrapperShared.ts","webpack:///./src/logger/DFAdventureLogConfig.ts","webpack:///./src/logger/DFAdventureLogProcessor.ts","webpack:///./src/merge/chat-merge.ts","webpack:///./src/privacy/df-chat-privacy.ts","webpack:///./src/Util.ts","webpack:///./src/scroll-manage/scroll-manage.ts","webpack:///./src/scroll-manage/ChatHistoryOptimizer.ts","webpack:///./src/whisper-trunc/whisper-trunc.ts","webpack:///./src/player-color/PlayerColor.ts","webpack:///./src/send/send-button.ts","webpack:///./src/font-size/font-size.ts","webpack:///./src/chat-time/chat-time.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/df-chat-enhance.ts"],"sourcesContent":["import DFChatArchiveNew from \"./DFChatArchiveNew\";\nimport DFChatArchiveManager from \"./DFChatArchiveManager\";\nimport { DFChatArchive } from \"./DFChatArchive\";\nimport SETTINGS from \"../../../common/Settings\";\n\n\nexport function init() {\n\n\tlet archiveNew: DFChatArchiveNew = null;\n\tlet archiveManager: DFChatArchiveManager = null;\n\n\tDFChatArchive.registerSettings();\n\tDFChatArchiveNew.registerSettings();\n\n\tSETTINGS.register(DFChatArchiveNew.PREF_HIDE_EXPORT, {\n\t\tname: 'DF_CHAT_ARCHIVE.Settings.HideExport',\n\t\tscope: 'world',\n\t\ttype: Boolean,\n\t\tdefault: false,\n\t\tconfig: true,\n\t\tonChange: (newValue) => {\n\t\t\tif (!newValue)\n\t\t\t\t$('#chat-controls .export-log').show();\n\t\t\telse\n\t\t\t\t$('#chat-controls .export-log').hide();\n\t\t}\n\t});\n\n\tSETTINGS.register(DFChatArchiveManager.PREF_REVERSE_SORT, {\n\t\tscope: 'world',\n\t\ttype: Boolean,\n\t\tdefault: false,\n\t\tconfig: false\n\t});\n\n\tHooks.on('renderChatLog', function (chatLog: ChatLog, html: JQuery<HTMLElement>) {\n\t\tconst archiveButton = $(`<a class=\"button chat-archive\" title=\"${'DF_CHAT_ARCHIVE.ExportButtonTitle'.localize()}\">\n\t\t<i class=\"fas fa-archive\"></i></a>`);\n\t\tarchiveButton.on('click', () => {\n\t\t\tif (archiveNew == null) {\n\t\t\t\tarchiveNew = new DFChatArchiveNew({});\n\t\t\t\tarchiveNew.render(true);\n\t\t\t} else {\n\t\t\t\tarchiveNew.bringToTop();\n\t\t\t}\n\t\t});\n\t\thtml.find('.control-buttons')\n\t\t\t.prepend(archiveButton)\n\t\t\t.attr('style', 'flex:0 0 auto;');\n\t\tif (SETTINGS.get(DFChatArchiveNew.PREF_HIDE_EXPORT)) {\n\t\t\thtml.find('.control-buttons .export-log').hide();\n\t\t}\n\t});\n\n\tHooks.on('renderSettings', function (settings: Settings, html: JQuery<HTMLElement>) {\n\t\tconst archiveManagerHtml = $(`<div id=\"df-chat-enhance-settings\" style=\"margin:0\">\n\t<h4>${'DF_CHAT_ARCHIVE.ChatEnhanceSettingGroup'.localize()}</h4>\n\t<button data-action=\"archive\"><i class=\"fas fa-archive\"></i>${'DF_CHAT_ARCHIVE.OpenChatArchive'.localize()}</button>\n</div>`);\n\t\tarchiveManagerHtml.on('click', () => {\n\t\t\tif (archiveManager == null || ![Application.RENDER_STATES.RENDERED, Application.RENDER_STATES.RENDERING].includes((<any>archiveManager)._state)) {\n\t\t\t\tarchiveManager = new DFChatArchiveManager();\n\t\t\t\tarchiveManager.render(true);\n\t\t\t} else {\n\t\t\t\tarchiveManager.bringToTop();\n\t\t\t}\n\t\t});\n\t\thtml.find('#settings-game').append(archiveManagerHtml);\n\t});\n\tHooks.on('closeDFChatArchiveNew', () => { archiveNew = null; });\n\tHooks.on('closeDFChatArchiveManager', () => { archiveNew = null; });\n\tHooks.on(`renderDFChatArchiveNew`, function (app: any, html: JQuery) {\n\t\thtml.find('input[type=\"text\"]')[0].focus();\n\t});\n}\n","import { DFChatArchive } from \"./DFChatArchive\";\nimport SETTINGS from \"../../../common/Settings\";\n\nexport default class DFChatArchiveNew extends FormApplication<FormApplicationOptions, { shouldDelete: boolean }> {\n\tstatic readonly PREF_DELETE = 'new-should-delete';\n\tstatic readonly PREF_HIDE_EXPORT = 'hide-export';\n\tstatic get defaultOptions() {\n\t\treturn mergeObject(FormApplication.defaultOptions, {\n\t\t\ttemplate: \"modules/df-chat-enhance/templates/archive-new.hbs\",\n\t\t\tresizable: false,\n\t\t\tminimizable: false,\n\t\t\ttitle: \"DF_CHAT_ARCHIVE.ArchiveNew_Title\".localize()\n\t\t});\n\t}\n\n\tstatic registerSettings() {\n\t\tSETTINGS.register(DFChatArchiveNew.PREF_DELETE, {\n\t\t\tconfig: false,\n\t\t\tscope: 'world',\n\t\t\ttype: Boolean,\n\t\t\tdefault: true\n\t\t});\n\t}\n\n\tgetData(options?: any) {\n\t\treturn mergeObject(super.getData(options), {\n\t\t\tshouldDelete: SETTINGS.get(DFChatArchiveNew.PREF_DELETE) as boolean\n\t\t});\n\t}\n\n\tasync _updateObject(_event?: any, formData?: any) {\n\t\tSETTINGS.set(DFChatArchiveNew.PREF_DELETE, formData.delete);\n\n\t\tconst name = formData.name;\n\t\tif (!name) {\n\t\t\tui.notifications.warn('DF_CHAT_ARCHIVE.ArchiveNew_ErrorNameMissing'.localize());\n\t\t\tthrow Error('DF_CHAT_ARCHIVE.ArchiveNew_ErrorNameMissing'.localize());\n\t\t}\n\n\t\tlet chats = <ChatMessage[]>[...(ui.chat.collection.values())];\n\n\t\t// If we are selecting a date range\n\t\tif (formData['date-or-all'] === 'date') {\n\t\t\tconst fromDate = new Date(formData.from).getTime();\n\t\t\tconst toDate = new Date(formData.to).getTime();\n\t\t\tif (isNaN(fromDate) || isNaN(toDate)) {\n\t\t\t\tui.notifications.warn('DF_CHAT_ARCHIVE.ArchiveNew_ErrorDatesMissing'.localize());\n\t\t\t\tthrow Error('Missing \"from\" and/or \"to\" dates');\n\t\t\t}\n\t\t\tchats = chats.filter((value) => value.data.timestamp >= fromDate && value.data.timestamp <= toDate);\n\t\t}\n\n\t\tui.notifications.info('DF_CHAT_ARCHIVE.ArchiveNew_NoticeSuccess'.localize().replace('{0}', name));\n\t\ttry {\n\t\t\tawait DFChatArchive.createChatArchive(name, chats, formData['visible']);\n\t\t}\n\t\tcatch (e) {\n\t\t\t// We have failed to create an archive so we should return immediately\n\t\t\treturn;\n\t\t}\n\t\t// If we don't want to delete the messages, return\n\t\tif (!formData.delete) return;\n\n\t\tfor (const chat of chats) {\n\t\t\tchat.delete();\n\t\t}\n\t}\n\n\t_renderInner(data: { shouldDelete: boolean }): Promise<JQuery<HTMLElement>> {\n\t\treturn super._renderInner(data)\n\t\t\t.then((html) => {\n\t\t\t\tconst from = html.find('#dfca-from');\n\t\t\t\tconst to = html.find('#dfca-to');\n\t\t\t\thtml.find('#dfca-all').on('change', () => {\n\t\t\t\t\tfrom.prop('disabled', true);\n\t\t\t\t\tto.prop('disabled', true);\n\t\t\t\t\tthis._recalculateDimensions();\n\t\t\t\t});\n\t\t\t\thtml.find('#dfca-date').on('change', () => {\n\t\t\t\t\tfrom.prop('disabled', false);\n\t\t\t\t\tto.prop('disabled', false);\n\t\t\t\t\tthis._recalculateDimensions();\n\t\t\t\t});\n\t\t\t\treturn html;\n\t\t\t});\n\t}\n}","import { ChatMessageData } from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs\";\nimport SETTINGS from \"../../../common/Settings\";\n\nexport interface DFChatArchiveEntry {\n\tid: number;\n\tname: string;\n\tvisible: boolean;\n\tfilename: string;\n\tfilepath: string;\n}\n\n\nclass ArchiveFolderMenu extends FormApplication {\n\tstatic get defaultOptions() {\n\t\treturn mergeObject(FormApplication.defaultOptions as Partial<FormApplicationOptions>, {\n\t\t\twidth: 400,\n\t\t\theight: 125,\n\t\t\tresizable: false,\n\t\t\tminimizable: false,\n\t\t\ttitle: 'DF_CHAT_ARCHIVE.Settings.ArchiveFolder_Name',\n\t\t\ttemplate: \"modules/df-chat-enhance/templates/archive-folder.hbs\",\n\t\t\tsubmitOnClose: false,\n\t\t\tsubmitOnChange: false,\n\t\t\tcloseOnSubmit: true\n\t\t}) as FormApplicationOptions;\n\t}\n\n\tprivate folder = SETTINGS.get<string>(DFChatArchive.PREF_FOLDER);\n\tprivate source = SETTINGS.get<string>(DFChatArchive.PREF_FOLDER_SOURCE);\n\n\tgetData(_options: any): any {\n\t\treturn { path: this.folder };\n\t}\n\n\tasync _renderInner(data: any): Promise<JQuery<HTMLElement>> {\n\t\tconst html = await super._renderInner(data);\n\t\tconst input = html.find('input#dfce-ca-folder-path')[0] as HTMLInputElement;\n\t\thtml.find('label>button').on('click', async event => {\n\t\t\tevent.preventDefault();\n\t\t\tconst fp = new FilePicker(<any>{\n\t\t\t\ttitle: 'DF_CHAT_ARCHIVE.Settings.ArchiveFolder_Name',\n\t\t\t\ttype: 'folder',\n\t\t\t\tfield: input,\n\t\t\t\tcallback: async (path: string) => {\n\t\t\t\t\tthis.source = fp.activeSource;\n\t\t\t\t\tthis.folder = path;\n\t\t\t\t},\n\t\t\t\tbutton: event.currentTarget\n\t\t\t});\n\t\t\tawait fp.browse(SETTINGS.get(DFChatArchive.PREF_FOLDER));\n\t\t});\n\t\treturn html;\n\t}\n\tprotected async _updateObject() {\n\t\tawait SETTINGS.set<string>(DFChatArchive.PREF_FOLDER, this.folder);\n\t\tawait SETTINGS.set<string>(DFChatArchive.PREF_FOLDER_SOURCE, this.source);\n\t}\n}\n\nexport class DFChatArchive {\n\tprivate static readonly PREF_LOGS = 'logs';\n\tprivate static readonly PREF_CID = 'currentId';\n\tstatic readonly PREF_FOLDER = 'archiveFolder';\n\tstatic readonly PREF_FOLDER_SOURCE = 'archiveFolderSource';\n\tprivate static readonly PREF_FOLDER_MENU = 'archiveFolderMenu';\n\tprivate static _updateListener: () => void = null;\n\n\tprivate static get DATA_FOLDER(): FilePicker.SourceType { return SETTINGS.get(DFChatArchive.PREF_FOLDER_SOURCE); }\n\n\tstatic setUpdateListener(listener: () => void) {\n\t\tthis._updateListener = listener;\n\t}\n\n\tstatic registerSettings() {\n\t\tSETTINGS.register(this.PREF_LOGS, {\n\t\t\tscope: 'world',\n\t\t\tconfig: false,\n\t\t\ttype: Object,\n\t\t\tdefault: [],\n\t\t\tonChange: () => {\n\t\t\t\tif (this._updateListener != null)\n\t\t\t\t\tthis._updateListener();\n\t\t\t}\n\t\t});\n\t\tSETTINGS.register(this.PREF_CID, {\n\t\t\tscope: 'world',\n\t\t\tconfig: false,\n\t\t\ttype: Number,\n\t\t\tdefault: 0\n\t\t});\n\n\t\tSETTINGS.registerMenu(this.PREF_FOLDER_MENU, {\n\t\t\tlabel: 'DF_CHAT_ARCHIVE.Settings.ArchiveFolder_Name',\n\t\t\thint: 'DF_CHAT_ARCHIVE.Settings.ArchiveFolder_Hint',\n\t\t\trestricted: true,\n\t\t\ttype: <any>ArchiveFolderMenu\n\t\t});\n\n\t\tSETTINGS.register(this.PREF_FOLDER, {\n\t\t\tscope: 'world',\n\t\t\tconfig: false,\n\t\t\ttype: String,\n\t\t\tdefault: `worlds/${game.world.id}/chat-archive`,\n\t\t\tonChange: async () => {\n\t\t\t\tawait this.createArchiveFolderIfMissing();\n\t\t\t\tif (this._updateListener != null)\n\t\t\t\t\tthis._updateListener();\n\t\t\t}\n\t\t});\n\t\tSETTINGS.register(this.PREF_FOLDER_SOURCE, {\n\t\t\tscope: 'world',\n\t\t\tconfig: false,\n\t\t\ttype: String,\n\t\t\tdefault: 'data',\n\t\t});\n\t\tthis.createArchiveFolderIfMissing();\n\t}\n\n\tprivate static async createArchiveFolderIfMissing() {\n\t\tconst folder: string = SETTINGS.get(this.PREF_FOLDER);\n\t\tawait FilePicker.browse(this.DATA_FOLDER, folder)\n\t\t\t.catch(async _ => {\n\t\t\t\tif (!await FilePicker.createDirectory(this.DATA_FOLDER, folder, {}))\n\t\t\t\t\tthrow new Error('Could not access the archive folder: ' + folder);\n\t\t\t});\n\t}\n\n\tstatic getLogs(): DFChatArchiveEntry[] { return SETTINGS.get<DFChatArchiveEntry[]>(this.PREF_LOGS); }\n\tstatic getArchive(id: number): DFChatArchiveEntry { return this.getLogs().find(x => x.id == id); }\n\tstatic exists(id: number): boolean { return !!this.getLogs().find(x => x.id == id); }\n\n\tprivate static async _generateChatArchiveFile(id: number, name: string, chats: ChatMessage[] | ChatMessageData[], visible: boolean): Promise<DFChatArchiveEntry> {\n\t\t// Get the folder path\n\t\tconst folderPath = SETTINGS.get<string>(this.PREF_FOLDER);\n\t\t// Replace special characters in name to underscores\n\t\tconst safeName = name.replace(/[^ a-z0-9-_()[\\]<>]/gi, '_');\n\t\t// Generate the system safe filename\n\t\tconst fileName = encodeURI(`${id}_${safeName}.json`);\n\t\t// Create the File and contents\n\t\tconst file = new File([JSON.stringify(chats, null, '')], fileName, { type: 'application/json' });\n\t\tconst response: { path?: string; message?: string } = <any>await FilePicker.upload(this.DATA_FOLDER, folderPath, file);\n\t\tif (!response.path) {\n\t\t\tconsole.error(`Could not create archive ${fileName}\\nReason: ${response}`);\n\t\t\tthrow new Error('Could not upload the archive to server: ' + fileName);\n\t\t}\n\t\tconst entry: DFChatArchiveEntry = {\n\t\t\tid: id,\n\t\t\tname: name,\n\t\t\tvisible: visible,\n\t\t\tfilepath: response.path,\n\t\t\tfilename: fileName\n\t\t};\n\t\treturn entry;\n\t}\n\n\tstatic async createChatArchive(name: string, chats: ChatMessage[], visible: boolean): Promise<DFChatArchiveEntry> {\n\t\tconst newId = SETTINGS.get<number>(this.PREF_CID) + 1;\n\t\tSETTINGS.set(this.PREF_CID, newId);\n\t\tconst entry = await this._generateChatArchiveFile(newId, name, chats, visible);\n\t\tconst logs = SETTINGS.get<DFChatArchiveEntry[]>(this.PREF_LOGS);\n\t\tlogs.push(entry);\n\t\tawait SETTINGS.set(this.PREF_LOGS, logs);\n\t\tif (this._updateListener != null)\n\t\t\tthis._updateListener();\n\t\treturn entry;\n\t}\n\n\tstatic async getArchiveContents(archive: DFChatArchiveEntry): Promise<(ChatMessage | ChatMessageData)[]> {\n\t\tconst response = await fetch(archive.filepath);\n\t\tconst data = await response.json().catch(error => console.error(`Failed to read JSON for archive ${archive.filepath}\\n${error}`));\n\t\tif (response.ok)\n\t\t\treturn data as (ChatMessage | ChatMessageData)[];\n\t\telse\n\t\t\tthrow new Error('Could not access the archive from server side: ' + archive.filepath);\n\t}\n\n\tstatic async updateChatArchive(archive: DFChatArchiveEntry, newChatData?: (ChatMessage | ChatMessageData)[]): Promise<DFChatArchiveEntry> {\n\t\tif (!this.getLogs().find(x => x.id == archive.id))\n\t\t\tthrow new Error('Could not locate an archive for the given ID: ' + archive.id.toString());\n\t\t// If we are updating the contents of an archive\n\t\tif (newChatData) {\n\t\t\tconst folderPath = SETTINGS.get<string>(this.PREF_FOLDER);\n\t\t\tconst file = new File([JSON.stringify(newChatData)], archive.filename, { type: 'application/json' });\n\t\t\tconst response: {\n\t\t\t\tpath?: string;\n\t\t\t\tmessage?: string;\n\t\t\t} = <any>await FilePicker.upload(this.DATA_FOLDER, folderPath, file, {});\n\t\t\tif (!response.path)\n\t\t\t\tthrow new Error('Could not upload the archive to server side: ' + archive.id.toString());\n\t\t}\n\t\tconst logs = this.getLogs();\n\t\tconst idx = logs.findIndex(x => x.id === archive.id);\n\t\tif (idx < 0) return archive;\n\t\tlogs[idx] = archive;\n\t\tawait SETTINGS.set(DFChatArchive.PREF_LOGS, logs);\n\t\treturn archive;\n\t}\n\n\tstatic async deleteAll() {\n\t\tconst folderPath = SETTINGS.get<string>(this.PREF_FOLDER);\n\t\tconst logs = SETTINGS.get<DFChatArchiveEntry[]>(this.PREF_LOGS);\n\t\t// Can not delete files currently, truncate instead to make filtering easier.\n\t\tawait Promise.all(logs.map(archive => {\n\t\t\tconst file = new File([''], archive.filename, { type: 'application/json' });\n\t\t\treturn FilePicker.upload(this.DATA_FOLDER, folderPath, file, {});\n\t\t}));\n\t\tawait SETTINGS.set(this.PREF_LOGS, []);\n\t\tif (this._updateListener != null)\n\t\t\tthis._updateListener();\n\t}\n\n\tstatic async deleteChatArchive(id: number) {\n\t\tconst folderPath = SETTINGS.get<string>(this.PREF_FOLDER);\n\t\tconst logs = SETTINGS.get<DFChatArchiveEntry[]>(this.PREF_LOGS);\n\t\tconst entryIdx = logs.findIndex(x => x.id === id);\n\t\tif (entryIdx < 0) {\n\t\t\tconsole.error(`Could not find entry for ID#${id}`);\n\t\t\treturn;\n\t\t}\n\t\tconst entry = logs[entryIdx];\n\t\t// Cannot delete file currently, instead truncate the file and move along.\n\t\tconst file = new File([''], entry.filename, { type: 'application/json' });\n\t\tawait FilePicker.upload(this.DATA_FOLDER, folderPath, file, {});\n\t\tlogs.splice(entryIdx, 1);\n\t\tawait SETTINGS.set(this.PREF_LOGS, logs);\n\t\tif (this._updateListener != null)\n\t\t\tthis._updateListener();\n\t}\n}\n","\ndeclare global {\n\tinterface LenientGlobalVariableTypes {\n\t\tgame: never;\n\t\tcanvas: never;\n\t}\n\tinterface String {\n\t\t/** Localizes the string via the global `game.i18n.localize()` function. */\n\t\tlocalize(): string\n\t}\n\ttype AnyFunction = (...args: any) => any;\n}\n\nexport default class SETTINGS {\n\tstatic MOD_NAME: string;\n\tstatic init(moduleName: string) {\n\t\tthis.MOD_NAME = moduleName;\n\t\tif (!String.prototype.localize) {\n\t\t\tString.prototype.localize = function () {\n\t\t\t\treturn game.i18n.localize(this.valueOf());\n\t\t\t};\n\t\t}\n\t}\n\tstatic register<T>(key: string, config: ClientSettings.PartialSettingConfig<T>) { game.settings.register(SETTINGS.MOD_NAME, key, config); }\n\tstatic registerMenu(key: string, config: ClientSettings.PartialSettingSubmenuConfig) { game.settings.registerMenu(SETTINGS.MOD_NAME, key, config); }\n\tstatic get<T>(key: string): T { return <T>game.settings.get(SETTINGS.MOD_NAME, key); }\n\tstatic async set<T>(key: string, value: T): Promise<T> { return await game.settings.set(SETTINGS.MOD_NAME, key, value); }\n\tstatic default<T>(key: string): T { return <T>game.settings.settings.get(SETTINGS.MOD_NAME + '.' + key).default; }\n\t/** helper for referencing a Typed constructor for the `type` field of a setting { type: SETTINGS.typeOf<MyClass>() } */\n\tstatic typeOf<T>(): ConstructorOf<T> { return Object as any; }\n}\n","import SETTINGS from \"../../../common/Settings\";\nimport { DFChatArchive } from \"./DFChatArchive\";\nimport DFChatArchiveViewer from \"./DFChatArchiveViewer\";\n\nexport default class DFChatArchiveManager extends Application {\n\tstatic readonly PREF_REVERSE_SORT = 'dfca-manager-reverseSort';\n\tstatic chatViewers: Map<number, DFChatArchiveViewer> = new Map();\n\n\tstatic get defaultOptions() {\n\t\treturn mergeObject(Application.defaultOptions as Partial<ApplicationOptions>, {\n\t\t\ttemplate: \"modules/df-chat-enhance/templates/archive-manager.hbs\",\n\t\t\tresizable: true,\n\t\t\tminimizable: true,\n\t\t\twidth: 300,\n\t\t\theight: 500,\n\t\t\ttitle: \"DF_CHAT_ARCHIVE.ArchiveManager_Title\".localize()\n\t\t}) as ApplicationOptions;\n\t}\n\n\tgetData(options?: any) {\n\t\tconst data = super.getData(options);\n\t\tlet messages = DFChatArchive.getLogs();\n\t\tif (!game.user.isGM)\n\t\t\tmessages = messages.filter(x => x.visible);\n\t\tmessages = messages.sort((a, b) => a.name.localeCompare(b.name));\n\t\tconst reverseSort = SETTINGS.get<boolean>(DFChatArchiveManager.PREF_REVERSE_SORT);\n\t\tmergeObject(data, {\n\t\t\tmessages: reverseSort ? messages.reverse() : messages,\n\t\t\tisGM: game.user.isGM,\n\t\t\treverseSort\n\t\t});\n\t\treturn data;\n\t}\n\n\tprivate _subscribeView(element: JQuery) {\n\t\telement.on('click', function () {\n\t\t\tconst id = parseInt($(this).attr('data-id'));\n\t\t\tif (isNaN(id) || !DFChatArchive.exists(id)) {\n\t\t\t\tui.notifications.error('DF_CHAT_ARCHIVE.ArchiveManager_ErrorBadId'.localize());\n\t\t\t\tthrow Error(`Invalid id for Chat Archive: '${$(this).attr('data-id')}'`);\n\t\t\t}\n\t\t\tif (DFChatArchiveManager.chatViewers.has(id)) {\n\t\t\t\tDFChatArchiveManager.chatViewers.get(id).bringToTop();\n\t\t\t} else {\n\t\t\t\tDFChatArchiveManager.chatViewers.set(id, new DFChatArchiveViewer(DFChatArchive.getArchive(id), view => {\n\t\t\t\t\tDFChatArchiveManager.chatViewers.delete(view.archive.id);\n\t\t\t\t}));\n\t\t\t\tDFChatArchiveManager.chatViewers.get(id).render(true);\n\t\t\t}\n\t\t});\n\t}\n\tprivate _subscribeDelete(element: JQuery) {\n\t\telement.on('click', async function () {\n\t\t\tconst id = parseInt($(this).attr('data-id'));\n\t\t\tif (isNaN(id) || !DFChatArchive.exists(id)) {\n\t\t\t\tui.notifications.error('DF_CHAT_ARCHIVE.ArchiveManager_ErrorBadId'.localize());\n\t\t\t\tthrow Error(`Invalid id for Chat Archive: '${$(this).attr('data-id')}'`);\n\t\t\t}\n\t\t\tconst archive = DFChatArchive.getArchive(id);\n\t\t\tawait Dialog.confirm({\n\t\t\t\ttitle: 'DF_CHAT_ARCHIVE.ArchiveManager_ConfirmDeleteArchiveTitle'.localize(),\n\t\t\t\tcontent: 'DF_CHAT_ARCHIVE.ArchiveManager_ConfirmDeleteArchiveContent'.localize().replace('{name}', archive.name),\n\t\t\t\tdefaultYes: false,\n\t\t\t\tyes: async () => await DFChatArchive.deleteChatArchive(id)\n\t\t\t});\n\t\t});\n\t}\n\n\tactivateListeners(html: JQuery) {\n\t\tDFChatArchive.setUpdateListener(this._archiveChanged.bind(this));\n\t\tif (DFChatArchive.getLogs().length > 0)\n\t\t\thtml.find('p.dfca-no-items').hide();\n\t\thtml.find('a[data-type=\"view\"]').each((i, element) => { this._subscribeView($(element)); });\n\t\thtml.find('a[data-type=\"delete\"]').each((i, element) => { this._subscribeDelete($(element)); });\n\t\thtml.find('#dfca-delete-all').on('click', async function () {\n\t\t\tawait Dialog.confirm({\n\t\t\t\ttitle: 'DF_CHAT_ARCHIVE.ArchiveManager_ConfirmDeleteAllTitle'.localize(),\n\t\t\t\tcontent: 'DF_CHAT_ARCHIVE.ArchiveManager_ConfirmDeleteAllMessage1'.localize(),\n\t\t\t\tdefaultYes: false,\n\t\t\t\tyes: async () => {\n\t\t\t\t\tawait Dialog.confirm({\n\t\t\t\t\t\ttitle: 'DF_CHAT_ARCHIVE.ArchiveManager_ConfirmDeleteAllTitle'.localize(),\n\t\t\t\t\t\tcontent: 'DF_CHAT_ARCHIVE.ArchiveManager_ConfirmDeleteAllMessage2'.localize(),\n\t\t\t\t\t\tdefaultYes: false,\n\t\t\t\t\t\tyes: async () => {\n\t\t\t\t\t\t\tawait DFChatArchive.deleteAll();\n\t\t\t\t\t\t\tui.notifications.info('DF_CHAT_ARCHIVE.ArchiveManager_ConfirmDeleteAllComplete'.localize());\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tconst asc = html.find('#dfca-sort-asc');\n\t\tconst dsc = html.find('#dfca-sort-dsc');\n\t\tasc.on('click', async () => {\n\t\t\tawait SETTINGS.set(DFChatArchiveManager.PREF_REVERSE_SORT, true);\n\t\t\tasc.hide();\n\t\t\tdsc.show();\n\t\t\tthis.render();\n\t\t});\n\t\tdsc.on('click', async () => {\n\t\t\tawait SETTINGS.set(DFChatArchiveManager.PREF_REVERSE_SORT, false);\n\t\t\tdsc.hide();\n\t\t\tasc.show();\n\t\t\tthis.render();\n\t\t});\n\t}\n\n\tclose(options?: any): Promise<void> {\n\t\tDFChatArchive.setUpdateListener(null);\n\t\treturn super.close(options);\n\t}\n\n\tprivate async _archiveChanged() {\n\t\tlet logs = DFChatArchive.getLogs();\n\t\tif (!game.user.isGM)\n\t\t\tlogs = logs.filter(x => x.visible);\n\t\tconst archiveContainer = this.element.find('#dfca-archives');\n\t\tarchiveContainer.empty();\n\t\t// Add new items\n\t\tfor (const archive of logs) {\n\t\t\tconst visible = archive.visible === true\n\t\t\t\t? `<i class=\"dfca-visible fas fa-users\" title=\"${'DF_CHAT_ARCHIVE.ArchiveManager_VisibleToPlayers'.localize()}\"></i>` : '';\n\t\t\tconst html = $(`\n\t\t<li class=\"dfca-archive-item\" data-id=\"${archive.id}\">\n\t\t\t<div>\n\t\t\t\t<a class=\"button dfca-view\" data-type=\"view\" data-id=\"${archive.id}\"><i class=\"fas fa-eye\"></i>\n\t\t\t\t\t<span>${archive.name}</span>\n\t\t\t\t</a>\n\t\t\t\t${visible}\n\t\t\t\t<a class=\"button dfca-delete\" data-type=\"delete\" data-id=\"${archive.id}\"><i class=\"fas fa-trash\"></i></a>\n\t\t\t</div>\n\t\t</li>`);\n\t\t\tthis._subscribeView(html.find('a[data-type=\"view\"]'));\n\t\t\tthis._subscribeDelete(html.find('a[data-type=\"delete\"]'));\n\t\t\tarchiveContainer.append(html);\n\t\t}\n\t\tif (archiveContainer[0].children.length == 0)\n\t\t\tthis.element.find('p.dfca-no-items').show();\n\t\telse\n\t\t\tthis.element.find('p.dfca-no-items').hide();\n\t}\n}","import { ChatMessageData } from '@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs';\nimport { DFChatArchive, DFChatArchiveEntry } from './DFChatArchive';\n\nexport default class DFChatArchiveViewer extends Application {\n\tarchive: DFChatArchiveEntry;\n\tmessages: (ChatMessage | ChatMessageData)[];\n\tonCloseCallBack: (view: DFChatArchiveViewer) => void;\n\tconstructor(archive: DFChatArchiveEntry, onCloseCallBack: (view: DFChatArchiveViewer) => void) {\n\t\tsuper();\n\t\tthis.archive = archive;\n\t\tthis.onCloseCallBack = onCloseCallBack;\n\t}\n\n\tstatic get defaultOptions() {\n\t\treturn mergeObject(Application.defaultOptions as Partial<ApplicationOptions>, {\n\t\t\ttemplate: \"modules/df-chat-enhance/templates/archive-viewer.hbs\",\n\t\t\twidth: 300,\n\t\t\theight: 500,\n\t\t\tresizable: true,\n\t\t\ttitle: 'DF_CHAT_ARCHIVE.ArchiveViewer_Title',\n\t\t\tclasses: ['df-chat-log-window']\n\t\t}) as ApplicationOptions;\n\t}\n\n\tgetData(options = {}) {\n\t\tsuper.getData(options);\n\t\treturn {\n\t\t\tname: this.archive.name,\n\t\t\tisGM: game.user.isGM,\n\t\t\tvisible: this.archive.visible ?? false,\n\t\t\tlogId: 'df-chat-log-' + this.archive.id\n\t\t};\n\t}\n\n\t// convert a Unicode string to a string in which\n\t// each 16-bit unit occupies only one byte\n\t/**\n\t * Converts a UTF-16 string to an ASCii string containing the binary data of the UTF-16 text.\n\t * @param data UTF-16 data\n\t * @returns Binary data coerced into a string\n\t */\n\tprivate static toBinary(data: string): string {\n\t\tconst codeUnits = new Uint16Array(data.length);\n\t\tfor (let i = 0; i < codeUnits.length; i++) {\n\t\t\tcodeUnits[i] = data.charCodeAt(i);\n\t\t}\n\t\tconst charCodes = new Uint8Array(codeUnits.buffer);\n\t\tlet result = '';\n\t\tfor (let i = 0; i < charCodes.byteLength; i++) {\n\t\t\tresult += String.fromCharCode(charCodes[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t_renderInner(data: any): Promise<JQuery> {\n\t\treturn (super._renderInner(data) as Promise<JQuery>)\n\t\t\t.then(async (html: JQuery<HTMLElement>) => {\n\t\t\t\thtml.find(\"#visible-df-chat-log-\" + this.archive.id).on('change', async (element) => {\n\t\t\t\t\tthis.archive.visible = (element.target as HTMLInputElement).checked;\n\t\t\t\t\tawait DFChatArchive.updateChatArchive(this.archive);\n\t\t\t\t});\n\t\t\t\thtml.find(\"#edit\").on('click', async () => {\n\t\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\t\tconst dialog = new Dialog({\n\t\t\t\t\t\t\ttitle: \"DF_CHAT_ARCHIVE.ArchiveViewer_NameEdit_Title\".localize(),\n\t\t\t\t\t\t\tcontent: `<input id=\"name\" type=\"text\" value=\"${this.archive.name}\"/>`,\n\t\t\t\t\t\t\tbuttons: {\n\t\t\t\t\t\t\t\tsave: {\n\t\t\t\t\t\t\t\t\ticon: '<i class=\"fas fa-save\"></i>',\n\t\t\t\t\t\t\t\t\tlabel: 'DF_CHAT_ARCHIVE.ArchiveViewer_NameEdit_Save'.localize(),\n\t\t\t\t\t\t\t\t\tcallback: async (html) => {\n\t\t\t\t\t\t\t\t\t\tthis.archive.name = $(html).find('#name').val() as string;\n\t\t\t\t\t\t\t\t\t\tawait dialog.close();\n\t\t\t\t\t\t\t\t\t\tawait DFChatArchive.updateChatArchive(this.archive);\n\t\t\t\t\t\t\t\t\t\tawait this.render(false);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tclose: {\n\t\t\t\t\t\t\t\t\ticon: '<i class=\"fas fa-times\"></i>',\n\t\t\t\t\t\t\t\t\tlabel: 'DF_CHAT_ARCHIVE.ArchiveViewer_NameEdit_Cancel'.localize(),\n\t\t\t\t\t\t\t\t\tcallback: async () => {\n\t\t\t\t\t\t\t\t\t\tawait dialog.close();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdefault: 'save'\n\t\t\t\t\t\t});\n\t\t\t\t\t\tdialog.render(true);\n\t\t\t\t\t}, 1);\n\t\t\t\t});\n\t\t\t\thtml.find('#print').on('click', async () => {\n\t\t\t\t\tconst clone = html.find('#df-chat-log').clone();\n\t\t\t\t\tclone.addClass('df-chat-print');\n\t\t\t\t\t$('body').hide();\n\t\t\t\t\t$('html').addClass('df-chat-print');\n\t\t\t\t\t$('html').append(clone);\n\t\t\t\t\twindow.print();\n\t\t\t\t\tclone.remove();\n\t\t\t\t\t$('html').removeClass('df-chat-print');\n\t\t\t\t\t$('body').show();\n\t\t\t\t});\n\t\t\t\thtml.find('#merge').on('click', async () => {\n\t\t\t\t\tif (DFChatArchive.getLogs().length == 1) {\n\t\t\t\t\t\tui.notifications.info('DF_CHAT_ARCHIVE.ArchiveViewer_Merge_OnlyOneArchive'.localize());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst dialog: Dialog = new Dialog({\n\t\t\t\t\t\ttitle: 'DF_CHAT_ARCHIVE.ArchiveViewer_Merge_Title'.localize(),\n\t\t\t\t\t\tdefault: 'merge',\n\t\t\t\t\t\tcontent: await renderTemplate('modules/df-chat-enhance/templates/archive-merge.hbs', {\n\t\t\t\t\t\t\tname: this.archive.name,\n\t\t\t\t\t\t\tarchives: DFChatArchive.getLogs().filter(x => x.id != this.archive.id)\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tbuttons: {\n\t\t\t\t\t\t\tcancel: {\n\t\t\t\t\t\t\t\ticon: '<i class=\"fas fa-times\"></i>',\n\t\t\t\t\t\t\t\tlabel: 'DF_CHAT_ARCHIVE.ArchiveViewer_Merge_Cancel'.localize(),\n\t\t\t\t\t\t\t\tcallback: async () => await dialog.close()\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmerge: {\n\t\t\t\t\t\t\t\ticon: '<i class=\"fas fa-sitemap\"></i>',\n\t\t\t\t\t\t\t\tlabel: 'DF_CHAT_ARCHIVE.ArchiveViewer_Merge_Merge'.localize(),\n\t\t\t\t\t\t\t\tcallback: async (html) => {\n\t\t\t\t\t\t\t\t\tconst val = $(html).find('#archive').val() as string;\n\t\t\t\t\t\t\t\t\tif (isNaN(parseInt(val))) return;\n\t\t\t\t\t\t\t\t\tconst id = parseInt(val);\n\t\t\t\t\t\t\t\t\tconst source = DFChatArchive.getLogs().find(x => x.id == id);\n\t\t\t\t\t\t\t\t\tconst currentChats = await DFChatArchive.getArchiveContents(this.archive);\n\t\t\t\t\t\t\t\t\tconst sourceChats = await DFChatArchive.getArchiveContents(source);\n\t\t\t\t\t\t\t\t\tconst mergedChats = (currentChats as ChatMessageData[])\n\t\t\t\t\t\t\t\t\t\t.concat(sourceChats as ChatMessageData[])\n\t\t\t\t\t\t\t\t\t\t.sort((a, b) => a.timestamp - b.timestamp);\n\t\t\t\t\t\t\t\t\tDFChatArchive.updateChatArchive(this.archive, mergedChats);\n\t\t\t\t\t\t\t\t\tthis.render(false);\n\t\t\t\t\t\t\t\t\tif (($(html).find('#delete')[0] as HTMLInputElement).checked) {\n\t\t\t\t\t\t\t\t\t\tDFChatArchive.deleteChatArchive(id);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tawait dialog.render(true);\n\t\t\t\t});\n\n\t\t\t\thtml.find('#html').on('click', () => {\n\t\t\t\t\tconst data = $('<div></div>').append(html.find('#df-chat-log').clone()).html();\n\t\t\t\t\tconst anchor = document.createElement('a');\n\t\t\t\t\tanchor.download = encodeURI(this.archive.name) + '.html';\n\t\t\t\t\t// anchor.href = \"data:text/html;base64,\" + btoa(unescape(encodeURIComponent(data)));\n\t\t\t\t\tanchor.href = \"data:text/html,\" + encodeURIComponent(data);\n\t\t\t\t\tanchor.click();\n\t\t\t\t});\n\n\t\t\t\tconst log = html.find('#df-chat-log');\n\t\t\t\tconst messageHtml = [];\n\t\t\t\tthis.messages = (await DFChatArchive.getArchiveContents(this.archive) as ChatMessageData[])\n\t\t\t\t\t.filter(x => game.user.isGM || x.user === game.userId || x.type !== CONST.CHAT_MESSAGE_TYPES.WHISPER || x.whisper.some(x => x === game.userId));\n\n\t\t\t\tconst deletionList: string[] = [];\n\t\t\t\tconst deleteButton = html.find('#dfal-save-changes');\n\t\t\t\tfor (const value of this.messages as ChatMessageData[]) {\n\t\t\t\t\tconst chatMessage = value instanceof ChatMessage ? value : new ChatMessage(value);\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tconst html = await chatMessage.getHTML();\n\t\t\t\t\t\t// if we only have 1 message, don't allow it to be deleted. They might as well just delete the archive\n\t\t\t\t\t\tif (this.messages.length == 1)\n\t\t\t\t\t\t\thtml.find('a.message-delete').hide();\n\t\t\t\t\t\thtml.find('a.message-delete').on('click', (event: JQuery.ClickEvent) => {\n\t\t\t\t\t\t\tconst messageHtml = $(event.target.parentElement?.parentElement?.parentElement?.parentElement);\n\t\t\t\t\t\t\tconst buttonIcon = $(event.target);\n\t\t\t\t\t\t\tif (messageHtml.hasClass('dfal-deleted')) {\n\t\t\t\t\t\t\t\tmessageHtml.removeClass('dfal-deleted');\n\t\t\t\t\t\t\t\tbuttonIcon.removeClass('fa-redo-alt');\n\t\t\t\t\t\t\t\tbuttonIcon.addClass('fa-trash');\n\t\t\t\t\t\t\t\tdeletionList.splice(deletionList.findIndex(x => x === messageHtml.attr('data-message-id')), 1);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmessageHtml.addClass('dfal-deleted');\n\t\t\t\t\t\t\t\tbuttonIcon.removeClass('fa-trash');\n\t\t\t\t\t\t\t\tbuttonIcon.addClass('fa-redo-alt');\n\t\t\t\t\t\t\t\tdeletionList.push(messageHtml.attr('data-message-id'));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (deletionList.length > 0) deleteButton.show();\n\t\t\t\t\t\t\telse deleteButton.hide();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tmessageHtml.push(html);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tconsole.error(`Chat message ${chatMessage.id} failed to render.\\n${err})`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Prepend the HTML\n\t\t\t\tlog.prepend(messageHtml);\n\n\t\t\t\tdeleteButton.hide();\n\t\t\t\tdeleteButton.on('click', async () => {\n\t\t\t\t\tif (deletionList.length === this.messages.length) {\n\t\t\t\t\t\tui.notifications.warn('DF_CHAT_ARCHIVE.ArchiveViewer_Error_Delete_All'.localize());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tDialog.confirm({\n\t\t\t\t\t\ttitle: \"DF_CHAT_ARCHIVE.ArchiveViewer_DeleteTitle\".localize(),\n\t\t\t\t\t\tcontent: \"DF_CHAT_ARCHIVE.ArchiveViewer_DeleteContent\".localize(),\n\t\t\t\t\t\tdefaultYes: false,\n\t\t\t\t\t\tyes: async () => {\n\t\t\t\t\t\t\tfor (const id of deletionList) {\n\t\t\t\t\t\t\t\tconst message = html.find(`li[data-message-id=\"${id}\"]`);\n\t\t\t\t\t\t\t\tmessage.hide(500, () => message.remove());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.messages = this.messages.filter((x: any) => !deletionList.includes(x._id));\n\t\t\t\t\t\t\tawait DFChatArchive.updateChatArchive(this.archive, this.messages);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\treturn html;\n\t\t\t});\n\t}\n\tclose(options?: Application.CloseOptions): Promise<void> {\n\t\tthis.onCloseCallBack(this);\n\t\treturn super.close(options);\n\t}\n}","import SETTINGS from \"../../../common/Settings\";\nimport DFChatEditor from './DFChatEditor';\n\nconst PREF_EDIT_ALLOWED = 'edit-allowed';\nconst PREF_GM_ALL = 'gm-edit-all';\nconst PREF_IGNORE_HTML = 'edit-ignore-html';\n\nexport default class DFChatEdit {\n\tstatic readonly PREF_SHOW_EDITED = 'DFChatEdit.ShowEditedLable';\n\n\tstatic ready() {\n\t\tSETTINGS.register(DFChatEditor.PREF_MARKDOWN, {\n\t\t\tname: 'DF_CHAT_EDIT.Settings_MarkdownName',\n\t\t\thint: 'DF_CHAT_EDIT.Settings_MarkdownHint',\n\t\t\ttype: Boolean,\n\t\t\tdefault: true,\n\t\t\tconfig: true,\n\t\t\tscope: 'world'\n\t\t});\n\t\tSETTINGS.register(PREF_EDIT_ALLOWED, {\n\t\t\tname: 'DF_CHAT_EDIT.Settings_AllowEditName',\n\t\t\thint: 'DF_CHAT_EDIT.Settings_AllowEditHint',\n\t\t\ttype: Boolean,\n\t\t\tdefault: true,\n\t\t\tscope: 'world',\n\t\t\tconfig: true\n\t\t});\n\t\tSETTINGS.register(PREF_GM_ALL, {\n\t\t\tname: 'DF_CHAT_EDIT.Settings_GMEditAllName',\n\t\t\thint: 'DF_CHAT_EDIT.Settings_GMEditAllHint',\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t\tconfig: true,\n\t\t\tscope: 'world'\n\t\t});\n\t\tSETTINGS.register(PREF_IGNORE_HTML, {\n\t\t\tname: 'DF_CHAT_EDIT.Settings_IgnoreHtmlName',\n\t\t\thint: 'DF_CHAT_EDIT.Settings_IgnoreHtmlHint',\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t\tconfig: true,\n\t\t\tscope: 'world'\n\t\t});\n\t\tSETTINGS.register(this.PREF_SHOW_EDITED, {\n\t\t\tname: 'DF_CHAT_EDIT.Settings_ShowEditedLabelName',\n\t\t\thint: 'DF_CHAT_EDIT.Settings_ShowEditedLabelHint',\n\t\t\ttype: Boolean,\n\t\t\tdefault: true,\n\t\t\tconfig: true,\n\t\t\tscope: 'world'\n\t\t});\n\n\t\tlibWrapper.register(SETTINGS.MOD_NAME, 'ChatLog.prototype._onChatKeyDown', (wrapper: (..._: any) => void, ...args: any) => {\n\t\t\tconst event = args[0] as KeyboardEvent;\n\t\t\t// We have used the Shift+Up combo to edit previously sent message\n\t\t\tif (event.code === \"ArrowUp\" && event.ctrlKey) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tlet messages = <ChatMessage[]>[...(ui.chat.collection.values())];\n\t\t\t\t// Perform an inverted sort ( n<0 before, n=0 same, n>0 after )\n\t\t\t\tmessages = messages.sort((a, b) => b.data.timestamp - a.data.timestamp);\n\t\t\t\tconst message = messages.find(x => x.data.user === game.user.id);\n\t\t\t\tif (!message) return;\n\t\t\t\tDFChatEdit.editChatMessage.bind(message)();\n\t\t\t}\n\t\t\telse\n\t\t\t\twrapper(...args);\n\t\t}, 'MIXED');\n\n\t\tlibWrapper.register(SETTINGS.MOD_NAME, 'ChatLog.prototype.processMessage', function (this: ChatLog, wrapper: AnyFunction, message: string) {\n\t\t\tlet originalMessage: string = null;\n\t\t\tif (SETTINGS.get(DFChatEditor.PREF_MARKDOWN)) {\n\t\t\t\tif (message.trim().startsWith('/')) {\n\t\t\t\t\tconst token = message.split(' ')[0].trim();\n\t\t\t\t\tswitch (token) {\n\t\t\t\t\t\tcase '/ooc': /* fall-through */\n\t\t\t\t\t\tcase '/ic': /* fall-through */\n\t\t\t\t\t\tcase '/emote': /* fall-through */\n\t\t\t\t\t\tcase '/whisper': /* fall-through */\n\t\t\t\t\t\tcase '/w':\n\t\t\t\t\t\t\t[originalMessage, message] = DFChatEditor.processMarkdown(message.substr(token.length));\n\t\t\t\t\t\t\toriginalMessage = `${token} ${originalMessage.trimStart()}`;\n\t\t\t\t\t\t\tmessage = `${token} ${message.trimStart()}`;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'log': /* fall-through */\n\t\t\t\t\t\tcase 'gmlog': /* fall-through */\n\t\t\t\t\t\tcase '/gmroll': /* fall-through */\n\t\t\t\t\t\tcase '/blindroll': /* fall-through */\n\t\t\t\t\t\tcase '/selfroll': /* fall-through */\n\t\t\t\t\t\tcase '/r': /* fall-through */\n\t\t\t\t\t\tcase '/roll': /* fall-through */\n\t\t\t\t\t\tdefault: break;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t[originalMessage, message] = DFChatEditor.processMarkdown(message);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst result = wrapper(message);\n\t\t\tif (originalMessage) {\n\t\t\t\tthis._sentMessages.splice(0, 1);\n\t\t\t\tthis._sentMessages.unshift(originalMessage);\n\t\t\t}\n\t\t\treturn result;\n\t\t}, 'WRAPPER');\n\t}\n\n\tstatic appendChatContextMenuOptions(options: ContextMenu.Item[]) {\n\t\toptions.push({\n\t\t\tname: 'DF_CHAT_EDIT.ContextOption',\n\t\t\ticon: '<i class=\"fas fa-pencil-alt\"></i>',\n\t\t\tcondition: (header) => {\n\t\t\t\tconst chatData: ChatMessage = ui.chat.collection.get($(header).attr('data-message-id'));\n\t\t\t\treturn this.processChatMessage(chatData);\n\t\t\t},\n\t\t\tcallback: (header) => {\n\t\t\t\tconst chatData = ui.chat.collection.get($(header).attr('data-message-id'));\n\t\t\t\tDFChatEdit.editChatMessage.bind(chatData)();\n\t\t\t\treturn {};\n\t\t\t}\n\t\t});\n\t}\n\n\t// Will be bound to the instance of ChatMessage we are observing\n\tstatic async editChatMessage(this: ChatMessage) {\n\t\t// Double check permissions\n\t\tif (!SETTINGS.get(PREF_EDIT_ALLOWED)) {\n\t\t\tui.notifications.warn('DF_CHAT_EDIT.Error_NoPermission'.localize());\n\t\t\treturn;\n\t\t}\n\t\tif ((<any>this).chatEditor) {\n\t\t\t(<any>this).chatEditor.bringToTop();\n\t\t} else {\n\t\t\t(<any>this).chatEditor = new DFChatEditor(this);\n\t\t\tawait (<any>this).chatEditor._render(true);\n\t\t}\n\t\t(<any>this).chatEditor.element.find('textarea').focus();\n\t}\n\n\tstatic isHTML(str: string): boolean {\n\t\tconst doc = new DOMParser().parseFromString(str, \"text/html\");\n\t\treturn Array.from(doc.body.childNodes).some(node => {\n\t\t\treturn (node instanceof HTMLElement && !node.classList.contains('df-edited'))\n\t\t\t\t&& !(node instanceof HTMLBRElement)\n\t\t\t\t&& node.nodeType === 1;\n\t\t});\n\t}\n\n\tstatic processChatMessage(chatMessage: ChatMessage/*, html: JQuery<HTMLElement>*/): boolean {\n\t\t// If we are catching the render of an archived message\n\t\tif (!ui.chat.collection.has(chatMessage.id))\n\t\t\treturn false;\n\t\t// // If an edit button has already been placed\n\t\t// if (html.find('a.button.message-edit').length != 0) {\n\t\t// \thtml.find('a.button.message-edit').remove();// remove the old edit button\n\t\t// }\n\t\t// Ignore rolls and other people's messages, unless we are the GM and PREF_GM_ALL is true\n\t\tif (!SETTINGS.get(PREF_EDIT_ALLOWED) || chatMessage.isRoll\n\t\t\t|| (chatMessage.data.user !== game.userId && !(game.user.isGM && SETTINGS.get(PREF_GM_ALL))))\n\t\t\treturn false;\n\t\t// If we ignore html and message contains html, return\n\t\tif (SETTINGS.get(PREF_IGNORE_HTML) && DFChatEdit.isHTML(chatMessage.data.content)) return false;\n\n\t\treturn true;\n\t\t// const header = html.find('header.message-header');\n\t\t// const editButton = $(`<a class=\"button message-edit\"><i class=\"fas fa-pencil-alt\"></i></a>`);\n\t\t// header.prepend(editButton);\n\t\t// editButton.on('click', DFChatEdit.editChatMessage.bind(chatMessage));\n\t}\n}\n","import SETTINGS from \"../../../common/Settings\";\nimport DFChatEdit from \"./df-chat-edit\";\n\n\ndeclare namespace marked {\n\tfunction parse(md: string, options: any): string;\n}\n\nexport default class DFChatEditor extends FormApplication {\n\tprivate chatMessage: ChatMessage;\n\tpublic static readonly PREF_MARKDOWN = 'edit-markdown';\n\n\t/**\n\t * Assign the default options which are supported by the entity edit sheet.\n\t * @returns The default options for this FormApplication class\n\t * @override\n\t * @see {@link Application.defaultOptions}\n\t */\n\tstatic get defaultOptions(): FormApplicationOptions {\n\t\treturn mergeObject(FormApplication.defaultOptions as Partial<FormApplicationOptions>, {\n\t\t\tcloseOnSubmit: true,\n\t\t\teditable: true,\n\t\t\tresizable: true,\n\t\t\twidth: 400,\n\t\t\tpopOut: true,\n\t\t\ttitle: 'DF_CHAT_EDIT.Editor_Title',\n\t\t\ttemplate: 'modules/df-chat-enhance/templates/chat-edit.hbs'\n\t\t}) as FormApplicationOptions;\n\t}\n\n\tconstructor(chatMessage: ChatMessage) {\n\t\tsuper({});\n\t\tthis.chatMessage = chatMessage;\n\t}\n\n\t/** @override */\n\tgetData(options?: any): any {\n\n\t\t// Collect the different Actor types and the labels for those types\n\t\tconst types = Object.keys(CONFIG.Actor.typeLabels).map(type => {\n\t\t\treturn { type, label: CONFIG.Actor.typeLabels[type], actors: [] };\n\t\t});\n\t\t// Organize the actors in the current scene into those type categories\n\t\tfor (const type of types) {\n\t\t\ttype.actors = game.scenes.viewed.tokens.contents.filter(x => x.actor.type === type.type).map(x => ({\n\t\t\t\tid: 'token-' + x.id,\n\t\t\t\tname: x.name\n\t\t\t}));\n\t\t}\n\n\t\tlet selected = '';\n\t\tif (this.chatMessage.data.user)\n\t\t\tselected = 'user-' + this.chatMessage.data.user;\n\t\tif (this.chatMessage.data.speaker.token)\n\t\t\tselected = 'token-' + this.chatMessage.data.speaker.token;\n\n\t\treturn mergeObject(options, {\n\t\t\tselected,\n\t\t\tplayers: game.users.map(x => ({ id: 'user-' + x.id, name: x.name })),\n\t\t\tactorGroups: types.filter(x => x.actors.length > 0),\n\t\t\tmessageText: this.chatMessage.data.content\n\t\t\t\t.replace(/< *br *\\/?>/gm, '\\n')\n\t\t\t\t.replace(/<p +class=\"df-edited\">.+/, '')\n\t\t});\n\t}\n\n\t/** @override */\n\tactivateListeners(html: JQuery): void {\n\t\tsuper.activateListeners(html);\n\t\thtml.find('#cancel').on('click', async () => await this.close());\n\t}\n\n\t/** @override */\n\tasync _updateObject(_event?: any, formData?: { content: string, speaker: string }) {\n\t\tlet data = formData.content as string;\n\t\tif (SETTINGS.get(DFChatEditor.PREF_MARKDOWN)) {\n\t\t\tdata = DFChatEditor.processMarkdown(data)[1];\n\t\t} else {\n\t\t\tdata = data.replace(/\\r?\\n/gm, '<br/>');\n\t\t}\n\t\tif (SETTINGS.get<boolean>(DFChatEdit.PREF_SHOW_EDITED) && data.search(/<p +class=\"df-edited\">/) < 0) {\n\t\t\tdata += `<p class=\"df-edited\">${'DF_CHAT_EDIT.EditedFlag'.localize()}</p>`;\n\t\t}\n\n\t\tlet speaker = undefined;\n\t\tlet user = undefined;\n\t\tif (formData.speaker.startsWith('user-')) {\n\t\t\tuser = game.users.get(formData.speaker.substring('user-'.length)).id;\n\t\t\t// @ts-expect-error\n\t\t\tspeaker = ChatMessage._getSpeakerFromUser({ user });\n\t\t} else\n\t\t\tspeaker = ChatMessage.getSpeaker({ token: game.scenes.viewed.tokens.get(formData.speaker.substring('token-'.length)) });\n\t\tif (speaker.alias === undefined)\n\t\t\tspeaker.alias = null;\n\t\tthis.chatMessage.update({ content: data, speaker, user });\n\t}\n\t/** @override */\n\tclose(options?: FormApplication.CloseOptions) {\n\t\tdelete (<any>this.chatMessage).chatEditor;\n\t\treturn super.close(options);\n\t}\n\n\tpublic static processMarkdown(message: string) {\n\t\tconst originalMessage = message;\n\t\tmessage = marked.parse(message, {\n\t\t\theaderIds: false,\n\t\t\tbreaks: true\n\t\t}).trimEnd();\n\t\tif (message.startsWith('<p>'))\n\t\t\tmessage = message.substr(3);\n\t\tif (message.endsWith('</p>'))\n\t\t\tmessage = message.substr(0, message.length - 4);\n\t\tconst newLine = /(<\\/?[ a-z]+>)\\n(<\\/?[ a-z]+>?)/;\n\t\twhile (newLine.test(message))\n\t\t\tmessage = message.replace(newLine, '$1$2');\n\t\treturn [originalMessage, message];\n\t}\n}","import libWrapperShared from \"../../../common/libWrapperShared\";\nimport SETTINGS from \"../../../common/Settings\";\nimport DFAdventureLogConfig from \"./DFAdventureLogConfig\";\nimport DFAdventureLogProcessor from \"./DFAdventureLogProcessor\";\n\ninterface AdventurLogApi {\n\tevent(message: string, postToChat?: boolean): Promise<void>\n\tpevent(message: string, postToChat?: boolean): Promise<void>\n\tgmevent(message: string, postToChat?: boolean): Promise<void>\n\tquote(speaker: string, message: string, postToChat?: boolean): Promise<void>\n\tpquote(speaker: string, message: string, postToChat?: boolean): Promise<void>\n\tgmquote(speaker: string, message: string, postToChat?: boolean): Promise<void>\n}\ndeclare global {\n\tconst AdventureLog: AdventurLogApi;\n}\n\nexport function init() {\n\tconst api: AdventurLogApi = {\n\t\tevent: (async function (message: string, postToChat = false) {\n\t\t\tDFAdventureLogProcessor.commandProcessor('event ' + message, false, false, !postToChat);\n\t\t}).bind(DFAdventureLogProcessor),\n\n\t\tpevent: (async function (message: string, postToChat = false) {\n\t\t\tDFAdventureLogProcessor.commandProcessor('event ' + message, false, true, !postToChat);\n\t\t}).bind(DFAdventureLogProcessor),\n\n\t\tgmevent: (async function (message: string, postToChat = false) {\n\t\t\tif (game.user.isGM)\n\t\t\t\tDFAdventureLogProcessor.commandProcessor('event ' + message, true, false, !postToChat);\n\t\t\telse ui.notifications.warn(\"DF_CHAT_LOG.Error.ApiLog_NotGm\".localize());\n\t\t}).bind(DFAdventureLogProcessor),\n\n\t\tquote: (async function (speaker: string, message: string, postToChat = false) {\n\t\t\tDFAdventureLogProcessor.commandProcessor(`quote \"${speaker}\" ${message}`, false, false, !postToChat);\n\t\t}).bind(DFAdventureLogProcessor),\n\n\t\tpquote: (async function (speaker: string, message: string, postToChat = false) {\n\t\t\tDFAdventureLogProcessor.commandProcessor(`quote \"${speaker}\" ${message}`, false, true, !postToChat);\n\t\t}).bind(DFAdventureLogProcessor),\n\n\t\tgmquote: (async function (speaker: string, message: string, postToChat = false) {\n\t\t\tif (game.user.isGM)\n\t\t\t\tDFAdventureLogProcessor.commandProcessor(`quote \"${speaker}\" ${message}`, true, false, !postToChat);\n\t\t\telse ui.notifications.warn(\"DF_CHAT_LOG.Error.ApiLog_NotGm\".localize());\n\t\t}).bind(DFAdventureLogProcessor)\n\t};\n\t// @ts-expect-error\n\twindow.AdventureLog = api;\n}\nexport function ready() {\n\tif (!game.modules.get('lib-wrapper')?.active) return;\n\tDFAdventureLogConfig.setupSettings();\n\tDFAdventureLogProcessor.setupSettings();\n\n\tHooks.on('renderUserConfig', (_app: UserConfig, html: JQuery<HTMLElement>, data: UserConfig.Data<any>) => {\n\t\tconst journal = data.user.getFlag(SETTINGS.MOD_NAME, DFAdventureLogProcessor.PREF_PLAYER_LOG_JOURNAL);\n\t\tconst template = Handlebars.compile(`\n<div class=\"form-group\">\n\t<label for=\"dfce-player-log\">Player Log Journal</label>\n\t<select id=\"dfce-player-log\" name=\"player-log\">\n\t\t{{#each journals}}\n\t\t<option value=\"{{id}}\" {{#if (eq ../selected id)}}selected{{/if}}>{{name}}</option>\n\t\t{{/each}}\n\t</select>\n</div>\n`);\n\t\tconst journals = ui.journal.documents.filter(x => x.testUserPermission(data.user, CONST.DOCUMENT_PERMISSION_LEVELS.OBSERVER));\n\t\tconst journalSelection = $(template({\n\t\t\tselected: journal ?? '',\n\t\t\tjournals: [{ id: '', name: '---' }].concat(journals as { id: string, name: string }[])\n\t\t}, {\n\t\t\tallowProtoMethodsByDefault: true,\n\t\t\tallowProtoPropertiesByDefault: true\n\t\t}));\n\t\thtml.find('input[name=\"color\"]').parent().after(journalSelection);\n\t});\n\n\tlibWrapperShared.register('UserConfig.prototype._updateObject',\n\t\tasync function (this: UserConfig, wrapped: (...args: any) => any, event: any, formData: { \"player-log\": string }) {\n\t\t\tawait this.object.setFlag(SETTINGS.MOD_NAME, DFAdventureLogProcessor.PREF_PLAYER_LOG_JOURNAL, formData[\"player-log\"]);\n\t\t\treturn await wrapped(event, formData);\n\t\t});\n}","import SETTINGS from \"./Settings\";\n\ntype Wrapper = (...args: any) => unknown;\ntype Handler = (wrapped: Wrapper, ...args: any) => unknown;\n\nclass Registration {\n\tnextId = 0;\n\twrappers = new Map<number, Handler>();\n\n\thandler(context: any, wrapped: Wrapper, ...args: any): Promise<unknown> | unknown {\n\t\tlet current = wrapped;\n\t\tfor (const wrapper of this.wrappers.values()) {\n\t\t\tconst next = current;\n\t\t\tcurrent = (...args: any) => wrapper.call(context, next, ...args);\n\t\t}\n\t\treturn current.call(context, ...args);\n\t}\n}\n\nexport default class libWrapperShared {\n\tprivate static registrations = new Map<string, Registration>();\n\n\tstatic register(target: string, handler: Handler) {\n\t\tlet registration = this.registrations.get(target);\n\t\tif (!registration) {\n\t\t\tregistration = new Registration();\n\t\t\tlibWrapper.register(SETTINGS.MOD_NAME, target,\n\t\t\t\tfunction (this: any, wrapped: Wrapper, ...args: any) { return registration.handler(this, wrapped, ...args); }, 'WRAPPER');\n\t\t\tthis.registrations.set(target, registration);\n\t\t}\n\t\tconst id = registration.nextId++;\n\t\tregistration.wrappers.set(id, handler);\n\t\treturn id;\n\t}\n\n\tstatic unregister(target: string, id: number): boolean {\n\t\tconst registration = this.registrations.get(target);\n\t\tif (!registration) return false;\n\t\tregistration.wrappers.delete(id);\n\t\tif (registration.wrappers.size === 0) {\n\t\t\tlibWrapper.unregister(SETTINGS.MOD_NAME, target, false);\n\t\t\tthis.registrations.delete(target);\n\t\t}\n\t\treturn true;\n\t}\n}","import SETTINGS from \"../../../common/Settings\";\nimport DFAdventureLogProcessor from \"./DFAdventureLogProcessor\";\n\n\nexport default class DFAdventureLogConfig extends FormApplication {\n\tstatic readonly PREF_JOURNAL = 'log-journal';\n\tstatic readonly PREF_JOURNAL_GM = 'gmlog-journal';\n\tstatic readonly PREF_CONFIG = 'log-config-menu';\n\n\tstatic get defaultOptions() {\n\t\treturn mergeObject(FormApplication.defaultOptions as Partial<FormApplicationOptions>, {\n\t\t\ttemplate: \"modules/df-chat-enhance/templates/log-config.hbs\",\n\t\t\tresizable: false,\n\t\t\tminimizable: false,\n\t\t\ttitle: \"DF_CHAT_LOG.Config_Title\".localize()\n\t\t}) as FormApplicationOptions;\n\t}\n\n\tstatic setupSettings() {\n\t\tSETTINGS.register(DFAdventureLogConfig.PREF_JOURNAL, {\n\t\t\tscope: 'world',\n\t\t\ttype: String,\n\t\t\tdefault: '',\n\t\t\tconfig: false\n\t\t});\n\t\tSETTINGS.register(DFAdventureLogConfig.PREF_JOURNAL_GM, {\n\t\t\tscope: 'world',\n\t\t\ttype: String,\n\t\t\tdefault: '',\n\t\t\tconfig: false\n\t\t});\n\t\tSETTINGS.registerMenu(DFAdventureLogConfig.PREF_CONFIG, {\n\t\t\trestricted: true,\n\t\t\ttype: <any>DFAdventureLogConfig,\n\t\t\tlabel: \"DF_CHAT_LOG.Config_Title\",\n\t\t\ticon: 'fas fa-edit'\n\t\t});\n\t}\n\n\tgetData(options?: any) {\n\t\tconst data = super.getData(options);\n\t\tconst keys = game.journal.keys();\n\t\tconst selectedLog = SETTINGS.get(DFAdventureLogConfig.PREF_JOURNAL) as string;\n\t\tconst selectedGMLog = SETTINGS.get(DFAdventureLogConfig.PREF_JOURNAL_GM) as string;\n\t\tlet logJournals = [];\n\t\tlet gmlogJournals = [];\n\t\tfor (const key of keys) {\n\t\t\tlogJournals.push({\n\t\t\t\tid: key,\n\t\t\t\tname: game.journal.get(key).data.name,\n\t\t\t\tselected: key === selectedLog\n\t\t\t});\n\t\t\tgmlogJournals.push({\n\t\t\t\tid: key,\n\t\t\t\tname: game.journal.get(key).data.name,\n\t\t\t\tselected: key === selectedGMLog\n\t\t\t});\n\t\t}\n\t\tlogJournals = logJournals.sort((a, b) => a.name.localeCompare(b.name));\n\t\tgmlogJournals = gmlogJournals.sort((a, b) => a.name.localeCompare(b.name));\n\n\t\tmergeObject(data as any, {\n\t\t\tlogJournals: logJournals,\n\t\t\tgmlogJournals: gmlogJournals,\n\t\t});\n\t\treturn data;\n\t}\n\n\tasync _updateObject(_event?: any, formData?: any) {\n\t\tconst logJournal = formData['dfal-journal'];\n\t\tconst gmlogJournal = formData['dfal-journal-gm'];\n\t\tconst clear = formData['dfal-clear'];\n\t\tconst gmClear = formData['dfal-clear-gm'];\n\t\tSETTINGS.set(DFAdventureLogConfig.PREF_JOURNAL, logJournal);\n\t\tSETTINGS.set(DFAdventureLogConfig.PREF_JOURNAL_GM, gmlogJournal);\n\t\tawait DFAdventureLogConfig.initializeJournal(logJournal, clear, false, false);\n\t\tawait DFAdventureLogConfig.initializeJournal(gmlogJournal, gmClear, true, false);\n\t}\n\n\tstatic async initializeJournal(id: string, clear: boolean, isGMOnly: boolean, isPlayerLog: boolean) {\n\t\tif (!game.journal.has(id)) return;\n\t\tconst journal = game.journal.get(id);\n\t\tif (clear || journal.data.content === null)\n\t\t\tjournal.data.content = '';\n\t\tconst html = $(journal.data.content);\n\t\tconst article = html.find('article[class=\"df-adventure-log\"]');\n\t\tif (article.length != 0) {\n\t\t\tawait DFAdventureLogProcessor.resortLog();\n\t\t\treturn;\n\t\t}\n\t\tawait journal.update({\n\t\t\tcontent: journal.data.content + `\n\t\t\t<section>\n\t\t\t\t<h2>${game.i18n.localize(isGMOnly ? 'DF_CHAT_LOG.GMLog_Header' : isPlayerLog ? 'DF_CHAT_LOG.PLog_Header' : 'DF_CHAT_LOG.Log_Header')}</h2>\n\t\t\t\t<section class=\"df-adventure-log\"></section>\n\t\t\t\t<hr />\n\t\t\t</section>\n\t\t\t`\n\t\t});\n\t}\n}","\nimport { ChatMessageDataConstructorData } from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs/chatMessageData\";\nimport SETTINGS from \"../../../common/Settings\";\nimport DFChatEditor from \"../edit/DFChatEditor\";\nimport DFAdventureLogConfig from './DFAdventureLogConfig';\n\ndeclare global {\n\tnamespace SimpleCalendar.api {\n\t\tfunction formatDateTime(time: {\n\t\t\tyear: number,\n\t\t\tmonth: number,\n\t\t\tday: number,\n\t\t\thour: number,\n\t\t\tminute: number,\n\t\t\tsecond: number\n\t\t}): { date: string, time: string }\n\t\tfunction formatDateTime(time: {\n\t\t\tyear: number,\n\t\t\tmonth: number,\n\t\t\tday: number,\n\t\t\thour: number,\n\t\t\tminute: number,\n\t\t\tsecond: number\n\t\t}, format: string): string\n\t\tfunction timestamp(): number\n\t\tfunction timestampToDate(timestamp: number): {\n\t\t\tyear: number,\n\t\t\tmonth: number,\n\t\t\tday: number,\n\t\t\thour: number,\n\t\t\tminute: number,\n\t\t\tsecond: number\n\t\t}\n\t}\n}\n\ndeclare global {\n\tinterface String {\n\t\ttrimStart(): string\n\t}\n}\nif (!String.prototype.trimStart) {\n\tString.prototype.trimStart = function () {\n\t\tconst whitespace = [' ', '\\n', '\\r'];\n\t\tlet index = -1;\n\t\tfor (let c = 0; c < this.length; c++) {\n\t\t\tif (whitespace.every(x => x !== this[c])) break;\n\t\t\tindex = c;\n\t\t}\n\t\treturn this.substr(index + 1);\n\t};\n}\n\ndeclare interface ChatCommand {\n\tcommandKey: string;\n\tshouldDisplayToChat: boolean;\n\tinvokeOnCommand: () => void;\n\tcreatedMessageType: number;\n\ticonClass: string;\n\tdescription: string;\n\tgmOnly: boolean;\n}\n\ndeclare class ChatCommands {\n\t/**\n\t * Registers a Chat Command to be handled\n\t */\n\tregisterCommand(command: ChatCommand): void;\n\t/**\n\t * Deregister a Chat Command\n\t */\n\tderegisterCommand(command: ChatCommand): void;\n\tcreateCommandFromData(data: any): ChatCommand;\n}\n\ndeclare class GameExt extends Game {\n\tchatCommands: ChatCommands;\n}\n\nexport default class DFAdventureLogProcessor {\n\tstatic readonly PREF_ENABLE = 'enable-command';\n\tstatic readonly PREF_GMONLY = 'df-log-gmonly';\n\tstatic readonly PREF_GMONLY_WHISPER = 'df-log-gmonly-whisper';\n\tstatic readonly PREF_MESSAGES = 'df-log-messages';\n\tstatic readonly PREF_SORTDESC = 'df-log-sortdesc';\n\tstatic readonly PREF_DISABLE_FORMATTING = 'df-log-disable-format';\n\tstatic readonly PREF_DISABLE_AUTHOR = 'df-log-disable-author';\n\tstatic readonly PREF_SIMPLE_CALENDAR = 'df-log-use-simple-calendar';\n\tstatic readonly PREF_USE_TIME = 'df-log-use-time';\n\tstatic readonly PREF_PLAYER_LOG_JOURNAL = 'PlayerAdventureLog';\n\tstatic logCommand: ChatCommand = null;\n\tstatic gmlogCommand: ChatCommand = null;\n\tstatic plogCommand: ChatCommand = null;\n\n\tstatic appendChatContextMenuOptions(options: ContextMenu.Item[]) {\n\t\toptions.push({\n\t\t\tname: 'DF_CHAT_LOG.ContextMenu_AsEvent',\n\t\t\ticon: '<i style=\"color:SeaGreen\" class=\"fas fa-edit\"></i>',\n\t\t\tcondition: () => {\n\t\t\t\tconst enabled = SETTINGS.get(DFAdventureLogProcessor.PREF_ENABLE);\n\t\t\t\tconst isGM = game.user.isGM;\n\t\t\t\tconst gmOnly = SETTINGS.get(DFAdventureLogProcessor.PREF_GMONLY);\n\t\t\t\treturn enabled && (!gmOnly || isGM);\n\t\t\t},\n\t\t\tcallback: (header) => {\n\t\t\t\tconst chatData = ui.chat.collection.get($(header).attr('data-message-id')).data;\n\t\t\t\tDFAdventureLogProcessor.commandProcessor(chatData.content, false, false);\n\t\t\t\treturn {};\n\t\t\t}\n\t\t});\n\t\toptions.push({\n\t\t\tname: 'DF_CHAT_LOG.ContextMenu_AsQuote',\n\t\t\ticon: '<i style=\"color:SeaGreen\" class=\"fas fa-quote-right\"></i>',\n\t\t\tcondition: () => {\n\t\t\t\tconst enabled = SETTINGS.get(DFAdventureLogProcessor.PREF_ENABLE);\n\t\t\t\tconst isGM = game.user.isGM;\n\t\t\t\tconst gmOnly = SETTINGS.get(DFAdventureLogProcessor.PREF_GMONLY);\n\t\t\t\treturn enabled && (!gmOnly || isGM);\n\t\t\t},\n\t\t\tcallback: (header) => {\n\t\t\t\tconst chatData = ui.chat.collection.get($(header).attr('data-message-id')).data;\n\t\t\t\tif (chatData.content.trimStart().startsWith('\"'))\n\t\t\t\t\tDFAdventureLogProcessor.commandProcessor('q ' + chatData.content, false, false);\n\t\t\t\telse\n\t\t\t\t\tDFAdventureLogProcessor.commandProcessor(`q \"${game.users.get(chatData.user).name}\" ${chatData.content}`, false, false);\n\t\t\t\treturn {};\n\t\t\t}\n\t\t});\n\t\toptions.push({\n\t\t\tname: 'DF_CHAT_LOG.ContextMenu_AsGmEvent',\n\t\t\ticon: '<i style=\"color:FireBrick\" class=\"fas fa-edit\"></i>',\n\t\t\tcondition: () => {\n\t\t\t\tconst enabled = SETTINGS.get(DFAdventureLogProcessor.PREF_ENABLE);\n\t\t\t\tconst isGM = game.user.isGM;\n\t\t\t\treturn enabled && isGM;\n\t\t\t},\n\t\t\tcallback: (header) => {\n\t\t\t\tconst chatData = ui.chat.collection.get($(header).attr('data-message-id')).data;\n\t\t\t\tDFAdventureLogProcessor.commandProcessor(chatData.content, true, false);\n\t\t\t\treturn {};\n\t\t\t}\n\t\t});\n\t\toptions.push({\n\t\t\tname: 'DF_CHAT_LOG.ContextMenu_AsGmQuote',\n\t\t\ticon: '<i style=\"color:FireBrick\" class=\"fas fa-quote-right\"></i>',\n\t\t\tcondition: () => {\n\t\t\t\tconst enabled = SETTINGS.get(DFAdventureLogProcessor.PREF_ENABLE);\n\t\t\t\tconst isGM = game.user.isGM;\n\t\t\t\treturn enabled && isGM;\n\t\t\t},\n\t\t\tcallback: (header) => {\n\t\t\t\tconst chatData = ui.chat.collection.get($(header).attr('data-message-id')).data;\n\t\t\t\tif (chatData.content.trimStart().startsWith('\"'))\n\t\t\t\t\tDFAdventureLogProcessor.commandProcessor('q ' + chatData.content, true, false);\n\t\t\t\telse\n\t\t\t\t\tDFAdventureLogProcessor.commandProcessor(`q \"${game.users.get(chatData.user).name}\" ${chatData.content}`, true, false);\n\t\t\t\treturn {};\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic setupSettings() {\n\t\tSETTINGS.register(DFAdventureLogProcessor.PREF_ENABLE, {\n\t\t\tscope: 'world',\n\t\t\tname: 'DF_CHAT_LOG.Setting.EnableTitle',\n\t\t\thint: 'DF_CHAT_LOG.Setting.EnableHint',\n\t\t\tconfig: true,\n\t\t\ttype: Boolean,\n\t\t\tdefault: true,\n\t\t\tonChange: (enabled: boolean) => {\n\t\t\t\tif (!enabled && !!DFAdventureLogProcessor.logCommand)\n\t\t\t\t\tDFAdventureLogProcessor.deregisterCommand();\n\t\t\t\telse\n\t\t\t\t\tDFAdventureLogProcessor.registerCommand();\n\t\t\t}\n\t\t});\n\t\tSETTINGS.register(DFAdventureLogProcessor.PREF_GMONLY, {\n\t\t\tname: 'DF_CHAT_LOG.Setting.GmOnlyTitle',\n\t\t\thint: 'DF_CHAT_LOG.Setting.GmOnlyHint',\n\t\t\tscope: 'world',\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t\tconfig: true,\n\t\t\tonChange: (gmOnly) => {\n\t\t\t\tif (gmOnly && !game.user.isGM)\n\t\t\t\t\tDFAdventureLogProcessor.deregisterCommand();\n\t\t\t\telse\n\t\t\t\t\tDFAdventureLogProcessor.registerCommand();\n\t\t\t}\n\t\t});\n\t\tSETTINGS.register(DFAdventureLogProcessor.PREF_GMONLY_WHISPER, {\n\t\t\tname: 'DF_CHAT_LOG.Setting.GmOnlyWhisperName',\n\t\t\thint: 'DF_CHAT_LOG.Setting.GmOnlyWhisperHint',\n\t\t\tscope: 'world',\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t\tconfig: true\n\t\t});\n\t\tSETTINGS.register(DFAdventureLogProcessor.PREF_USE_TIME, {\n\t\t\tscope: 'world',\n\t\t\ttype: Boolean,\n\t\t\tname: \"DF_CHAT_LOG.Setting.UseTimeName\",\n\t\t\thint: \"DF_CHAT_LOG.Setting.UseTimeHint\",\n\t\t\tdefault: true,\n\t\t\tconfig: true\n\t\t});\n\t\tSETTINGS.register(DFAdventureLogProcessor.PREF_MESSAGES, {\n\t\t\tname: 'DF_CHAT_LOG.Setting.PrintMessagesName',\n\t\t\thint: 'DF_CHAT_LOG.Setting.PrintMessagesHint',\n\t\t\tscope: 'world',\n\t\t\ttype: Boolean,\n\t\t\tdefault: true,\n\t\t\tconfig: true\n\t\t});\n\t\tSETTINGS.register(DFAdventureLogProcessor.PREF_SORTDESC, {\n\t\t\tname: 'DF_CHAT_LOG.Setting.SortDescendingName',\n\t\t\thint: 'DF_CHAT_LOG.Setting.SortDescendingHint',\n\t\t\tscope: 'world',\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t\tconfig: true,\n\t\t\tonChange: () => this.resortLog()\n\t\t});\n\t\tSETTINGS.register(DFAdventureLogProcessor.PREF_DISABLE_FORMATTING, {\n\t\t\tname: 'DF_CHAT_LOG.Setting.DisableFormatName'.localize(),\n\t\t\thint: 'DF_CHAT_LOG.Setting.DisableFormatHint'.localize(),\n\t\t\tconfig: true,\n\t\t\tscope: 'world',\n\t\t\ttype: Boolean,\n\t\t\tdefault: false\n\t\t});\n\t\tSETTINGS.register(DFAdventureLogProcessor.PREF_DISABLE_AUTHOR, {\n\t\t\tname: 'DF_CHAT_LOG.Setting.DisableEntryAuthorName'.localize(),\n\t\t\thint: 'DF_CHAT_LOG.Setting.DisableEntryAuthorHint'.localize(),\n\t\t\tconfig: true,\n\t\t\tscope: 'world',\n\t\t\ttype: Boolean,\n\t\t\tdefault: false\n\t\t});\n\t\t// If Simple Calendar is enabled\n\t\tif (game.modules.get('foundryvtt-simple-calendar')?.active) {\n\t\t\tSETTINGS.register(DFAdventureLogProcessor.PREF_SIMPLE_CALENDAR, {\n\t\t\t\tscope: 'world',\n\t\t\t\ttype: Boolean,\n\t\t\t\tname: \"DF_CHAT_LOG.Setting.SimpleCalendarName\",\n\t\t\t\thint: \"DF_CHAT_LOG.Setting.SimpleCalendarHint\",\n\t\t\t\tdefault: false,\n\t\t\t\tconfig: true\n\t\t\t});\n\t\t}\n\n\t\tHooks.on('closeDFAdventureLogConfig', () => { DFAdventureLogProcessor.logConfig = null; });\n\t\tif ((game as GameExt).chatCommands)\n\t\t\tDFAdventureLogProcessor.registerCommand();\n\t\telse\n\t\t\tHooks.on('chatCommandsReady', function () { DFAdventureLogProcessor.registerCommand(); });\n\t}\n\n\tstatic deregisterCommand() {\n\t\t(game as GameExt).chatCommands.deregisterCommand(DFAdventureLogProcessor.logCommand);\n\t\t(game as GameExt).chatCommands.deregisterCommand(DFAdventureLogProcessor.plogCommand);\n\t\tif (DFAdventureLogProcessor.gmlogCommand)\n\t\t\t(game as GameExt).chatCommands.deregisterCommand(DFAdventureLogProcessor.gmlogCommand);\n\t\tDFAdventureLogProcessor.logCommand = null;\n\t\tDFAdventureLogProcessor.plogCommand = null;\n\t\tDFAdventureLogProcessor.gmlogCommand = null;\n\t}\n\tstatic registerCommand() {\n\t\tif (!SETTINGS.get(DFAdventureLogProcessor.PREF_ENABLE))\n\t\t\treturn;\n\t\tif (SETTINGS.get(DFAdventureLogProcessor.PREF_GMONLY) && !game.user.isGM)\n\t\t\treturn;\n\t\tif (DFAdventureLogProcessor.logCommand)\n\t\t\treturn;\n\n\t\tDFAdventureLogProcessor.logCommand = (game as GameExt).chatCommands.createCommandFromData({\n\t\t\tcommandKey: \"/log\",\n\t\t\tinvokeOnCommand: async (_cl: any, msg: string, _cd: any) => await DFAdventureLogProcessor.commandProcessor(msg, false, false),\n\t\t\tshouldDisplayToChat: false,\n\t\t\ticonClass: \"fa-edit\",\n\t\t\tdescription: \"DF_CHAT_LOG.CommandDescription\".localize()\n\t\t});\n\t\t(game as GameExt).chatCommands.registerCommand(DFAdventureLogProcessor.logCommand);\n\n\t\tDFAdventureLogProcessor.plogCommand = (game as GameExt).chatCommands.createCommandFromData({\n\t\t\tcommandKey: \"/plog\",\n\t\t\tinvokeOnCommand: async (_cl: any, msg: string, _cd: any) => await DFAdventureLogProcessor.commandProcessor(msg, false, true),\n\t\t\tshouldDisplayToChat: false,\n\t\t\ticonClass: \"fa-edit\",\n\t\t\tdescription: \"DF_CHAT_LOG.PCCommandDescription\".localize()\n\t\t});\n\t\t(game as GameExt).chatCommands.registerCommand(DFAdventureLogProcessor.plogCommand);\n\n\t\t// If we are not the GM, early return to avoid registering the /gmlog command\n\t\tif (!game.user.isGM) return;\n\t\t// Register the /gmlog command\n\t\tDFAdventureLogProcessor.gmlogCommand = (game as GameExt).chatCommands.createCommandFromData({\n\t\t\tcommandKey: \"/gmlog\",\n\t\t\tinvokeOnCommand: async (_cl: any, msg: string, _cd: any) => await DFAdventureLogProcessor.commandProcessor(msg, true, false),\n\t\t\tshouldDisplayToChat: false,\n\t\t\ticonClass: \"fa-edit\",\n\t\t\tdescription: \"DF_CHAT_LOG.GMCommandDescription\".localize()\n\t\t});\n\t\t(game as GameExt).chatCommands.registerCommand(DFAdventureLogProcessor.gmlogCommand);\n\t}\n\n\tprivate static _getTimestamp() {\n\t\tconst useTime = SETTINGS.get(DFAdventureLogProcessor.PREF_USE_TIME);\n\t\tif (game.modules.get('foundryvtt-simple-calendar')?.active && SETTINGS.get(DFAdventureLogProcessor.PREF_SIMPLE_CALENDAR)) {\n\t\t\tconst stamp = SimpleCalendar.api.formatDateTime(SimpleCalendar.api.timestampToDate(SimpleCalendar.api.timestamp()));\n\t\t\treturn useTime ? `${stamp.date} ${stamp.time}` : stamp.date;\n\t\t}\n\t\telse if (useTime)\n\t\t\treturn new Date().toLocaleString('sv').replace(',', '').replace(/ ([AP])/, '$1');\n\t\telse {\n\t\t\treturn new Date().toLocaleString('sv').replace(',', '').replace(/ ([AP])/, '$1').split(' ')[0];\n\t\t}\n\t}\n\n\tprivate static logConfig: DFAdventureLogConfig = null;\n\tstatic async commandProcessor(messageText: string, gmLog: boolean, isPlayerLog: boolean, preventPostToChat = false): Promise<void> {\n\t\tmessageText = messageText.trim();\n\t\tconst tokens = messageText.split(' ');\n\n\t\tif (!SETTINGS.get(DFAdventureLogProcessor.PREF_ENABLE)) {\n\t\t\t(game as GameExt).chatCommands.deregisterCommand(DFAdventureLogProcessor.logCommand);\n\t\t\tui.notifications.warn('DF_CHAT_LOG.Error.Disabled'.localize());\n\t\t\treturn;\n\t\t}\n\n\t\t// If the user did not enter anything, send them a help message\n\t\tif (messageText.length == 0 || tokens.every(x => x.length == 0)) {\n\t\t\tsetTimeout(async () => {\n\t\t\t\tawait Dialog.prompt({\n\t\t\t\t\ttitle: 'DF_CHAT_LOG.HelpDialog_Title'.localize(),\n\t\t\t\t\tlabel: 'OK',\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t\t\t\t\tcallback: () => { },\n\t\t\t\t\tcontent: await renderTemplate(`modules/df-chat-enhance/templates/lang/log-help.${'DF_CHAT_ENHANCE.LANG'.localize()}.hbs`, {\n\t\t\t\t\t\tisGM: game.user.isGM\n\t\t\t\t\t}),\n\t\t\t\t\toptions: { width: 800 }\n\t\t\t\t});\n\t\t\t}, 1);\n\t\t\treturn;\n\t\t}\n\n\t\tconst speaker = ChatMessage.getSpeaker(<any>{ user: game.user });\n\t\tconst messageData: DeepPartial<ChatMessageDataConstructorData> = {\n\t\t\tflavor: '',\n\t\t\tuser: game.user.id,\n\t\t\tspeaker: speaker,\n\t\t\ttype: CONST.CHAT_MESSAGE_TYPES.OOC,\n\t\t\tcontent: '',\n\t\t};\n\t\tlet line: string;\n\t\tconst disableFormatting = SETTINGS.get(DFAdventureLogProcessor.PREF_DISABLE_FORMATTING);\n\t\tconst disableAuthor = isPlayerLog || SETTINGS.get(DFAdventureLogProcessor.PREF_DISABLE_AUTHOR);\n\t\tswitch (tokens[0].toLowerCase()) {\n\t\t\tcase 'config':\n\t\t\t\tif (!game.user.isGM) {\n\t\t\t\t\tui.notifications.warn('DF_CHAT_LOG.Error.ConfigGmOnly'.localize());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\tif (DFAdventureLogProcessor.logConfig)\n\t\t\t\t\t\tDFAdventureLogProcessor.logConfig.bringToTop();\n\t\t\t\t\telse {\n\t\t\t\t\t\tDFAdventureLogProcessor.logConfig = new DFAdventureLogConfig({});\n\t\t\t\t\t\tDFAdventureLogProcessor.logConfig.render(true);\n\t\t\t\t\t}\n\t\t\t\t}, 1);\n\t\t\t\treturn;\n\t\t\tcase 'q':\n\t\t\tcase 'quote':\n\t\t\t\tmessageText = messageText.replace(tokens[0], '').trimStart();\n\t\t\t\tlet source: string;\n\t\t\t\t// If the token starts with a quote, but does not end with one\n\t\t\t\tif (tokens[1][0] === '\"' && tokens[1][tokens[1].length - 1] !== '\"') {\n\t\t\t\t\t// Extract the quoted Source\n\t\t\t\t\tlet index = -1;\n\t\t\t\t\tfor (let c = 1; c < messageText.length; c++) {\n\t\t\t\t\t\tif (messageText[c] === '\"') {\n\t\t\t\t\t\t\tindex = c;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (index < 0) {\n\t\t\t\t\t\tui.notifications.error('DF_CHAT_LOG.Error.MissingQuote'.localize().replace('{0}', tokens[1]));\n\t\t\t\t\t\tsetTimeout(() => $('#chat-message').val('/log q ' + messageText), 1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tsource = messageText.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tsource = tokens[1];\n\t\t\t\tmessageText = DFChatEditor.processMarkdown(messageText)[1].replace(source, '').trim();\n\t\t\t\t// Remove any double-quotes surrounding the source token\n\t\t\t\tsource = source.replace(/\"/gm, '');\n\t\t\t\tmessageData.flavor = `${game.user.name} quoted ${source}`;\n\t\t\t\tmessageData.content = `<span class=\"dfal-qu\">${messageText}</span>`;\n\t\t\t\tif (messageText.length == 0) {\n\t\t\t\t\tui.notifications.error('DF_CHAT_LOG.Error.MissingMessage'.localize());\n\t\t\t\t\tsetTimeout(() => $('#chat-message').val(`/log q \"${source}\" ${messageText}`), 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tline = 'DF_CHAT_LOG.Log_Quote';\n\t\t\t\tif (disableFormatting) line += '_Bland';\n\t\t\t\tif (disableAuthor) line += '_NoAuth';\n\t\t\t\tline = line.localize();\n\t\t\t\tline = line.replace('{0}', this._getTimestamp());\n\t\t\t\tline = line.replace('{1}', game.user.name);\n\t\t\t\tline = line.replace('{2}', source);\n\t\t\t\tmessageText = line.replace('{3}', messageText);\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\tcase 'event':\n\t\t\t\tmessageText = messageText.replace(tokens[0], '').trim();\n\t\t\t// fallthrough\n\t\t\tdefault:\n\t\t\t\tmessageText = DFChatEditor.processMarkdown(messageText)[1].trim();\n\t\t\t\tmessageData.flavor = 'Event Logged';\n\t\t\t\tmessageData.content = `<span class=\"dfal-ev\">${messageText}</span>`;\n\t\t\t\tline = 'DF_CHAT_LOG.Log_Event';\n\t\t\t\tif (disableFormatting) line += '_Bland';\n\t\t\t\tif (disableAuthor) line += '_NoAuth';\n\t\t\t\tline = line.localize();\n\t\t\t\tline = line.replace('{0}', this._getTimestamp());\n\t\t\t\tline = line.replace('{1}', game.user.name);\n\t\t\t\tmessageText = line.replace('{2}', messageText);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// fetch the log to submit to\n\t\tconst journalId = isPlayerLog ? game.user.getFlag(SETTINGS.MOD_NAME, this.PREF_PLAYER_LOG_JOURNAL) as string :\n\t\t\tSETTINGS.get<string>(gmLog ? DFAdventureLogConfig.PREF_JOURNAL_GM : DFAdventureLogConfig.PREF_JOURNAL);\n\t\tif (!game.journal.has(journalId)) {\n\t\t\tif (isPlayerLog)\n\t\t\t\tui.notifications.error('DF_CHAT_LOG.Error.NoPlayerJournalSet'.localize());\n\t\t\telse if (game.user.isGM)\n\t\t\t\tui.notifications.error('DF_CHAT_LOG.Error.NoJournalSetGM'.localize(), { permanent: true });\n\t\t\telse\n\t\t\t\tui.notifications.warn('DF_CHAT_LOG.Error.NoJournalSet'.localize());\n\t\t\treturn;\n\t\t}\n\t\tconst journal = game.journal.get(journalId);\n\t\tlet html = $(journal.data.content);\n\t\tconst messageHtml = $(messageText);\n\t\tlet section = html.find('section.df-adventure-log');\n\t\tif (section.length == 0) {\n\t\t\tawait DFAdventureLogConfig.initializeJournal(journalId, false, gmLog, isPlayerLog);\n\t\t\thtml = $(journal.data.content);\n\t\t\tsection = html.find('section.df-adventure-log');\n\t\t}\n\t\tconst descending = SETTINGS.get(this.PREF_SORTDESC) as boolean;\n\t\tif (descending) section.prepend(messageHtml); else section.append(messageHtml);\n\t\tawait journal.update({ content: $('<div></div>').append(html).html() });\n\t\tconst rollType = game.settings.get(\"core\", \"rollMode\");\n\t\tif (game.user.isGM) {\n\t\t\tif (\n\t\t\t\t// If the roll type is anything but Public\n\t\t\t\trollType !== 'publicroll'\n\t\t\t\t// If logs are GM Only and the Whisper All settings is true\n\t\t\t\t|| (SETTINGS.get(DFAdventureLogProcessor.PREF_GMONLY) &&\n\t\t\t\t\tSETTINGS.get(DFAdventureLogProcessor.PREF_GMONLY_WHISPER))\n\t\t\t) {\n\t\t\t\t// Make the message a whisper\n\t\t\t\tmessageData.whisper = [game.user.id];\n\t\t\t}\n\t\t}\n\t\t// All GM and Player logs are whispered\n\t\tif (isPlayerLog || gmLog) {\n\t\t\tmessageData.whisper = [game.user.id];\n\t\t}\n\t\t// Post message to chat if Messages are enabled\n\t\tif (!preventPostToChat && SETTINGS.get(DFAdventureLogProcessor.PREF_MESSAGES))\n\t\t\tawait ChatMessage.create(messageData, {});\n\t}\n\n\tstatic async resortLog() {\n\t\tconst descending = SETTINGS.get(this.PREF_SORTDESC) as boolean;\n\t\tconst journalAll = SETTINGS.get(DFAdventureLogConfig.PREF_JOURNAL) as string;\n\t\tconst journalGM = SETTINGS.get(DFAdventureLogConfig.PREF_JOURNAL_GM) as string;\n\n\t\tconst journalSort = async (journal: JournalEntry) => {\n\t\t\tconst html = $(journal.data.content);\n\t\t\tconst article = html.find('article.df-adventure-log');\n\t\t\tconst result = (article.find('p') as any).sort(function (a: HTMLElement, b: HTMLElement) {\n\t\t\t\treturn descending ?\n\t\t\t\t\t$(b).find('span.dfal-ts').text().localeCompare($(a).find('span.dfal-ts').text()) :\n\t\t\t\t\t$(a).find('span.dfal-ts').text().localeCompare($(b).find('span.dfal-ts').text());\n\n\t\t\t});\n\t\t\tarticle.html(result);\n\t\t\tawait journal.update({ content: $('<div></div>').append(html).html() });\n\t\t};\n\n\t\tif (game.journal.has(journalAll))\n\t\t\tawait journalSort(game.journal.get(journalAll));\n\t\tif (game.journal.has(journalGM))\n\t\t\tawait journalSort(game.journal.get(journalGM));\n\t}\n}","import { ChatMessageData } from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs\";\nimport libWrapperShared from \"../../../common/libWrapperShared\";\nimport SETTINGS from \"../../../common/Settings\";\nimport DFChatArchiveManager from \"../archive/DFChatArchiveManager\";\n\n\nexport default class ChatMerge {\n\n\tprivate static readonly PREF_ENABLED = 'chat-merge-enabled';\n\tprivate static readonly PREF_SPLIT_SPEAKER = 'chat-merge-split-speaker';\n\tprivate static readonly PREF_EPOCH = 'chat-merge-epoch';\n\tprivate static readonly PREF_ALLOW_ROLLS = 'chat-merge-allowRolls';\n\tprivate static readonly PREF_SEPARATE = 'chat-merge-separateWithBorder';\n\tprivate static readonly PREF_HOVER = 'chat-merge-showhover';\n\tprivate static readonly PREF_SHOW_HEADER = 'chat-merge-showheader';\n\n\tprivate static get _enabled(): boolean { return SETTINGS.get(this.PREF_ENABLED); }\n\tprivate static get _epoch(): number { return SETTINGS.get(this.PREF_EPOCH); }\n\tprivate static get _allowRolls(): string { return SETTINGS.get(this.PREF_ALLOW_ROLLS); }\n\tprivate static get _separateWithBorder(): boolean { return SETTINGS.get(this.PREF_SEPARATE); }\n\tprivate static get _showHover(): boolean { return SETTINGS.get(this.PREF_HOVER); }\n\tprivate static get _showHeader(): boolean { return SETTINGS.get(this.PREF_SHOW_HEADER); }\n\n\tstatic init() {\n\t\tSETTINGS.register(this.PREF_ENABLED, {\n\t\t\tname: 'DF_CHAT_MERGE.EnableName',\n\t\t\thint: 'DF_CHAT_MERGE.EnableHint',\n\t\t\tconfig: true,\n\t\t\tscope: 'client',\n\t\t\tdefault: true,\n\t\t\ttype: Boolean,\n\t\t\tonChange: () => this._processAllMessage()\n\t\t});\n\t\tSETTINGS.register(this.PREF_SHOW_HEADER, {\n\t\t\tname: 'DF_CHAT_MERGE.ShowHeaderName',\n\t\t\thint: 'DF_CHAT_MERGE.ShowHeaderHint',\n\t\t\tconfig: true,\n\t\t\tscope: 'client',\n\t\t\tdefault: false,\n\t\t\ttype: Boolean,\n\t\t\tonChange: (newValue: boolean) => {\n\t\t\t\tconst style = (<HTMLElement>document.querySelector(':root')).style;\n\t\t\t\tstyle.setProperty('--dfce-cm-header', newValue ? '' : 'none');\n\t\t\t\tif (game.user.isGM) {\n\t\t\t\t\tstyle.setProperty('--dfce-cm-header-delete', newValue ? '' : '0');\n\t\t\t\t\tstyle.setProperty('--dfce-cm-header-delete-pad', newValue ? '' : '16px');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tSETTINGS.register(this.PREF_SPLIT_SPEAKER, {\n\t\t\tname: 'DF_CHAT_MERGE.SplitSpeakerName',\n\t\t\thint: 'DF_CHAT_MERGE.SplitSpeakerHint',\n\t\t\tconfig: true,\n\t\t\tscope: 'client',\n\t\t\tdefault: true,\n\t\t\ttype: Boolean,\n\t\t\tonChange: () => this._processAllMessage()\n\t\t});\n\t\tSETTINGS.register<string>(this.PREF_ALLOW_ROLLS, {\n\t\t\tname: 'DF_CHAT_MERGE.AllowRollsName',\n\t\t\thint: 'DF_CHAT_MERGE.AllowRollsHint',\n\t\t\tconfig: true,\n\t\t\tscope: 'client',\n\t\t\tdefault: 'rolls',\n\t\t\ttype: String,\n\t\t\tchoices: {\n\t\t\t\tnone: 'DF_CHAT_MERGE.AllowRollsOptions.none'.localize(),\n\t\t\t\trolls: 'DF_CHAT_MERGE.AllowRollsOptions.rolls'.localize(),\n\t\t\t\tall: 'DF_CHAT_MERGE.AllowRollsOptions.all'.localize()\n\t\t\t},\n\t\t\tonChange: () => this._processAllMessage()\n\t\t});\n\t\tSETTINGS.register(this.PREF_SEPARATE, {\n\t\t\tname: 'DF_CHAT_MERGE.SeparateName',\n\t\t\thint: 'DF_CHAT_MERGE.SeparateHint',\n\t\t\tconfig: true,\n\t\t\tscope: 'client',\n\t\t\tdefault: false,\n\t\t\ttype: Boolean,\n\t\t\tonChange: (newValue: boolean) => {\n\t\t\t\tconst style = (<HTMLElement>document.querySelector(':root')).style;\n\t\t\t\tstyle.setProperty('--dfce-cm-separation', newValue ? '' : '0');\n\t\t\t}\n\t\t});\n\t\tSETTINGS.register(this.PREF_HOVER, {\n\t\t\tname: 'DF_CHAT_MERGE.HoverName',\n\t\t\thint: 'DF_CHAT_MERGE.HoverHint',\n\t\t\tconfig: true,\n\t\t\tscope: 'client',\n\t\t\tdefault: true,\n\t\t\ttype: Boolean,\n\t\t\tonChange: (newValue: boolean) => {\n\t\t\t\tconst style = (<HTMLElement>document.querySelector(':root')).style;\n\t\t\t\tnewValue ? style.removeProperty('--dfce-cm-hover-shadow') : style.setProperty('--dfce-cm-hover-shadow', '0px');\n\t\t\t}\n\t\t});\n\t\tSETTINGS.register<number>(this.PREF_EPOCH, {\n\t\t\tname: 'DF_CHAT_MERGE.EpochName',\n\t\t\thint: 'DF_CHAT_MERGE.EpochHint',\n\t\t\tconfig: true,\n\t\t\tscope: 'client',\n\t\t\tdefault: 10,\n\t\t\ttype: Number,\n\t\t\trange: {\n\t\t\t\tmin: 1,\n\t\t\t\tmax: 60,\n\t\t\t\tstep: 1\n\t\t\t},\n\t\t\tonChange: () => this._processAllMessage()\n\t\t});\n\n\t\tlibWrapperShared.register('ChatLog.prototype.deleteMessage', this._deleteMessage.bind(this));\n\t\tHooks.on(\"renderChatMessage\", this._renderChatMessage);\n\t}\n\tstatic ready() {\n\t\tconst style = (<HTMLElement>document.querySelector(':root')).style;\n\t\tstyle.setProperty('--dfce-cm-separation', this._separateWithBorder ? '' : '0');\n\t\tthis._showHover ? style.removeProperty('--dfce-cm-hover-shadow') : style.setProperty('--dfce-cm-hover-shadow', '0px');\n\t\tstyle.setProperty('--dfce-cm-header', this._showHeader ? '' : 'none');\n\t\tif (game.user.isGM) {\n\t\t\tstyle.setProperty('--dfce-cm-header-delete', this._showHeader ? '' : '0');\n\t\t\tstyle.setProperty('--dfce-cm-header-delete-pad', this._showHeader ? '' : '16px');\n\t\t}\n\t\tthis._processAllMessage(ui.chat.element);\n\t\tHooks.on('renderChatLog', (_: any, html: JQuery<HTMLElement>) => this._processAllMessage(html));\n\t\tHooks.on('renderDFChatArchiveViewer', (_: any, html: JQuery<HTMLElement>) => this._processAllMessage(html));\n\t}\n\n\tprivate static _deleteMessage(wrapper: (arg0: any, arg1: any) => any, messageId: string, { deleteAll = false } = {}) {\n\t\t// Ignore the Delete All process. Everything is being obliterated, who cares about the styling\n\t\tif (!deleteAll && this._enabled) {\n\t\t\tconst element = document.querySelector(`li[data-message-id=\"${messageId}\"`);\n\t\t\t// If we were a TOP\n\t\t\tif (element?.classList?.contains('dfce-cm-top')) {\n\t\t\t\telement.classList.remove('dfce-cm-top');\n\t\t\t\t// If the next element was a middle, make it a top\n\t\t\t\tif (element.nextElementSibling.classList.contains('dfce-cm-middle')) {\n\t\t\t\t\telement.nextElementSibling.classList.remove('dfce-cm-middle');\n\t\t\t\t\telement.nextElementSibling.classList.add('dfce-cm-top');\n\t\t\t\t}\n\t\t\t\t// Otherwise, it was a bottom and should now become a normal message again\n\t\t\t\telse element.nextElementSibling.classList.remove('dfce-cm-bottom');\n\t\t\t}\n\t\t\t// If we were a BOTTOM\n\t\t\telse if (element?.classList?.contains('dfce-cm-bottom')) {\n\t\t\t\telement.classList.remove('dfce-cm-bottom');\n\t\t\t\t// If the previous element was a middle, make it a bottom\n\t\t\t\tif (element.previousElementSibling.classList.contains('dfce-cm-middle')) {\n\t\t\t\t\telement.previousElementSibling.classList.remove('dfce-cm-middle');\n\t\t\t\t\telement.previousElementSibling.classList.add('dfce-cm-bottom');\n\t\t\t\t}\n\t\t\t\t// Otherwise, it was a top and should now become a normal message again\n\t\t\t\telse element.previousElementSibling.classList.remove('dfce-cm-top');\n\t\t\t}\n\t\t\t// If we were a MIDDLE, let the above and below snug and they'll be fine\n\t\t\telse if (element?.classList?.contains('dfce-cm-middle'))\n\t\t\t\telement.classList.remove('dfce-cm-middle');\n\t\t}\n\t\treturn wrapper(messageId, { deleteAll });\n\t}\n\n\tprivate static _processAllMessage(element?: JQuery<HTMLElement>) {\n\t\telement = element ?? $(document.body);\n\t\t// Remove the old CSS class designations\n\t\telement.find('.dfce-cm-top').removeClass('dfce-cm-top');\n\t\telement.find('.dfce-cm-middle').removeClass('dfce-cm-middle');\n\t\telement.find('.dfce-cm-bottom').removeClass('dfce-cm-bottom');\n\t\t// If we are disabled, return\n\t\tif (!ChatMerge._enabled) return;\n\t\t// Collect all rendered chat messages\n\t\tconst messages = element.find('li.chat-message');\n\t\t// Return if there are no messages rendered\n\t\tif (messages.length === 0) return;\n\t\t// Make sure to set the hover colour for the first message since we skip it in the processor bellow.\n\t\tif (messages[0].hasAttribute('style')) {\n\t\t\tmessages[0].style.setProperty('--dfce-mc-border-color', messages[0].style.borderColor);\n\t\t}\n\t\t// Process each message after the first\n\t\tfor (let c = 1; c < messages.length; c++) {\n\t\t\t// Update styling of the chat messages\n\t\t\tthis._styleChatMessages(\n\t\t\t\tgame.messages.get(messages[c].getAttribute('data-message-id')),\n\t\t\t\tmessages[c],\n\t\t\t\tgame.messages.get(messages[c - 1].getAttribute('data-message-id')),\n\t\t\t\tmessages[c - 1]);\n\t\t}\n\t}\n\n\tprivate static _renderChatMessage(message: ChatMessage, html: JQuery<HTMLElement>, _cmd: ChatMessageData) {\n\t\tif (!ChatMerge._enabled) return;\n\t\t// Find the most recent message in the chat log\n\t\tconst partnerElem = $(`li.chat-message`).last()[0];\n\t\t// If there is no message, return\n\t\tif (partnerElem === null || partnerElem === undefined) return;\n\t\t// get the ChatMessage document associated with the html\n\t\tconst partner = game.messages.get(partnerElem.getAttribute('data-message-id'));\n\t\t// Update styling of the chat messages\n\t\tChatMerge._styleChatMessages(message, html[0], partner, partnerElem);\n\t}\n\n\tprivate static _inTimeFrame(current: number, previous: number): boolean {\n\t\treturn current > previous && (current - previous) < (this._epoch * 1000);\n\t}\n\n\tprivate static _isValidMessage(current: ChatMessage, previous: ChatMessage): boolean {\n\t\tconst rolls = this._allowRolls;\n\t\tconst splitSpeaker = SETTINGS.get<boolean>(this.PREF_SPLIT_SPEAKER);\n\t\tlet userCompare = false;\n\n\t\tconst currData = current.data ?? <ChatMessageData><any>current;\n\t\tconst prevData = previous.data ?? <ChatMessageData><any>previous;\n\n\t\t// If either message is a Midi-QoL message, ignore it\n\t\tif ((currData.flags as Record<string, any>)['midi-qol'] || (prevData.flags as Record<string, any>)['midi-qol'])\n\t\t\treturn false;\n\n\t\tif (splitSpeaker) {\n\t\t\t// this is a bit complex, basically we want to group by actors, but if you're not using an actor, group by user instead\n\t\t\tuserCompare = ( // If actors are equal and NOT null\n\t\t\t\tcurrData.speaker.actor === prevData.speaker.actor\n\t\t\t\t&& !!currData.speaker.actor\n\t\t\t) ||\n\t\t\t\t( // If BOTH actors are null and users are equal\n\t\t\t\t\t!currData.speaker.actor\n\t\t\t\t\t&& !prevData.speaker.actor\n\t\t\t\t\t&& currData.user === prevData.user\n\t\t\t\t);\n\t\t} else {\n\t\t\t// If we are not splitting by speaker, just do the simple option of comparing the users\n\t\t\tuserCompare = currData.user === prevData.user;\n\t\t}\n\t\treturn userCompare\n\t\t\t&& this._inTimeFrame(currData.timestamp, prevData.timestamp)\n\t\t\t// Check for merging with roll types\n\t\t\t&& (rolls === 'all'\n\t\t\t\t|| (rolls === 'rolls' && current.isRoll === previous.isRoll)\n\t\t\t\t|| (rolls === 'none' && !current.isRoll && !previous.isRoll));\n\t}\n\n\tprivate static _styleChatMessages(curr: ChatMessage, currElem: HTMLElement, prev: ChatMessage, prevElem: HTMLElement) {\n\t\tif (currElem.hasAttribute('style')) {\n\t\t\tcurrElem.style.setProperty('--dfce-mc-border-color', currElem.style.borderColor);\n\t\t}\n\t\t// If we are running in a Chat Archive\n\t\tif (curr === undefined && prev === undefined) {\n\t\t\tconst logId = parseInt(/df-chat-log-(\\d+)/.exec(currElem.parentElement.parentElement.id)[1]);\n\t\t\tif (isNaN(logId)) return;\n\t\t\tconst chatLog = DFChatArchiveManager.chatViewers.get(logId);\n\t\t\tcurr = <ChatMessage>chatLog.messages.find(x =>\n\t\t\t\t((x as ChatMessageData)._id ? (x as ChatMessageData)._id : (x as ChatMessage).id) == currElem.dataset.messageId);\n\t\t\tprev = <ChatMessage>chatLog.messages.find(x =>\n\t\t\t\t((x as ChatMessageData)._id ? (x as ChatMessageData)._id : (x as ChatMessage).id) == prevElem.dataset.messageId);\n\t\t}\n\t\tif (!ChatMerge._isValidMessage(curr, prev)) return;\n\t\tif (prevElem.classList.contains('dfce-cm-bottom')) {\n\t\t\tprevElem.classList.remove('dfce-cm-bottom');\n\t\t\tprevElem.classList.add('dfce-cm-middle');\n\t\t} else prevElem.classList.add('dfce-cm-top');\n\t\tcurrElem.classList.add('dfce-cm-bottom');\n\t}\n}","import SETTINGS from \"../../../common/Settings\";\nimport UTIL from \"../Util\";\n\n\nconst ICONS_FOR_KNOWN_ROLL_TYPES: {\n\t[key: string]: string;\n\tpublicroll: string;\n\tgmroll: string;\n\tblindroll: string;\n\tselfroll: string;\n} = {\n\tpublicroll: 'fas fa-dice-d20',\n\tgmroll: 'fas fa-user-secret',\n\tblindroll: 'fas fa-user-ninja',\n\tselfroll: 'fas fa-ghost'\n};\n\ninterface ChatLogData {\n\tuser: User,\n\trollMode: string,\n\trollModes: any,\n\tisStream: boolean\n}\n\nexport default class ChatRollPrivacy {\n\tstatic setup() {\n\t\tgame.keybindings.register(SETTINGS.MOD_NAME, \"roll-mode.publicroll\", {\n\t\t\tname: 'Public Roll',\n\t\t\teditable: [{ key: 'KeyQ', modifiers: [KeyboardManager.MODIFIER_KEYS.ALT] }],\n\t\t\tnamespace: 'Roll Type Shortcuts',\n\t\t\tonDown: () => {\n\t\t\t\t$('#dfcp-rt-buttons > button[data-id=\"publicroll\"]').trigger('click');\n\t\t\t}\n\t\t});\n\t\tgame.keybindings.register(SETTINGS.MOD_NAME, \"roll-mode.gmroll\", {\n\t\t\tname: 'Private GM Roll',\n\t\t\teditable: [{ key: 'KeyW', modifiers: [KeyboardManager.MODIFIER_KEYS.ALT] }],\n\t\t\tnamespace: 'Roll Type Shortcuts',\n\t\t\tonDown: () => {\n\t\t\t\t$('#dfcp-rt-buttons > button[data-id=\"gmroll\"]').trigger('click');\n\t\t\t}\n\t\t});\n\t\tgame.keybindings.register(SETTINGS.MOD_NAME, \"roll-mode.blindroll\", {\n\t\t\tname: 'Blind GM Roll',\n\t\t\teditable: [{ key: 'KeyE', modifiers: [KeyboardManager.MODIFIER_KEYS.ALT] }],\n\t\t\tnamespace: 'Roll Type Shortcuts',\n\t\t\tonDown: () => {\n\t\t\t\t$('#dfcp-rt-buttons > button[data-id=\"blindroll\"]').trigger('click');\n\t\t\t}\n\t\t});\n\t\tgame.keybindings.register(SETTINGS.MOD_NAME, \"roll-mode.selfroll\", {\n\t\t\tname: 'Self Roll',\n\t\t\teditable: [{ key: 'KeyR', modifiers: [KeyboardManager.MODIFIER_KEYS.ALT] }],\n\t\t\tnamespace: 'Roll Type Shortcuts',\n\t\t\tonDown: () => {\n\t\t\t\t$('#dfcp-rt-buttons > button[data-id=\"selfroll\"]').trigger('click');\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic init() {\n\t\tSETTINGS.register('enabled', {\n\t\t\tname: 'DF_CHAT_PRIVACY.Settings_EnableTitle',\n\t\t\thint: 'DF_CHAT_PRIVACY.Settings_EnableHint',\n\t\t\tscope: 'client',\n\t\t\ttype: Boolean,\n\t\t\tdefault: true,\n\t\t\tconfig: true,\n\t\t\tonChange: UTIL.requestReload\n\t\t});\n\t\tSETTINGS.register('replace-buttons', {\n\t\t\tname: 'DF_CHAT_PRIVACY.Settings_ReplaceButtonsTitle',\n\t\t\thint: 'DF_CHAT_PRIVACY.Settings_ReplaceButtonsHint',\n\t\t\tscope: 'client',\n\t\t\ttype: Boolean,\n\t\t\tdefault: true,\n\t\t\tconfig: true,\n\t\t\tonChange: UTIL.requestReload\n\t\t});\n\t\n\t\tif (SETTINGS.get('enabled') === false)\n\t\t\treturn;\n\t\n\t\tHooks.on('renderChatLog', this._handleChatLogRendering);\n\t}\n\n\n\tprivate static calcColour(current: number, count: number): string {\n\t\treturn `rgb(${(current / count) * 255},${(1 - (current / count)) * 255},0)`;\n\t}\n\n\tprivate static async _handleChatLogRendering(chat: ChatLog, html: JQuery<HTMLElement>, data: ChatLogData) {\n\t\tconst modes = Object.keys(data.rollModes);\n\t\tconst buttons: any[] = [];\n\t\tconst iconKeys = Object.keys(ICONS_FOR_KNOWN_ROLL_TYPES);\n\t\tfor (let c = 0; c < modes.length; c++) {\n\t\t\tconst rt = modes[c];\n\t\t\tif (!(rt in ICONS_FOR_KNOWN_ROLL_TYPES)) {\n\t\t\t\tconsole.warn(Error(`Unknown roll type '${rt}'`));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbuttons.push({\n\t\t\t\trt: rt,\n\t\t\t\tname: data.rollModes[rt],\n\t\t\t\tactive: data.rollMode === rt,\n\t\t\t\ticon: ICONS_FOR_KNOWN_ROLL_TYPES[rt],\n\t\t\t\tcolour: ChatRollPrivacy.calcColour(iconKeys.findIndex(x => x == rt), iconKeys.length)\n\t\t\t});\n\t\t}\n\t\tconst buttonHtml = $(await renderTemplate('modules/df-chat-enhance/templates/privacy-button.hbs', { buttons }));\n\t\tbuttonHtml.find('button').on('click', function () {\n\t\t\tconst rollType = $(this).attr('data-id');\n\t\t\tgame.settings.set(\"core\", \"rollMode\", <any>rollType);\n\t\t\tbuttonHtml.find('button.active').removeClass('active');\n\t\t\t$(this).addClass('active');\n\t\t});\n\t\thtml.find('select[name=rollMode]').after(buttonHtml);\n\t\thtml.find('select[name=rollMode]').remove();\n\t\n\t\tif (!SETTINGS.get('replace-buttons'))\n\t\t\treturn;\n\t\n\t\t// Adjust the button container to remove the extra margin since those buttons are now moving in.\n\t\tbuttonHtml.attr('style', 'margin:0 0 0 0.5em');\n\t\n\t\t// Convert the old <a> tag elements to <button> tags\n\t\tlet first = true;\n\t\thtml.find('#chat-controls div.control-buttons a').each(function () {\n\t\t\tconst html = $(this).html();\n\t\t\tconst classes = $(this).attr('class');\n\t\t\tconst title = $(this).attr('title');\n\t\t\tconst style = $(this).attr('style');\n\t\t\tconst click = ($ as any)._data(this, 'events')['click'][0].handler;\n\t\t\tconst button = $(`<button class=\"${classes}\" title=\"${title}\" style=\"${style}\">${html}</button>`);\n\t\t\tbutton.on('click', click);\n\t\t\t// Add a small margin between the first button and the RollTypes\n\t\t\tif (first) {\n\t\t\t\tbutton.attr('style', 'margin-left:0.5em');\n\t\t\t\tfirst = false;\n\t\t\t}\n\t\t\tbuttonHtml.append(button);\n\t\t});\n\t\n\t\thtml.find('#chat-controls div.control-buttons').remove();\n\t}\n}\n","export default class UTIL {\n\tstatic async requestReload() {\n\t\tif (await Dialog.confirm({\n\t\t\ttitle: \"DF_CHAT_ENHANCE.ReloadGameTitle\".localize(),\n\t\t\tcontent: \"DF_CHAT_ENHANCE.ReloadGameContent\".localize(),\n\t\t\tdefaultYes: true\n\t\t})) {\n\t\t\twindow.location.reload();\n\t\t}\n\t}\n\n\tstatic reloadChatLog() {\n\t\t// @ts-expect-error\n\t\tui.chat._lastId = null;\n\t\t// @ts-expect-error\n\t\tui.chat._state = Application.RENDER_STATES.NONE;\n\t\tui.chat.render(true);\n\t}\n}","import libWrapperShared from \"../../../common/libWrapperShared\";\nimport SETTINGS from \"../../../common/Settings\";\nimport ChatHistoryOptimizer from \"./ChatHistoryOptimizer\";\n\ndeclare class ChatLogExt extends ChatLog {\n\t_scrollToBottomButton: JQuery<HTMLElement>;\n}\n\nexport default class ScrollManage {\n\tprivate static readonly PREF_ENABLED = 'scroll-manage-enabled';\n\tprivate static readonly PREF_SCROLL_IF_YOU = 'scroll-manage-scroll-if-you';\n\tprivate static readonly ScrollThreshold = 50;\n\t// private static _scrollToBottomButton: JQuery<HTMLElement>;\n\tprivate static _deleteMessageRegistrationID: number | null = null;\n\n\n\tstatic get enabled(): boolean { return SETTINGS.get(this.PREF_ENABLED); }\n\tstatic get scrollToBottomIfYouSendMessage(): boolean { return SETTINGS.get(this.PREF_SCROLL_IF_YOU); }\n\n\tstatic init() {\n\t\tHooks.on('renderChatLog', this._renderChatLog.bind(this));\n\n\t\tSETTINGS.register(this.PREF_ENABLED, {\n\t\t\tname: 'DF_CHAT_SCROLL.EnableName',\n\t\t\thint: 'DF_CHAT_SCROLL.EnableHint',\n\t\t\tscope: 'world',\n\t\t\tconfig: true,\n\t\t\ttype: Boolean,\n\t\t\tdefault: true,\n\t\t\tonChange: (newValue) => {\n\t\t\t\tif (newValue) this.register();\n\t\t\t\telse this.unregister();\n\t\t\t}\n\t\t});\n\t\tSETTINGS.register(this.PREF_SCROLL_IF_YOU, {\n\t\t\tname: 'DF_CHAT_SCROLL.ScrollIfYouName',\n\t\t\thint: 'DF_CHAT_SCROLL.ScrollIfYouHint',\n\t\t\tscope: 'world',\n\t\t\tconfig: true,\n\t\t\ttype: Boolean,\n\t\t\tdefault: true\n\t\t});\n\n\t\tChatHistoryOptimizer.init();\n\t}\n\n\tstatic ready() {\n\t\tif (this.enabled)\n\t\t\tthis.register();\n\t}\n\n\tprivate static register() {\n\t\tlibWrapper.register(SETTINGS.MOD_NAME, 'ChatLog.prototype.postOne', this._ChatLog_postOne, 'OVERRIDE');\n\t\tlibWrapper.register(SETTINGS.MOD_NAME, 'ChatLog.prototype.scrollBottom', this._ChatLog_scrollBottom, 'OVERRIDE');\n\t\tthis._deleteMessageRegistrationID = libWrapperShared.register('ChatLog.prototype.deleteMessage', this._ChatLog_deleteMessage);\n\t}\n\tprivate static unregister() {\n\t\tlibWrapper.unregister(SETTINGS.MOD_NAME, 'ChatLog.prototype.postOne', false);\n\t\tlibWrapper.unregister(SETTINGS.MOD_NAME, 'ChatLog.prototype.scrollBottom', false);\n\t\tlibWrapperShared.unregister('ChatLog.prototype.deleteMessage', this._deleteMessageRegistrationID);\n\t}\n\n\tprivate static _renderChatLog(app: ChatLogExt, html: JQuery<HTMLElement>) {\n\t\tapp._scrollToBottomButton = $(`<div id=\"scrollToBottom\" style=\"display:none\">\n\t<span>${'DF_CHAT_SCROLL.NewMessage'.localize()}</span> ${'DF_CHAT_SCROLL.ScrollButton'.localize()}\n</div>`);\n\t\tapp._scrollToBottomButton.on('click', () => {\n\t\t\tconst el = app.element;\n\t\t\tconst log = el.length ? el[0].querySelector(\"#chat-log\") : null;\n\t\t\tif (log) {\n\t\t\t\tlog.scrollTo({ behavior: \"smooth\", top: log.scrollHeight });\n\t\t\t}\n\t\t});\n\t\thtml.find('div#chat-controls').before(app._scrollToBottomButton);\n\n\t\thtml.find('ol#chat-log').on('scroll', (event) => {\n\t\t\tif (!app._scrollToBottomButton) return;\n\t\t\tconst element = <HTMLOListElement>event.currentTarget;\n\t\t\t// Ignore events when the scroll height is too small to matter\n\t\t\tif (element.clientHeight > element.scrollHeight - this.ScrollThreshold) return;\n\t\t\tif (element.scrollTop < (element.scrollHeight - element.clientHeight) - this.ScrollThreshold)\n\t\t\t\tapp._scrollToBottomButton.show();\n\t\t\telse {\n\t\t\t\tapp._scrollToBottomButton.hide();\n\t\t\t\tapp._scrollToBottomButton.removeClass('new');\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate static _ChatLog_scrollBottom(this: ChatLogExt) {\n\t\tconst el = this.element;\n\t\tconst log = el.length ? el[0].querySelector(\"#chat-log\") : null;\n\t\t// If we are already at the bottom, perform the scroll\n\t\tif (this._scrollToBottomButton.is(':hidden'))\n\t\t\tsetTimeout(() => log.scrollTo({ behavior: 'smooth', top: log.scrollHeight }), 100);\n\t\t// Otherwise do not scroll, but do trigger a scroll event.\n\t\t// Some modules might use this function after manually adding message content to the ChatLog\n\t\telse $('#chat #chat-log').trigger('scroll');\n\t}\n\n\tprivate static async _ChatLog_postOne(this: ChatLogExt, message: ChatMessage, notify = false) {\n\t\tif (!message.visible) return;\n\n\t\t// Track internal flags\n\t\tif (!this._lastId) this._lastId = message.id; // Ensure that new messages don't result in batched scrolling\n\t\tif ((message.data.whisper || []).includes(game.user.id) && !message.isRoll) {\n\t\t\tthis._lastWhisper = message;\n\t\t}\n\n\t\t// Render the message to the log\n\t\tconst element = this.element.find(\"#chat-log\");\n\t\tconst atBottom = element[0].scrollTop >= ((element[0].scrollHeight - element[0].clientHeight) - ScrollManage.ScrollThreshold);\n\t\tconst html = await (<any>message).getHTML();\n\t\telement.append(html);\n\t\tif (atBottom || (ScrollManage.scrollToBottomIfYouSendMessage && message.isAuthor))\n\t\t\telement[0].scrollTo({ top: element[0].scrollHeight, behavior: 'smooth' });\n\t\t// this.scrollBottom();\n\t\telse {\n\t\t\tthis._scrollToBottomButton.addClass('new');\n\t\t}\n\n\t\t// Post notification\n\t\tif (notify) this.notify(message);\n\n\t\t// Update popout tab\n\t\tif (this._popout) await (<any>this._popout).postOne(message, false);\n\t\tif (this.popOut) this.setPosition();\n\t}\n\n\tprivate static _ChatLog_deleteMessage(this: ChatLogExt, wrapped: (...args: any) => unknown, messageId: string, { deleteAll = false }: { deleteAll?: boolean } = {}): unknown {\n\t\tconst result = wrapped(messageId, { deleteAll });\n\t\t// Ignore singular message deletions, only react to a Delete All event.\n\t\t// Also ignore the deletion if the scroll-to-bottom element is already hidden\n\t\tif (!deleteAll || this._scrollToBottomButton.is(':hidden')) return result;\n\t\tthis._scrollToBottomButton.hide();\n\t\tthis._scrollToBottomButton.removeClass('new');\n\t\treturn result;\n\t}\n}","import SETTINGS from \"../../../common/Settings\";\nimport UTIL from \"../Util\";\n\nexport default class ChatHistoryOptimizer {\n\n\tprivate static readonly PREF_ENABLED = 'ChatHistoryOptimizer.Enabled';\n\tprivate static readonly PREF_HISTORY_SIZE = 'ChatHistoryOptimizer.HistorySize';\n\n\tstatic init() {\n\n\t\tSETTINGS.register(this.PREF_ENABLED, {\n\t\t\tname: 'DF_CHAT_SCROLL.HistoryFixEnabledName',\n\t\t\thint: 'DF_CHAT_SCROLL.HistoryFixEnabledHint',\n\t\t\tconfig: true,\n\t\t\ttype: Boolean,\n\t\t\tdefault: true,\n\t\t\tscope: 'world',\n\t\t\tonChange: UTIL.requestReload\n\t\t});\n\t\tSETTINGS.register<number>(this.PREF_HISTORY_SIZE, {\n\t\t\tname: 'DF_CHAT_SCROLL.HistorySizeName',\n\t\t\thint: 'DF_CHAT_SCROLL.HistorySizeHint',\n\t\t\tconfig: true,\n\t\t\ttype: Number,\n\t\t\tdefault: CONFIG.ChatMessage.batchSize,\n\t\t\trange: {\n\t\t\t\tmin: CONFIG.ChatMessage.batchSize,\n\t\t\t\tmax: CONFIG.ChatMessage.batchSize * 5,\n\t\t\t\tstep: CONFIG.ChatMessage.batchSize\n\t\t\t},\n\t\t\tscope: 'world',\n\t\t\tonChange: () => $('#chat-log').trigger('scroll')\n\t\t});\n\n\t\tif (!SETTINGS.get(this.PREF_ENABLED)) return;\n\n\t\tlibWrapper.register(SETTINGS.MOD_NAME, 'ChatLog.prototype._onScrollLog', this._ChatLog_onScrollLog, 'MIXED');\n\n\t\t/**\n\t\t// This is used for DEBUG purposes only\n\t\t// Displays the number of messages being rendered in the Chat Log\n\t\tHooks.on('renderChatLog', (_: any, html: JQuery) => {\n\t\t\thtml.find('#scrollToBottom').after('<div class=\"dfce-chat-count\" style=\"flex:0;text-align:center\"></div>');\n\t\t});\n\t\tthis._displayMessageCounts(0);\n\t\t/**/\n\t}\n\n\tprivate static _ChatLog_onScrollLog(this: ChatLog, wrapped: (event: any) => Promise<void>, event: any): Promise<void> {\n\t\tif (!this.rendered) return Promise.resolve();\n\t\tconst maxMessageCount = SETTINGS.get<number>(ChatHistoryOptimizer.PREF_HISTORY_SIZE);\n\t\t// Ignore all scroll events when there are not enough messages to even batch\n\t\tif (this.collection.size <= CONFIG.ChatMessage.batchSize) return wrapped(event);\n\t\tconst log = event.target as HTMLElement;\n\t\tconst messages = $(log).find('li.chat-message');\n\n\t\t// Grab the top most message based on current scroll position\n\t\tlet topMessageIndex = -1;\n\n\t\t//! NOTICE! The message list is inverted, it is sorted OLDEST to NEWEST,\n\t\t//! so message[0] is at the very top of the chat log, and message[n] is\n\t\t//! at the very bottom of the chat log.\n\n\t\t// We try to start as close to the actual top message as we can, then traverse either up or down from there\n\t\tconst pct = log.scrollTop / log.scrollHeight;\n\t\tconst chatViewTop = log.scrollTop + messages[0].offsetTop;\n\t\tlet c = Math.trunc(messages.length * pct);\n\t\t// If the estimate is too high up the log, we traverse down\n\t\tif (messages[c].offsetTop < chatViewTop) {\n\t\t\tfor (; c < messages.length; c++) {\n\t\t\t\tif (\n\t\t\t\t\t// If this message is at/on the scroll top\n\t\t\t\t\t(messages[c].offsetTop <= chatViewTop && messages[c].offsetTop + messages[c].offsetHeight >= chatViewTop) ||\n\t\t\t\t\t// If the previous message is above the view, and this one is in the view\n\t\t\t\t\t(c - 1 >= 0 && messages[c].offsetTop >= chatViewTop && messages[c - 1].offsetTop + messages[c - 1].offsetHeight)\n\t\t\t\t) {\n\t\t\t\t\ttopMessageIndex = c;\n\t\t\t\t\t// We should break as soon as we find it\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Otherwise we traverse up the chat log\n\t\telse {\n\t\t\tfor (; c >= 0; c--) {\n\t\t\t\tif (\n\t\t\t\t\t// If this message is at/on the scroll top\n\t\t\t\t\t(messages[c].offsetTop <= chatViewTop && messages[c].offsetTop + messages[c].offsetHeight >= chatViewTop) ||\n\t\t\t\t\t// If the previous message is above the view, and this one is in the view\n\t\t\t\t\t(c - 1 >= 0 && messages[c].offsetTop >= chatViewTop && messages[c - 1].offsetTop + messages[c - 1].offsetHeight)\n\t\t\t\t) {\n\t\t\t\t\ttopMessageIndex = c;\n\t\t\t\t\t// We should break as soon as we find it\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// If we found nothing\n\t\tif (topMessageIndex < 0) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\t// Check if we should load more messages\n\t\tif (topMessageIndex < (CONFIG.ChatMessage.batchSize / 4) && messages.length < this.collection.size) {\n\t\t\t// Add Messages\n\t\t\treturn this._renderBatch(this.element, CONFIG.ChatMessage.batchSize);\n\t\t}\n\t\t// If we don't want to load more, check if we should delete some\n\t\telse if (topMessageIndex > maxMessageCount) {\n\t\t\tconst count = topMessageIndex - (maxMessageCount - 1);\n\t\t\t// Set the Last ID for batch rendering\n\t\t\tthis._lastId = messages[count].dataset.messageId;\n\t\t\t// Remove the messages\n\t\t\tmessages.slice(0, count).remove();\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\tprivate static _lastFrame = 0;\n\tprivate static _displayMessageCounts(time: number) {\n\t\tif (ChatHistoryOptimizer._lastFrame + 500 < time) {\n\t\t\tChatHistoryOptimizer._lastFrame = time;\n\t\t\t$('.dfce-chat-count').each(function (_, element: HTMLElement) {\n\t\t\t\tconst msgCount = $(element).siblings('#chat-log').find('li.chat-message').length;\n\t\t\t\telement.innerText = `${msgCount} / ${ui.chat.collection.size}`;\n\t\t\t});\n\t\t}\n\t\trequestAnimationFrame(ChatHistoryOptimizer._displayMessageCounts);\n\t}\n}","import { ChatMessageData } from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs\";\nimport SETTINGS from \"../../../common/Settings\";\n\n\nconst TEMPLATE = \"$0: $1 (+$2&nbsp;more)\";\nconst LENGTH_ADJUST = '&nbsp;'.length - 1;\n\n\nexport default class WhisperTruncation {\n\n\tprivate static readonly PREF_ENABLED = 'whisper-trunc_enabled';\n\tprivate static readonly PREF_CHAR_LIMIT = 'whisper-trunc_char-limit';\n\n\tstatic init() {\n\t\tHooks.on('renderChatMessage', this._messageRender.bind(this));\n\t\tSETTINGS.register(this.PREF_ENABLED, {\n\t\t\tname: 'DF_CHAT_WHISPER_TRUNC.SettingEnabledName',\n\t\t\thint: 'DF_CHAT_WHISPER_TRUNC.SettingEnabledHint',\n\t\t\tconfig: true,\n\t\t\ttype: Boolean,\n\t\t\tdefault: true,\n\t\t\tscope: 'world',\n\t\t\tonChange: async () => {\n\t\t\t\t(<any>ui.chat)._state = 0;\n\t\t\t\t(<any>ui.chat)._lastId = null;\n\t\t\t\tawait ui.chat.render(true);\n\t\t\t}\n\t\t});\n\t\tSETTINGS.register(this.PREF_CHAR_LIMIT, {\n\t\t\tname: 'DF_CHAT_WHISPER_TRUNC.SettingCharLimitName',\n\t\t\thint: 'DF_CHAT_WHISPER_TRUNC.SettingCharLimitHint',\n\t\t\tconfig: true,\n\t\t\ttype: Number,\n\t\t\tdefault: 50,\n\t\t\tscope: 'world',\n\t\t\tonChange: async () => {\n\t\t\t\t(<any>ui.chat)._state = 0;\n\t\t\t\t(<any>ui.chat)._lastId = null;\n\t\t\t\tawait ui.chat.render(true);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate static _messageRender(message: ChatMessage, html: JQuery<HTMLElement>, _cmd: ChatMessageData) {\n\t\t// ignore regular messages, or whispers with only 1 recipient\n\t\tif (!SETTINGS.get(this.PREF_ENABLED) || !(message.data.whisper) || message.data.whisper.length <= 1) return;\n\t\tconst users = message.data.whisper.map(x => game.users.get(x));\n\t\tlet accum = users[0].data.name;\n\t\tlet title = this._formatTitle(accum, users.length - 1);\n\t\tlet c = 1;\n\t\tconst CHAR_LIMIT = SETTINGS.get<number>(this.PREF_CHAR_LIMIT);\n\t\tfor (; c < users.length; c++) {\n\t\t\t// Append name to names string\n\t\t\tconst tmpNames = accum + ', ' + users[c].data.name;\n\t\t\t// Generate a temp title\n\t\t\tconst tmpTitle = this._formatTitle(tmpNames, users.length - c - 1);\n\t\t\t// If the potential title is too large, break so we can use the previous iteration's results\n\t\t\tif (tmpTitle.length - LENGTH_ADJUST > CHAR_LIMIT) break;\n\t\t\t// Set the accum and title to the newly generated values\n\t\t\taccum = tmpNames;\n\t\t\ttitle = tmpTitle;\n\t\t}\n\t\t// If we never ran out of room, exit\n\t\tif (c === users.length) return;\n\t\t// Update the HTML\n\t\tconst newHeader = `<span class=\"whisper-to\" title=\"${users.slice(c).map(x => x.data.name).join(', ')}\">${title}</span>`;\n\t\thtml.find('span.whisper-to').replaceWith(newHeader);\n\t}\n\n\tprivate static _formatTitle(names: string, count: number): string {\n\t\treturn count > 0\n\t\t\t? TEMPLATE\n\t\t\t\t.replace('$0', 'CHAT.To'.localize())\n\t\t\t\t.replace('$1', names)\n\t\t\t\t.replace('$2', count.toString())\n\t\t\t: names;\n\t}\n}","import libWrapperShared from \"../../../common/libWrapperShared\";\nimport SETTINGS from \"../../../common/Settings\";\nimport UTIL from '../Util';\n\nexport default class PlayerColor {\n\tstatic readonly PREF_TINT_BG = 'PlayerColor_TintBackground';\n\tstatic readonly PREF_BORDER_STYLE = 'PlayerColor.BorderStyle';\n\tstatic readonly FLAG_CHAT_COLOR = 'chat-color';\n\n\tstatic init() {\n\t\tSETTINGS.register(PlayerColor.PREF_TINT_BG, {\n\t\t\tconfig: true,\n\t\t\tname: 'DF_CHAT_PLAYER_COLOR.SettingTintBackgroundName',\n\t\t\thint: 'DF_CHAT_PLAYER_COLOR.SettingTintBackgroundHint',\n\t\t\tscope: 'world',\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t\tonChange: UTIL.reloadChatLog\n\t\t});\n\t\tSETTINGS.register<string>(PlayerColor.PREF_BORDER_STYLE, {\n\t\t\tname: 'DF_CHAT_PLAYER_COLOR.SettingBorderStyleName',\n\t\t\thint: 'DF_CHAT_PLAYER_COLOR.SettingBorderStyleHint',\n\t\t\tconfig: true,\n\t\t\ttype: String,\n\t\t\tchoices: {\n\t\t\t\tall: 'DF_CHAT_PLAYER_COLOR.BorderStyle.all',\n\t\t\t\tmine: 'DF_CHAT_PLAYER_COLOR.BorderStyle.mine',\n\t\t\t\tnone: 'DF_CHAT_PLAYER_COLOR.BorderStyle.none'\n\t\t\t},\n\t\t\tdefault: 'all',\n\t\t\tscope: 'client',\n\t\t\tonChange: UTIL.reloadChatLog\n\t\t});\n\n\t\tHooks.on('renderUserConfig', (app: UserConfig, html: JQuery<HTMLElement>, data: UserConfig.Data<any>) => {\n\t\t\tconst color = data.user.getFlag(SETTINGS.MOD_NAME, PlayerColor.FLAG_CHAT_COLOR) ?? '';\n\t\t\thtml.find('input[name=\"color\"]').parent().after(`\n<div class=\"form-group\">\n\t<label for=\"chat-color\">${'DF_CHAT_PLAYER_COLOR.Label'.localize()}</label>\n\t<input id=\"chat-color\" type=\"text\" name=\"chat-color\" value=\"${color}\" style=\"flex:1.35\">\n\t<input type=\"color\" value=\"${color}\" data-edit=\"chat-color\">\n</div>`);\n\t\t\tconst chatField = html.find('#chat-color');\n\t\t\tconst chatPicker = html.find('[data-edit=\"chat-color\"]');\n\t\t\t// Make sure to update the color selector if a manual entry occurs\n\t\t\tchatField.on('change', () => chatPicker.val(chatField.val()));\n\t\t\t// Resize the window to encompass the new fields\n\t\t\tapp.element[0].style.height = '';\n\t\t\tapp.setPosition({});\n\t\t});\n\n\t\tlibWrapperShared.register('UserConfig.prototype._updateObject',\n\t\t\tasync function (this: UserConfig, wrapped: (arg0: any, arg1: any) => any, event: any, formData: { \"chat-color\": string }): Promise<void> {\n\t\t\t\tawait this.object.setFlag(SETTINGS.MOD_NAME, PlayerColor.FLAG_CHAT_COLOR, formData[\"chat-color\"]);\n\t\t\t\tawait wrapped(event, formData);\n\t\t\t});\n\n\t\tlibWrapper.register(SETTINGS.MOD_NAME, 'ChatMessage.prototype.getHTML', async function (this: ChatMessage, wrapper: (...arg: any) => Promise<JQuery<HTMLElement>>, ...args: any) {\n\t\t\tconst html = await wrapper(...args);\n\t\t\t// If the message has no user bound to it, then it is likely some kind of other message being created by a module. Just return immediately.\n\t\t\tif (!this.user) return html;\n\t\t\tlet chatColor = (<string>this.user.getFlag(SETTINGS.MOD_NAME, PlayerColor.FLAG_CHAT_COLOR))?.trim();\n\t\t\t// If it is a valid color\n\t\t\tif (!chatColor || !/#[a-fA-F0-9]{6,8}/.test(chatColor))\n\t\t\t\tchatColor = this.user.color;\n\n\t\t\t// Set the border colour to its default\n\t\t\tlet borderColour = '#6f6c66';\n\t\t\tswitch (SETTINGS.get<string>(PlayerColor.PREF_BORDER_STYLE)) {\n\t\t\t\tcase 'none': break;\n\t\t\t\tcase 'mine':\n\t\t\t\t\tif (game.userId !== this.data.user) break;\n\t\t\t\t// fallthrough\n\t\t\t\tcase 'all':\n\t\t\t\t\tborderColour = chatColor;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\thtml[0].style.borderColor = borderColour;\n\n\t\t\t// Set the hover border colour to what ever the border colour is\n\t\t\thtml[0].style.setProperty('--dfce-mc-border-color', borderColour);\n\t\t\tif (SETTINGS.get(PlayerColor.PREF_TINT_BG)) {\n\t\t\t\thtml[0].style.backgroundColor = chatColor;\n\t\t\t\thtml[0].style.backgroundImage = 'url(../ui/parchment.jpg)';\n\t\t\t\thtml[0].style.backgroundRepeat = 'repeat';\n\t\t\t\thtml[0].style.backgroundBlendMode = 'screen';\n\t\t\t}\n\t\t\treturn html;\n\t\t}, 'WRAPPER');\n\t}\n}\n","import SETTINGS from \"../../../common/Settings\";\n\nexport default class SendButton {\n\tprivate static readonly PREF_ENABLED = 'SendButton.Enabled';\n\tstatic init() {\n\t\tSETTINGS.register(this.PREF_ENABLED, {\n\t\t\tname: 'DF_CHAT_SEND_BUTTON.EnabledName'.localize(),\n\t\t\thint: 'DF_CHAT_SEND_BUTTON.EnabledHint'.localize(),\n\t\t\tconfig: true,\n\t\t\tscope: 'client',\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t\tonChange: (isActive) => {\n\t\t\t\tif (isActive) {\n\t\t\t\t\tthis._renderChatLog(ui.chat, $('#sidebar #chat'));\n\t\t\t\t\tconst popout = $('#chat-popout');\n\t\t\t\t\tif (popout.length > 0)\n\t\t\t\t\t\tthis._renderChatLog(ui.chat, popout);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$('.dfce-send-btn').remove();\n\t\t\t\t\t$<HTMLTextAreaElement>('#chat-message').each((_a, textarea) => {\n\t\t\t\t\t\t// @ts-expect-error\n\t\t\t\t\t\t$(textarea).off('input', textarea.dfce_handler);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tHooks.on('renderChatLog', this._renderChatLog.bind(this));\n\t}\n\n\tprivate static _renderChatLog(app: ChatLog, html: JQuery<HTMLElement>) {\n\t\tif (!SETTINGS.get<boolean>(this.PREF_ENABLED)) return;\n\t\tconst sendButton = $('<button class=\"dfce-send-btn\"><i class=\"fas fa-paper-plane\"></i></button>');\n\t\tsendButton.attr('title', 'DF_CHAT_SEND_BUTTON.ButtonTitle'.localize());\n\t\thtml.find('#chat-form').append(sendButton);\n\n\t\tconst textarea = html.find<HTMLTextAreaElement>('#chat-message');\n\t\tsendButton.prop('disabled', textarea[0].textLength <= 0 || textarea[0].value.trim().length <= 0);\n\n\t\tsendButton.on('click', async event => {\n\t\t\tevent.preventDefault();\n\t\t\t// @ts-expect-error\n\t\t\tawait ui.chat._onChatKeyDown(<any>{\n\t\t\t\tcode: 'Enter',\n\t\t\t\tcurrentTarget: textarea[0],\n\t\t\t\toriginalEvent: <any>{\n\t\t\t\t\tisComposing: false\n\t\t\t\t},\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t\t\t\tpreventDefault: () => { }\n\t\t\t});\n\t\t\tsetTimeout(() => textarea.trigger('input'), 100);\n\t\t});\n\n\t\tconst handler = (event: JQuery.TriggeredEvent<HTMLTextAreaElement, undefined, HTMLTextAreaElement, HTMLTextAreaElement>) => {\n\t\t\tconst element = (event.currentTarget as HTMLTextAreaElement);\n\t\t\tsendButton.prop('disabled', element.textLength <= 0 || element.value.trim().length <= 0);\n\t\t};\n\t\t// @ts-expect-error\n\t\ttextarea[0].dfce_handler = handler;\n\t\ttextarea.on('input', handler);\n\t}\n}","import SETTINGS from \"../../../common/Settings\";\n\nexport default class FontSizePatch {\n\n\tprivate static readonly PREF_SIZE = 'FontSizePatch.FontSize';\n\n\tstatic init() {\n\t\tSETTINGS.register<number>(this.PREF_SIZE, {\n\t\t\tname: 'DF_CHAT_FONT_SIZE.FontSizeName'.localize(),\n\t\t\thint: 'DF_CHAT_FONT_SIZE.FontSizeHint'.localize(),\n\t\t\tconfig: true,\n\t\t\ttype: Number,\n\t\t\tscope: 'client',\n\t\t\trange: {\n\t\t\t\tmin: 10,\n\t\t\t\tmax: 30,\n\t\t\t\tstep: 0.5\n\t\t\t},\n\t\t\tdefault: 14,\n\t\t\tonChange: (newSize) => this.updateFontSize(newSize)\n\t\t});\n\t\tthis.updateFontSize(SETTINGS.get<number>(this.PREF_SIZE));\n\t}\n\n\tprivate static updateFontSize(size: number) {\n\t\t(<HTMLElement>document.querySelector(':root')).style.setProperty('--dfce-chat-font-size', size.toString() + 'px');\n\t}\n}","import { ChatMessageData } from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs\";\nimport SETTINGS from \"../../../common/Settings\";\nimport UTIL from \"../Util\";\n\nexport default class ChatTime {\n\n\tprivate static readonly PREF_ENABLED = 'ChatTime.UseSimpleCalender';\n\tprivate static readonly PREF_FORMAT = 'ChatTime.SimpleCalendarFormat';\n\tprivate static readonly FLAG_CHAT_TIME = 'ChatTime.WorldTime';\n\n\tprivate static get enabled() { return SETTINGS.get(this.PREF_ENABLED); }\n\tprivate static get simpleCalendarActive() { return !!game.modules.get('foundryvtt-simple-calendar')?.active; }\n\n\tstatic ready() {\n\t\tif (!this.simpleCalendarActive && game.user.isGM && this.enabled)\n\t\t\tui.notifications.warn('DF_CHAT_TIME.ErrorSimpleCalendarMissing', { permanent: true, localize: true });\n\t}\n\n\tstatic init() {\n\t\tSETTINGS.register(this.PREF_ENABLED, {\n\t\t\tscope: 'world',\n\t\t\ttype: Boolean,\n\t\t\tname: \"DF_CHAT_TIME.EnabledName\",\n\t\t\thint: \"DF_CHAT_TIME.EnabledHint\",\n\t\t\tdefault: false,\n\t\t\tconfig: true,\n\t\t\tonChange: UTIL.reloadChatLog\n\t\t});\n\n\t\tSETTINGS.register(this.PREF_FORMAT, {\n\t\t\tscope: 'world',\n\t\t\ttype: String,\n\t\t\tname: 'DF_CHAT_TIME.FormatName',\n\t\t\thint: 'DF_CHAT_TIME.FormatHint',\n\t\t\tdefault: 'YYYY, MMM DD, HH:mm',\n\t\t\tconfig: this.simpleCalendarActive,\n\t\t\tonChange: UTIL.reloadChatLog\n\t\t});\n\n\t\tlibWrapper.register(SETTINGS.MOD_NAME, 'ChatMessage.implementation.create',\n\t\t\t(wrapped: (...args: any) => unknown, chatData: Partial<ChatMessageData>, createOptions: any) => {\n\t\t\t\tchatData.flags = chatData.flags ?? {};\n\t\t\t\tchatData.flags[SETTINGS.MOD_NAME] = {};\n\t\t\t\t(chatData.flags[SETTINGS.MOD_NAME] as any)[this.FLAG_CHAT_TIME] = game.time.worldTime;\n\t\t\t\treturn wrapped(chatData, createOptions);\n\t\t\t}, 'WRAPPER');\n\n\t\tHooks.on('renderChatMessage', (message: ChatMessage, html: JQuery<HTMLElement>, _data: any) => {\n\t\t\tif (!this.simpleCalendarActive || !this.enabled) return;\n\t\t\tconst simpleTimestamp = <number>message.getFlag(SETTINGS.MOD_NAME, this.FLAG_CHAT_TIME);\n\t\t\tif (simpleTimestamp === undefined) return;\n\t\t\tconst timeElement = html.find('.message-timestamp');\n\t\t\tconst simpleTimeElement = $(`<time class=\"dfce-simple-timestamp\">${SimpleCalendar.api.formatDateTime(\n\t\t\t\tSimpleCalendar.api.timestampToDate(simpleTimestamp), SETTINGS.get<string>(this.PREF_FORMAT)\n\t\t\t)}</time>`);\n\t\t\ttimeElement.after(simpleTimeElement);\n\t\t\ttimeElement.hide();\n\t\t});\n\t}\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import * as DFChatArchive from \"./archive/df-chat-archive\";\nimport DFChatEdit from \"./edit/df-chat-edit\";\nimport * as DFAdventureLog from \"./logger/df-adventure-log\";\nimport DFAdventureLogProcessor from \"./logger/DFAdventureLogProcessor\";\nimport ChatMerge from \"./merge/chat-merge\";\nimport ChatRollPrivacy from \"./privacy/df-chat-privacy\";\nimport ScrollManage from \"./scroll-manage/scroll-manage\";\nimport SETTINGS from \"../../common/Settings\";\nimport WhisperTruncation from \"./whisper-trunc/whisper-trunc\";\nimport PlayerColor from './player-color/PlayerColor';\nimport SendButton from \"./send/send-button\";\nimport FontSizePatch from \"./font-size/font-size\";\nimport ChatTime from \"./chat-time/chat-time\";\nSETTINGS.init('df-chat-enhance');\n\ndeclare global {\n\tinterface Application {\n\t\t_recalculateDimensions(): void;\n\t}\n}\n\n(<any>Application.prototype)._recalculateDimensions = function () {\n\tthis.element[0].style.height = '';\n\tthis.element[0].style.width = '';\n\tthis.setPosition({});\n};\n\nHooks.once('setup', function () {\n\tChatRollPrivacy.setup();\n});\n\nHooks.once('init', function () {\n\t/**\n\t * Order here matters! The archive adds a button to the\n\t * chat window, while the privacy changes those buttons\n\t * from <a> tags to <button> tags if enabled.\n\t */\n\tDFChatArchive.init();\n\tChatRollPrivacy.init();\n\tDFAdventureLog.init();\n\tChatMerge.init();\n\tScrollManage.init();\n\tWhisperTruncation.init();\n\tPlayerColor.init();\n\tSendButton.init();\n\tFontSizePatch.init();\n\tChatTime.init();\n\n\tlibWrapper.register(SETTINGS.MOD_NAME, 'ChatLog.prototype._getEntryContextOptions', function (wrapped: (...args: any) => ContextMenu.Item[], ...args: any) {\n\t\tconst options = wrapped(...args);\n\t\tDFChatEdit.appendChatContextMenuOptions(options);\n\t\tDFAdventureLogProcessor.appendChatContextMenuOptions(options);\n\t\treturn options;\n\t}, 'WRAPPER');\n});\n\nHooks.once('ready', function () {\n\tif (!game.modules.get('lib-wrapper')?.active) {\n\t\tconsole.error('Missing libWrapper module dependency');\n\t\tif (game.user.isGM)\n\t\t\tui.notifications.error('DF_CHAT_LOG.Error.LibWrapperMissing'.localize());\n\t}\n\tDFAdventureLog.ready();\n\tDFChatEdit.ready();\n\tChatMerge.ready();\n\tScrollManage.ready();\n\tChatTime.ready();\n});\n"],"names":["init","archiveNew","archiveManager","DFChatArchive","name","scope","type","Boolean","default","config","onChange","newValue","$","hide","show","Hooks","on","chatLog","html","archiveButton","localize","render","bringToTop","find","prepend","attr","settings","archiveManagerHtml","Application","RENDER_STATES","RENDERED","RENDERING","includes","_state","append","app","focus","DFChatArchiveNew","FormApplication","defaultOptions","mergeObject","template","resizable","minimizable","title","static","PREF_DELETE","getData","options","super","shouldDelete","async","_event","formData","delete","ui","notifications","warn","Error","chats","chat","collection","values","fromDate","Date","from","getTime","toDate","to","isNaN","filter","value","data","timestamp","info","replace","e","_renderInner","then","prop","this","_recalculateDimensions","PREF_HIDE_EXPORT","ArchiveFolderMenu","folder","PREF_FOLDER","source","PREF_FOLDER_SOURCE","width","height","submitOnClose","submitOnChange","closeOnSubmit","_options","path","input","event","preventDefault","fp","FilePicker","field","callback","activeSource","button","currentTarget","browse","DATA_FOLDER","listener","_updateListener","PREF_LOGS","Object","PREF_CID","Number","PREF_FOLDER_MENU","label","hint","restricted","String","game","world","id","createArchiveFolderIfMissing","catch","_","createDirectory","getLogs","x","visible","folderPath","safeName","fileName","encodeURI","file","File","JSON","stringify","response","upload","console","error","filepath","filename","newId","entry","_generateChatArchiveFile","logs","push","archive","fetch","json","ok","newChatData","toString","idx","findIndex","Promise","all","map","entryIdx","splice","SETTINGS","moduleName","MOD_NAME","prototype","i18n","valueOf","key","register","registerMenu","get","set","DFChatArchiveManager","messages","user","isGM","sort","a","b","localeCompare","reverseSort","PREF_REVERSE_SORT","reverse","_subscribeView","element","parseInt","chatViewers","has","view","_subscribeDelete","Dialog","confirm","content","defaultYes","yes","activateListeners","_archiveChanged","bind","length","each","i","asc","dsc","close","archiveContainer","empty","children","Map","DFChatArchiveViewer","constructor","onCloseCallBack","classes","logId","codeUnits","Uint16Array","charCodeAt","charCodes","Uint8Array","buffer","result","byteLength","fromCharCode","target","checked","setTimeout","dialog","buttons","save","icon","val","clone","addClass","window","print","remove","removeClass","renderTemplate","archives","cancel","merge","currentChats","sourceChats","mergedChats","concat","anchor","document","createElement","download","href","encodeURIComponent","click","log","messageHtml","userId","CONST","CHAT_MESSAGE_TYPES","WHISPER","whisper","some","deletionList","deleteButton","chatMessage","ChatMessage","getHTML","parentElement","buttonIcon","hasClass","err","message","_id","PREF_EDIT_ALLOWED","PREF_GM_ALL","PREF_IGNORE_HTML","DFChatEdit","PREF_SHOW_EDITED","libWrapper","wrapper","args","code","ctrlKey","editChatMessage","originalMessage","trim","startsWith","token","split","substr","trimStart","_sentMessages","unshift","condition","header","chatData","processChatMessage","chatEditor","_render","str","doc","DOMParser","parseFromString","Array","body","childNodes","node","HTMLElement","classList","contains","HTMLBRElement","nodeType","isRoll","isHTML","DFChatEditor","editable","popOut","types","keys","CONFIG","Actor","typeLabels","actors","scenes","viewed","tokens","contents","actor","selected","speaker","players","users","actorGroups","messageText","PREF_MARKDOWN","processMarkdown","search","substring","_getSpeakerFromUser","getSpeaker","undefined","alias","update","marked","parse","headerIds","breaks","trimEnd","endsWith","newLine","test","api","postToChat","pevent","gmevent","quote","pquote","gmquote","AdventureLog","ready","modules","active","_app","journal","getFlag","Handlebars","compile","journals","documents","testUserPermission","DOCUMENT_PERMISSION_LEVELS","OBSERVER","journalSelection","allowProtoMethodsByDefault","allowProtoPropertiesByDefault","parent","after","wrapped","object","setFlag","Registration","nextId","wrappers","handler","context","current","next","call","libWrapperShared","registration","registrations","size","unregister","DFAdventureLogConfig","PREF_JOURNAL","PREF_JOURNAL_GM","PREF_CONFIG","selectedLog","selectedGMLog","logJournals","gmlogJournals","logJournal","gmlogJournal","clear","gmClear","initializeJournal","isGMOnly","isPlayerLog","whitespace","index","c","every","DFAdventureLogProcessor","enabled","PREF_ENABLE","gmOnly","PREF_GMONLY","commandProcessor","logCommand","deregisterCommand","registerCommand","PREF_GMONLY_WHISPER","PREF_USE_TIME","PREF_MESSAGES","PREF_SORTDESC","resortLog","PREF_DISABLE_FORMATTING","PREF_DISABLE_AUTHOR","PREF_SIMPLE_CALENDAR","logConfig","chatCommands","plogCommand","gmlogCommand","createCommandFromData","commandKey","invokeOnCommand","_cl","msg","_cd","shouldDisplayToChat","iconClass","description","useTime","stamp","SimpleCalendar","formatDateTime","timestampToDate","date","time","toLocaleString","gmLog","preventPostToChat","prompt","messageData","flavor","OOC","line","disableFormatting","disableAuthor","toLowerCase","slice","_getTimestamp","journalId","PREF_PLAYER_LOG_JOURNAL","permanent","section","rollType","create","descending","journalAll","journalGM","journalSort","article","text","ChatMerge","_enabled","PREF_ENABLED","_epoch","PREF_EPOCH","_allowRolls","PREF_ALLOW_ROLLS","_separateWithBorder","PREF_SEPARATE","_showHover","PREF_HOVER","_showHeader","PREF_SHOW_HEADER","_processAllMessage","style","querySelector","setProperty","PREF_SPLIT_SPEAKER","choices","none","rolls","removeProperty","range","min","max","step","_deleteMessage","_renderChatMessage","messageId","deleteAll","nextElementSibling","add","previousElementSibling","hasAttribute","borderColor","_styleChatMessages","getAttribute","_cmd","partnerElem","last","partner","previous","splitSpeaker","userCompare","currData","prevData","flags","_inTimeFrame","curr","currElem","prev","prevElem","exec","dataset","_isValidMessage","ICONS_FOR_KNOWN_ROLL_TYPES","publicroll","gmroll","blindroll","selfroll","ChatRollPrivacy","keybindings","modifiers","KeyboardManager","MODIFIER_KEYS","ALT","namespace","onDown","trigger","_handleChatLogRendering","count","modes","rollModes","iconKeys","rt","rollMode","colour","calcColour","buttonHtml","first","_data","UTIL","location","reload","_lastId","NONE","ScrollManage","scrollToBottomIfYouSendMessage","PREF_SCROLL_IF_YOU","_renderChatLog","_ChatLog_postOne","_ChatLog_scrollBottom","_deleteMessageRegistrationID","_ChatLog_deleteMessage","_scrollToBottomButton","el","scrollTo","behavior","top","scrollHeight","before","clientHeight","ScrollThreshold","scrollTop","is","notify","_lastWhisper","atBottom","isAuthor","_popout","postOne","setPosition","ChatHistoryOptimizer","PREF_HISTORY_SIZE","batchSize","_ChatLog_onScrollLog","rendered","resolve","maxMessageCount","topMessageIndex","pct","chatViewTop","offsetTop","Math","trunc","offsetHeight","_renderBatch","_lastFrame","msgCount","siblings","innerText","requestAnimationFrame","_displayMessageCounts","LENGTH_ADJUST","WhisperTruncation","_messageRender","PREF_CHAR_LIMIT","accum","_formatTitle","CHAR_LIMIT","tmpNames","tmpTitle","newHeader","join","replaceWith","names","PlayerColor","PREF_TINT_BG","PREF_BORDER_STYLE","mine","color","FLAG_CHAT_COLOR","chatField","chatPicker","chatColor","borderColour","backgroundColor","backgroundImage","backgroundRepeat","backgroundBlendMode","SendButton","isActive","popout","_a","textarea","off","dfce_handler","sendButton","textLength","_onChatKeyDown","originalEvent","isComposing","FontSizePatch","PREF_SIZE","newSize","updateFontSize","ChatTime","simpleCalendarActive","PREF_FORMAT","createOptions","FLAG_CHAT_TIME","worldTime","simpleTimestamp","timeElement","simpleTimeElement","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","o","defineProperty","enumerable","obj","hasOwnProperty","r","Symbol","toStringTag","once"],"sourceRoot":""}