(()=>{"use strict";var e=[,(e,t,s)=>{s.r(t),s.d(t,{default:()=>DFLogger});var a=s(2),o=s(3);class DFLogger{static get Persist(){return!o.default.get(DFLogger.SETTING_SELF_DESTRUCT)}static get LoginContent(){return game.i18n.localize("DF-LOGGER.Content.Login"+(DFLogger.Persist?"_Persist":""))}static get LogoutContent(){return game.i18n.localize("DF-LOGGER.Content.Logout"+(DFLogger.Persist?"_Persist":""))}static getMessageText(e){return(e=e.filter((e=>e.tog)))[Math.round(Math.random()*(100*e.length))%e.length].msg}static async displayMessage(e,t,s){const a=await ChatMessage.create({sound:o.default.get(DFLogger.SETTING_SOUND),content:s.replace(/\{\{username\}\}/g,e.name),speaker:{scene:null,actor:null,token:null,alias:t},whisper:[game.user.id],type:CONST.CHAT_MESSAGE_TYPES.OOC});DFLogger.Persist||setTimeout((async()=>{await a.delete()}),Math.round(1e3*o.default.get("delay")))}static onEvent(e){o.default.get(DFLogger.SETTING_GM_ONLY)&&!game.user.isGM||(e.type===DFLogger.EV_LOGIN?DFLogger.onLogin(e):e.type===DFLogger.EV_LOGOUT&&DFLogger.onLogout(e))}static onUserActivity(e,t={}){"active"in t&&!0!==t.active&&DFLogger.onLogout({type:DFLogger.EV_LOGOUT,id:e,msg:DFLogger.getMessageText(a.MessageProcessor.logoutMessages)})}static performLogin(){const e={type:DFLogger.EV_LOGIN,id:game.user.id,msg:DFLogger.getMessageText(a.MessageProcessor.loginMessages)};game.socket.emit(`module.${o.default.MOD_NAME}`,e),o.default.get(DFLogger.SETTING_NOT_ME)||DFLogger.onEvent(e)}static async onLogin(e){await DFLogger.displayMessage(game.users.get(e.id),DFLogger.LoginContent,e.msg)}static async onLogout(e){game.user.id!==e.id&&await DFLogger.displayMessage(game.users.get(e.id),DFLogger.LogoutContent,e.msg)}static cleanup(){DFLogger.Persist||game.messages.forEach((async e=>{if(!e.isAuthor)return;const t=e.data.speaker.alias;t!==DFLogger.LoginContent&&t!==DFLogger.LogoutContent||await e.delete()}))}}DFLogger.EV_LOGIN="login",DFLogger.EV_LOGOUT="logout",DFLogger.SETTING_GM_ONLY="gm-only",DFLogger.SETTING_NOT_ME="not-me",DFLogger.SETTING_SELF_DESTRUCT="self-destruct",DFLogger.SETTING_DELAY="delay",DFLogger.SETTING_SOUND="sound"},(e,t,s)=>{s.r(t),s.d(t,{MessageProcessor:()=>MessageProcessor});class MessageProcessor{static loadMessages(){return this.messageLoadJob=new Promise((async(e,t)=>{const s=await fetch("user-logger-messages.json");if(s.ok){const e=await s.json().catch((e=>console.error(`Failed to read JSON for messages.json\n${e}`)));this.loginMessages=e.login,this.logoutMessages=e.logout}else{if(404!==s.status)return void t(new Error("Could not access the messages file from server side"));await this.initializeMessages(),await this.saveMessages()}e()})),this.messageLoadJob}static async saveMessages(){const e=new File([JSON.stringify({login:this.loginMessages,logout:this.logoutMessages})],"user-logger-messages.json",{type:"application/json"});if(!(await FilePicker.upload("data","",e)).path)throw new Error("Could not upload the login.json to server")}static async initializeMessages(){const e=game.i18n.translations["DF-LOGGER"];for(const t of e.LoginMsg)this.loginMessages.push({tog:!0,msg:t});for(const t of e.LogoutMsg)this.logoutMessages.push({tog:!0,msg:t})}}MessageProcessor.messageLoadJob=null,MessageProcessor.loginMessages=[],MessageProcessor.logoutMessages=[]},(e,t,s)=>{s.r(t),s.d(t,{default:()=>SETTINGS});class SETTINGS{static init(e){this.MOD_NAME=e,String.prototype.localize||(String.prototype.localize=function(){return game.i18n.localize(this.valueOf())})}static register(e,t){game.settings.register(SETTINGS.MOD_NAME,e,t)}static registerMenu(e,t){game.settings.registerMenu(SETTINGS.MOD_NAME,e,t)}static get(e){return game.settings.get(SETTINGS.MOD_NAME,e)}static async set(e,t){return await game.settings.set(SETTINGS.MOD_NAME,e,t)}static default(e){return game.settings.settings.get(SETTINGS.MOD_NAME+"."+e).default}static typeOf(){return Object}}},(e,t,s)=>{s.r(t),s.d(t,{default:()=>DFLoggerMenu});var a=s(2);class DFLoggerMenu extends FormApplication{static get defaultOptions(){return mergeObject(super.defaultOptions,{editable:!0,resizable:!0,submitOnChange:!1,submitOnClose:!1,closeOnSubmit:!0,width:600,height:500,title:"DF-LOGGER.ManageMenu.Title".localize(),tabs:[{navSelector:".tabs",contentSelector:"main",initial:"login"}],template:"modules/df-logger/templates/message-manage.hbs"})}async _updateObject(e,t){const s=this.element.find('div[data-tab="login"]>div.message-entry'),o=[];s.each(((e,t)=>{o.push({tog:t.querySelector('input[type="checkbox"]').checked,msg:t.querySelector('input[type="text"]').value})}));const g=this.element.find('div[data-tab="logout"]>div.message-entry'),r=[];g.each(((e,t)=>{r.push({tog:t.querySelector('input[type="checkbox"]').checked,msg:t.querySelector('input[type="text"]').value})})),a.MessageProcessor.loginMessages=o,a.MessageProcessor.logoutMessages=r,await a.MessageProcessor.saveMessages()}getData(e){return{login:a.MessageProcessor.loginMessages,logout:a.MessageProcessor.logoutMessages}}activateListeners(e){e.find("div.message-entry").each(((e,t)=>this._processEntry($(t)))),e.find('button[name="add"]').on("click",(async()=>{const t=$(await renderTemplate("modules/df-logger/templates/message-template.hbs",{tog:!0,msg:""}));this._processEntry(t),e.find("div.tab.active").append(t)})),e.find('button[name="reset"]').on("click",(async()=>{Dialog.confirm({title:"DF-LOGGER.ManageMenu.Confirm.Title".localize(),content:"DF-LOGGER.ManageMenu.Confirm.Content".localize(),defaultYes:!1,yes:async()=>{a.MessageProcessor.loginMessages=[],a.MessageProcessor.logoutMessages=[],await a.MessageProcessor.initializeMessages(),await this.render(!0)}})}))}_processEntry(e){const t=e.find('input[type="text"]');e.find('input[type="checkbox"]').on("change",(e=>{e.currentTarget.checked?t.removeAttr("disabled"):t.attr("disabled","")})),e.find("button").on("click",(e=>{$(e.currentTarget).parent(".message-entry").remove()}))}}}],t={};function __webpack_require__(s){var a=t[s];if(void 0!==a)return a.exports;var o=t[s]={exports:{}};return e[s](o,o.exports,__webpack_require__),o.exports}__webpack_require__.d=(e,t)=>{for(var s in t)__webpack_require__.o(t,s)&&!__webpack_require__.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};(()=>{__webpack_require__.r(s);var e=__webpack_require__(1),t=__webpack_require__(4),a=__webpack_require__(2),o=__webpack_require__(3);o.default.init("df-logger"),Hooks.once("init",(function(){o.default.registerMenu("message-manage",{restricted:!0,type:t.default,label:"DF-LOGGER.Settings.ManageMessages",icon:"fas fa-comment-alt"}),o.default.register(e.default.SETTING_SOUND,{name:"DF-LOGGER.Settings.Sound_Name",hint:"DF-LOGGER.Settings.Sound_Hint",scope:"world",config:!0,type:String,default:"modules/df-logger/sounds/chime.mp3",filePicker:"audio"}),o.default.register(e.default.SETTING_GM_ONLY,{name:"DF-LOGGER.Settings.GmOnly_Name",hint:"DF-LOGGER.Settings.GmOnly_Hint",scope:"world",config:!0,type:Boolean,default:!1}),o.default.register(e.default.SETTING_SELF_DESTRUCT,{name:"DF-LOGGER.Settings.SelfDestruct_Name",hint:"DF-LOGGER.Settings.SelfDestruct_Hint",scope:"world",config:!0,type:Boolean,default:!0}),o.default.register(e.default.SETTING_DELAY,{name:"DF-LOGGER.Settings.Delay_Name",hint:"DF-LOGGER.Settings.Delay_Hint",scope:"client",config:!0,type:Number,default:15,range:{min:1,max:30,step:1}}),o.default.register(e.default.SETTING_NOT_ME,{name:"DF-LOGGER.Settings.NotMe_Name",hint:"DF-LOGGER.Settings.NotMe_Hint",scope:"client",config:!0,type:Boolean,default:!1}),game.socket.on(`module.${o.default.MOD_NAME}`,e.default.onEvent),game.socket.on("userActivity",e.default.onUserActivity)})),Hooks.once("ready",(async function(){await a.MessageProcessor.loadMessages(),e.default.cleanup(),e.default.performLogin()}))})()})();
//# sourceMappingURL=main.js.map