{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///./src/DFLogger.ts","webpack:///./src/MessageProcessor.ts","webpack:///../common/Settings.ts","webpack:///./src/DFLoggerMenu.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/df-logger.ts"],"sourcesContent":["import { Message, MessageProcessor } from \"./MessageProcessor\";\nimport SETTINGS from \"../../common/Settings\";\n\ninterface Payload {\n\ttype: string,\n\tid: string,\n\tmsg: string\n}\n\nexport default class DFLogger {\n\tstatic EV_LOGIN = 'login';\n\tstatic EV_LOGOUT = 'logout';\n\tstatic SETTING_GM_ONLY = 'gm-only';\n\tstatic SETTING_NOT_ME = 'not-me';\n\tstatic SETTING_SELF_DESTRUCT = 'self-destruct';\n\tstatic SETTING_DELAY = 'delay';\n\tstatic SETTING_SOUND = 'sound';\n\tstatic get Persist() { return !SETTINGS.get(DFLogger.SETTING_SELF_DESTRUCT); }\n\tstatic get LoginContent() { return game.i18n.localize('DF-LOGGER.Content.Login' + (DFLogger.Persist ? '_Persist' : '')); }\n\tstatic get LogoutContent() { return game.i18n.localize('DF-LOGGER.Content.Logout' + (DFLogger.Persist ? '_Persist' : '')); }\n\n\tstatic getMessageText(messages: Message[]): string {\n\t\tmessages = messages.filter(x => x.tog);\n\t\treturn messages[Math.round(Math.random() * (messages.length * 100)) % messages.length].msg;\n\t}\n\n\tstatic async displayMessage(user: User, alias: any, msg: string) {\n\t\tconst chatMsg = await ChatMessage.create({\n\t\t\tsound: SETTINGS.get<string>(DFLogger.SETTING_SOUND),\n\t\t\tcontent: msg.replace(/\\{\\{username\\}\\}/g, user.name),\n\t\t\tspeaker: {\n\t\t\t\tscene: null,\n\t\t\t\tactor: null,\n\t\t\t\ttoken: null,\n\t\t\t\talias: alias\n\t\t\t},\n\t\t\twhisper: [game.user.id],\n\t\t\ttype: CONST.CHAT_MESSAGE_TYPES.OOC\n\t\t});\n\n\t\tif (!DFLogger.Persist) {\n\t\t\tsetTimeout(async () => {\n\t\t\t\tawait chatMsg.delete();\n\t\t\t}, Math.round(SETTINGS.get<number>('delay') * 1000));\n\t\t}\n\t}\n\n\tstatic onEvent(data: Payload) {\n\t\t// ignore message if GM-Only and we are not a GM\n\t\tif (SETTINGS.get(DFLogger.SETTING_GM_ONLY) && !game.user.isGM) return;\n\t\tif (data.type === DFLogger.EV_LOGIN) DFLogger.onLogin(data);\n\t\telse if (data.type === DFLogger.EV_LOGOUT) DFLogger.onLogout(data);\n\t}\n\tstatic onUserActivity(userId: string, activityData: { active?: boolean } = {}) {\n\t\tif (!(\"active\" in activityData) || activityData.active === true) return;\n\t\tDFLogger.onLogout({\n\t\t\ttype: DFLogger.EV_LOGOUT,\n\t\t\tid: userId,\n\t\t\tmsg: DFLogger.getMessageText(MessageProcessor.logoutMessages)\n\t\t});\n\t}\n\n\tstatic performLogin() {\n\t\tconst payload: Payload = {\n\t\t\ttype: DFLogger.EV_LOGIN,\n\t\t\tid: game.user.id,\n\t\t\tmsg: DFLogger.getMessageText(MessageProcessor.loginMessages)\n\t\t};\n\t\tgame.socket.emit(`module.${SETTINGS.MOD_NAME}`, payload);\n\t\tif (!SETTINGS.get(DFLogger.SETTING_NOT_ME))\n\t\t\tDFLogger.onEvent(payload);\n\t}\n\n\tstatic async onLogin(data: Payload) {\n\t\tawait DFLogger.displayMessage(game.users.get(data.id), DFLogger.LoginContent, data.msg);\n\t}\n\n\tstatic async onLogout(data: Payload) {\n\t\t// do not display a logout message for ourselves\n\t\tif (game.user.id === data.id) return;\n\t\tawait DFLogger.displayMessage(game.users.get(data.id), DFLogger.LogoutContent, data.msg);\n\t}\n\n\tstatic cleanup() {\n\t\tif (DFLogger.Persist) return;\n\t\tgame.messages.forEach(async it => {\n\t\t\tif (!it.isAuthor) return;\n\t\t\tconst alias = it.data.speaker.alias;\n\t\t\tif (alias !== DFLogger.LoginContent && alias !== DFLogger.LogoutContent) return;\n\t\t\tawait it.delete();\n\t\t});\n\t}\n}\n","\nexport interface Message {\n\ttog: boolean;\n\tmsg: string;\n}\n\nexport class MessageProcessor {\n\n\tstatic messageLoadJob: Promise<void> = null;\n\tstatic loginMessages: Message[] = [];\n\tstatic logoutMessages: Message[] = [];\n\n\tstatic loadMessages(): Promise<void> {\n\t\tthis.messageLoadJob = new Promise(async (res, rej) => {\n\t\t\tconst response = await fetch('user-logger-messages.json');\n\t\t\tif (response.ok) {\n\t\t\t\tconst data = await response.json().catch(error => console.error(`Failed to read JSON for messages.json\\n${error}`));\n\t\t\t\tthis.loginMessages = data.login;\n\t\t\t\tthis.logoutMessages = data.logout;\n\t\t\t}\n\t\t\telse if (response.status === 404) {\n\t\t\t\tawait this.initializeMessages();\n\t\t\t\tawait this.saveMessages();\n\t\t\t}\n\t\t\telse {\n\t\t\t\trej(new Error('Could not access the messages file from server side'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tres();\n\t\t});\n\t\treturn this.messageLoadJob;\n\t}\n\tstatic async saveMessages() {\n\t\t// Create the File and contents\n\t\tconst file = new File([JSON.stringify({\n\t\t\tlogin: this.loginMessages,\n\t\t\tlogout: this.logoutMessages\n\t\t})], 'user-logger-messages.json', { type: 'application/json' });\n\t\tconst response: { path?: string; message?: string } = <any>await FilePicker.upload('data', '', file);\n\t\tif (!response.path)\n\t\t\tthrow new Error('Could not upload the login.json to server');\n\t}\n\n\tstatic async initializeMessages() {\n\t\tconst i18n: { LoginMsg: string[], LogoutMsg: string[] } = <any>game.i18n.translations['DF-LOGGER'];\n\t\tfor (const msg of i18n.LoginMsg) {\n\t\t\tthis.loginMessages.push({ tog: true, msg });\n\t\t}\n\t\tfor (const msg of i18n.LogoutMsg) {\n\t\t\tthis.logoutMessages.push({ tog: true, msg });\n\t\t}\n\t}\n}","\ndeclare global {\n\tinterface LenientGlobalVariableTypes {\n\t\tgame: never;\n\t\tcanvas: never;\n\t}\n\tinterface String {\n\t\t/** Localizes the string via the global `game.i18n.localize()` function. */\n\t\tlocalize(): string\n\t}\n\ttype AnyFunction = (...args: any) => any;\n}\n\nexport default class SETTINGS {\n\tstatic MOD_NAME: string;\n\tstatic init(moduleName: string) {\n\t\tthis.MOD_NAME = moduleName;\n\t\tif (!String.prototype.localize) {\n\t\t\tString.prototype.localize = function () {\n\t\t\t\treturn game.i18n.localize(this.valueOf());\n\t\t\t};\n\t\t}\n\t}\n\tstatic register<T>(key: string, config: ClientSettings.PartialSetting<T>) { game.settings.register(SETTINGS.MOD_NAME, key, config); }\n\tstatic registerMenu(key: string, config: ClientSettings.PartialMenuSetting) { game.settings.registerMenu(SETTINGS.MOD_NAME, key, config); }\n\tstatic get<T>(key: string): T { return <T>game.settings.get(SETTINGS.MOD_NAME, key); }\n\tstatic async set<T>(key: string, value: T): Promise<T> { return await game.settings.set(SETTINGS.MOD_NAME, key, value); }\n\tstatic default<T>(key: string): T { return <T>game.settings.settings.get(SETTINGS.MOD_NAME + '.' + key).default; }\n\t/** helper for referencing a Typed constructor for the `type` field of a setting { type: SETTINGS.typeOf<MyClass>() } */\n\tstatic typeOf<T>(): ConstructorOf<T> { return Object as any; }\n}\n","import { Message, MessageProcessor } from \"./MessageProcessor\";\n\n\nexport default class DFLoggerMenu extends FormApplication {\n\tstatic get defaultOptions() {\n\t\treturn <any>mergeObject(super.defaultOptions as Partial<FormApplication.Options>, {\n\t\t\teditable: true,\n\t\t\tresizable: true,\n\t\t\tsubmitOnChange: false,\n\t\t\tsubmitOnClose: false,\n\t\t\tcloseOnSubmit: true,\n\t\t\twidth: 600,\n\t\t\theight: 500,\n\t\t\ttitle: 'DF-LOGGER.ManageMenu.Title'.localize(),\n\t\t\ttabs: [{ navSelector: \".tabs\", contentSelector: \"main\", initial: \"login\" }],\n\t\t\ttemplate: 'modules/df-logger/templates/message-manage.hbs'\n\t\t});\n\t}\n\n\tasync _updateObject(_event: Event, _formData?: object) {\n\t\tconst loginEntryElements = this.element.find('div[data-tab=\"login\"]>div.message-entry');\n\t\tconst loginEntries: Message[] = [];\n\t\tloginEntryElements.each((_, elem) => {\n\t\t\tloginEntries.push({\n\t\t\t\ttog: elem.querySelector<HTMLInputElement>('input[type=\"checkbox\"]').checked,\n\t\t\t\tmsg: elem.querySelector<HTMLInputElement>('input[type=\"text\"]').value\n\t\t\t});\n\t\t});\n\t\tconst logoutEntryElements = this.element.find('div[data-tab=\"logout\"]>div.message-entry');\n\t\tconst logoutEntries: Message[] = [];\n\t\tlogoutEntryElements.each((_, elem) => {\n\t\t\tlogoutEntries.push({\n\t\t\t\ttog: elem.querySelector<HTMLInputElement>('input[type=\"checkbox\"]').checked,\n\t\t\t\tmsg: elem.querySelector<HTMLInputElement>('input[type=\"text\"]').value\n\t\t\t});\n\t\t});\n\t\tMessageProcessor.loginMessages = loginEntries;\n\t\tMessageProcessor.logoutMessages = logoutEntries;\n\t\tawait MessageProcessor.saveMessages();\n\t}\n\n\tgetData(_options?: Application.RenderOptions): any {\n\t\treturn {\n\t\t\tlogin: MessageProcessor.loginMessages,\n\t\t\tlogout: MessageProcessor.logoutMessages\n\t\t};\n\t}\n\n\t/** @override */\n\tactivateListeners(html: JQuery<HTMLElement>) {\n\t\thtml.find('div.message-entry').each((_, elem) => this._processEntry($(elem)));\n\t\thtml.find('button[name=\"add\"]').on('click', async () => {\n\t\t\tconst entry = $(await renderTemplate('modules/df-logger/templates/message-template.hbs', { tog: true, msg: '' }));\n\t\t\tthis._processEntry(entry);\n\t\t\thtml.find('div.tab.active').append(entry);\n\t\t});\n\t\thtml.find('button[name=\"reset\"]').on('click', async () => {\n\t\t\tDialog.confirm({\n\t\t\t\ttitle: 'DF-LOGGER.ManageMenu.Confirm.Title'.localize(),\n\t\t\t\tcontent: 'DF-LOGGER.ManageMenu.Confirm.Content'.localize(),\n\t\t\t\tdefaultYes: false,\n\t\t\t\tyes: async () => {\n\t\t\t\t\tMessageProcessor.loginMessages = [];\n\t\t\t\t\tMessageProcessor.logoutMessages = [];\n\t\t\t\t\tawait MessageProcessor.initializeMessages();\n\t\t\t\t\tawait this.render(true);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _processEntry(element: JQuery<HTMLElement>) {\n\t\tconst textBlock = element.find('input[type=\"text\"]');\n\t\telement.find('input[type=\"checkbox\"]').on('change', (event) => {\n\t\t\tconst input = event.currentTarget as HTMLInputElement;\n\t\t\tif (input.checked) textBlock.removeAttr('disabled');\n\t\t\telse textBlock.attr('disabled', '');\n\t\t});\n\t\telement.find('button').on('click', (event: JQuery.ClickEvent) => {\n\t\t\t$(event.currentTarget).parent('.message-entry').remove();\n\t\t});\n\t}\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import DFLogger from './DFLogger';\nimport DFLoggerMenu from './DFLoggerMenu';\nimport { MessageProcessor } from './MessageProcessor';\nimport SETTINGS from \"../../common/Settings\";\n\nSETTINGS.init('df-logger');\n\nHooks.once('init', function () {\n\tSETTINGS.registerMenu('message-manage', {\n\t\trestricted: true,\n\t\ttype: DFLoggerMenu,\n\t\tlabel: 'DF-LOGGER.Settings.ManageMessages',\n\t\ticon: 'fas fa-comment-alt'\n\t});\n\tSETTINGS.register<string>(DFLogger.SETTING_SOUND, {\n\t\tname: 'DF-LOGGER.Settings.Sound_Name',\n\t\thint: 'DF-LOGGER.Settings.Sound_Hint',\n\t\tscope: 'world',\n\t\tconfig: true,\n\t\ttype: String,\n\t\tdefault: 'modules/df-logger/sounds/chime.mp3',\n\t\tfilePicker: 'audio'\n\t});\n\n\tSETTINGS.register(DFLogger.SETTING_GM_ONLY, {\n\t\tname: \"DF-LOGGER.Settings.GmOnly_Name\",\n\t\thint: \"DF-LOGGER.Settings.GmOnly_Hint\",\n\t\tscope: \"world\",\n\t\tconfig: true,\n\t\ttype: Boolean,\n\t\tdefault: false,\n\t});\n\tSETTINGS.register(DFLogger.SETTING_SELF_DESTRUCT, {\n\t\tname: \"DF-LOGGER.Settings.SelfDestruct_Name\",\n\t\thint: \"DF-LOGGER.Settings.SelfDestruct_Hint\",\n\t\tscope: \"world\",\n\t\tconfig: true,\n\t\ttype: Boolean,\n\t\tdefault: true\n\t});\n\tSETTINGS.register<number>(DFLogger.SETTING_DELAY, {\n\t\tname: \"DF-LOGGER.Settings.Delay_Name\",\n\t\thint: \"DF-LOGGER.Settings.Delay_Hint\",\n\t\tscope: \"client\",\n\t\tconfig: true,\n\t\ttype: Number,\n\t\tdefault: 15,\n\t\trange: {\n\t\t\tmin: 1,\n\t\t\tmax: 30,\n\t\t\tstep: 1\n\t\t}\n\t});\n\tSETTINGS.register(DFLogger.SETTING_NOT_ME, {\n\t\tname: \"DF-LOGGER.Settings.NotMe_Name\",\n\t\thint: \"DF-LOGGER.Settings.NotMe_Hint\",\n\t\tscope: \"client\",\n\t\tconfig: true,\n\t\ttype: Boolean,\n\t\tdefault: false,\n\t});\n\n\t// register our socket events receiver\n\tgame.socket.on(`module.${SETTINGS.MOD_NAME}`, DFLogger.onEvent);\n\tgame.socket.on('userActivity', DFLogger.onUserActivity);\n});\n\nHooks.once('ready', async function () {\n\tawait MessageProcessor.loadMessages();\n\n\t// remove any log messages that didn't get cleaned before we left (if any)\n\tDFLogger.cleanup();\n\n\t// Emit our login event to the socket\n\tDFLogger.performLogin();\n});"],"names":["DFLogger","Persist","SETTING_SELF_DESTRUCT","LoginContent","game","i18n","localize","LogoutContent","static","messages","filter","x","tog","Math","round","random","length","msg","user","alias","chatMsg","ChatMessage","create","sound","SETTING_SOUND","content","replace","name","speaker","scene","actor","token","whisper","id","type","CONST","CHAT_MESSAGE_TYPES","OOC","setTimeout","async","delete","data","SETTING_GM_ONLY","isGM","EV_LOGIN","onLogin","EV_LOGOUT","onLogout","userId","activityData","active","getMessageText","MessageProcessor","payload","socket","emit","SETTING_NOT_ME","onEvent","displayMessage","users","get","forEach","it","isAuthor","SETTING_DELAY","this","messageLoadJob","Promise","res","rej","response","fetch","ok","json","catch","error","console","loginMessages","login","logoutMessages","logout","status","Error","initializeMessages","saveMessages","file","File","JSON","stringify","FilePicker","upload","path","translations","LoginMsg","push","LogoutMsg","SETTINGS","moduleName","MOD_NAME","String","prototype","valueOf","key","config","settings","register","registerMenu","value","set","default","Object","DFLoggerMenu","FormApplication","defaultOptions","mergeObject","super","editable","resizable","submitOnChange","submitOnClose","closeOnSubmit","width","height","title","tabs","navSelector","contentSelector","initial","template","_event","_formData","loginEntryElements","element","find","loginEntries","each","_","elem","querySelector","checked","logoutEntryElements","logoutEntries","getData","_options","activateListeners","html","_processEntry","$","on","entry","renderTemplate","append","Dialog","confirm","defaultYes","yes","render","textBlock","event","currentTarget","removeAttr","attr","parent","remove","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","o","defineProperty","enumerable","obj","prop","hasOwnProperty","call","r","Symbol","toStringTag","Hooks","once","restricted","label","icon","hint","scope","filePicker","Boolean","Number","range","min","max","step"],"sourceRoot":""}