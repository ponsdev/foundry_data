{"version":3,"sources":["node_modules/browser-pack/_prelude.js","FVTT-Common/src/module/Handlebars.ts","FVTT-Common/src/module/ModuleSettings.ts","FVTT-Common/src/module/settings-app/SettingsApp.ts","src/module/Constants.ts","src/module/Handlebars.ts","src/module/Main.ts","src/module/Setup.ts","src/module/filter/EqualityType.ts","src/module/filter/FilterGroup.ts","src/module/filter/Operation/ArrayIncludesFilter.ts","src/module/filter/Operation/NumberFilter.ts","src/module/filter/Operation/StringFilter.ts","src/module/filter/Operation/WeightedFilter.ts","src/module/loot-app/Filters.ts","src/module/loot-app/Flags.ts","src/module/loot-app/Formatting.ts","src/module/loot-app/LootApp.ts","src/module/loot-app/Utilities.ts","src/module/loot-app/data/Materials.ts","src/module/loot-app/data/Runes.ts","src/module/loot-app/source/Consumable.ts","src/module/loot-app/source/DataSource.ts","src/module/loot-app/source/Permanent.ts","src/module/loot-app/source/RollableTables.ts","src/module/loot-app/source/Spells.ts","src/module/loot-app/source/Treasure.ts","src/types/PF2E.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface HandlebarsContext {\n    data: Record<string, any> & {\n        root: Record<string, any>;\n    };\n    hash?: Record<string, any>;\n    // contents of block\n    fn?: (context: any) => string;\n    // contents of else block\n    inverse?: () => string;\n    loc?: {\n        start: { line: number; column: number };\n        end: { line: number; column: number };\n    };\n    name?: string;\n}\n\nexport function registerHelpers() {\n    // absolute equality check\n    Handlebars.registerHelper('ifeq', function (this: HandlebarsContext, a: any, b: any, options: HandlebarsContext) {\n        if (a === b) {\n            if (!options.fn) {\n                return '';\n            }\n            return options.fn(this);\n        } else {\n            if (!options.inverse) {\n                return '';\n            }\n            return options.inverse();\n        }\n    });\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SettingsApp from './settings-app/SettingsApp';\nimport { registerHelpers } from './Handlebars';\nimport { registerHandlebarsTemplates } from '../../../src/module/Handlebars';\n\n// TODO: Localization of strings in this file.\n\nconst MENU_KEY = 'SETTINGS_MENU';\n\nexport type IFeatureInputType = 'checkbox' | 'number' | 'text' | 'file';\nexport interface IFeatureAttribute {\n    icon: string;\n    title: string;\n}\nexport interface IFeatureInput {\n    name: string;\n    label: string;\n    type: IFeatureInputType;\n    help?: string;\n    value: any;\n    max?: number;\n    min?: number;\n}\nexport interface IFeatureRegistration {\n    name: string;\n    type: BooleanConstructor | NumberConstructor | StringConstructor;\n    default: any;\n    onChange?: (value: any) => void;\n}\nexport type HookCallback = () => void;\nexport interface IFeatureDefinition {\n    id: string;\n    title: string;\n    attributes?: IFeatureAttribute[];\n    description: string;\n    default?: boolean;\n    inputs: IFeatureInput[];\n    register: IFeatureRegistration[];\n    help?: string;\n    onReady?: HookCallback;\n    onInit?: HookCallback;\n    onSetup?: HookCallback;\n}\n\nexport const ATTR_RELOAD_REQUIRED: IFeatureAttribute = {\n    icon: 'fas fa-sync',\n    title: 'Reload Required',\n};\nexport const ATTR_REOPEN_SHEET_REQUIRED: IFeatureAttribute = {\n    icon: 'fas fa-sticky-note',\n    title: 'Sheets must be closed and re-opened.',\n};\n\nexport interface ModuleSettingsArgs {\n    moduleName: string;\n    moduleTitle: string;\n    features: IFeatureDefinition[];\n}\n\n// TODO: This can be a generic class so we have correctly typed features.\nexport default class ModuleSettings {\n    protected static _instance: ModuleSettings;\n    public static get instance() {\n        return this._instance;\n    }\n\n    public static initialize(options: ModuleSettingsArgs) {\n        this._instance = new ModuleSettings(options);\n        this._instance.registerAllSettings();\n\n        registerHelpers();\n\n        Hooks.on('init', () => ModuleSettings.instance.onInit());\n        Hooks.on('setup', () => ModuleSettings.instance.onSetup());\n        Hooks.on('ready', () => ModuleSettings.instance.onReady());\n    }\n\n    protected constructor(options: ModuleSettingsArgs) {\n        this._moduleName = options.moduleName;\n        this._moduleTitle = options.moduleTitle;\n        this._features = options.features;\n    }\n\n    protected _moduleName: string;\n    protected _moduleTitle: string;\n    protected _features: IFeatureDefinition[];\n\n    public get moduleName() {\n        return this._moduleName;\n    }\n\n    public get moduleTitle() {\n        return this._moduleTitle;\n    }\n\n    public get features() {\n        return duplicate(this._features) as IFeatureDefinition[];\n    }\n\n    /**\n     * Retrieve a setting from the store.\n     * @param key They key the setting resides at.\n     */\n    public get<T = any>(key: string): T {\n        return (game as Game).settings.get(this._moduleName, key) as T;\n    }\n\n    /**\n     * Set the value of a setting in the store.\n     * @param key The key the setting resides at.\n     * @param value The value the setting should be set to.\n     */\n    public async set(key: string, value: any) {\n        return (game as Game).settings.set(this._moduleName, key, value);\n    }\n\n    /**\n     * Register a setting with the store.\n     * @param key The key the setting should reside at.\n     * @param value The default value of the setting.\n     */\n    public reg(key: string, value: any) {\n        (game as Game).settings.register(this._moduleName, key, value);\n    }\n\n    /**\n     * Binds on init hooks for each feature that has them.\n     */\n    public onInit() {\n        for (const feature of this._features) {\n            if (feature.onInit && this.get(feature.id)) {\n                feature.onInit();\n            }\n        }\n    }\n\n    /**\n     * Binds on setup hooks for each feature that has them.\n     */\n    public onSetup() {\n        for (const feature of this._features) {\n            if (feature.onSetup && this.get(feature.id)) {\n                feature.onSetup();\n            }\n        }\n    }\n\n    /**\n     * Binds on ready hooks for each feature that has them.\n     */\n    public onReady() {\n        for (const feature of this._features) {\n            if (feature.onReady && this.get(feature.id)) {\n                feature.onReady();\n            }\n        }\n    }\n\n    /**\n     * Registers all game settings for the application.\n     */\n    protected registerAllSettings() {\n        for (const feature of this._features) {\n            // Register the feature toggle\n            const enabled = {\n                name: feature.id,\n                scope: 'world',\n                type: Boolean,\n                default: feature.default ?? false,\n                config: false,\n                restricted: true,\n            };\n            this.reg(feature.id, enabled);\n\n            // Register any other settings values for a feature.\n            for (const registration of feature.register) {\n                const setting = {\n                    name: registration.name,\n                    scope: 'world',\n                    type: registration.type,\n                    default: registration.default,\n                    config: false,\n                    restricted: true,\n                    onChange: registration.onChange,\n                };\n                this.reg(registration.name, setting);\n            }\n        }\n\n        const templatePaths = [\n            `templates/settings-app/SettingsApp.html`,\n            `templates/settings-app/tabs/About.html`,\n            `templates/settings-app/tabs/Features.html`,\n            `templates/settings-app/tabs/License.html`,\n        ].map((path: string) => `modules/${this._moduleName}/${path}`);\n        loadTemplates(templatePaths);\n\n        (game as Game).settings.registerMenu(this._moduleName, MENU_KEY, {\n            name: 'Settings',\n            label: 'Settings',\n            hint: 'Configure enabled features and other options, view the license, and see the about section to learn more about my modules.',\n            icon: 'fas fa-cogs',\n            type: SettingsApp,\n            restricted: true,\n        });\n    }\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MODULE_NAME } from '../../../../src/module/Constants';\nimport ModuleSettings, { ATTR_RELOAD_REQUIRED } from '../ModuleSettings';\n\nexport default class SettingsApp extends FormApplication<FormApplication.Options, any, any> {\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.title = game.i18n.localize(ModuleSettings.instance.moduleTitle);\n        options.template = `modules/${ModuleSettings.instance.moduleName}/templates/settings-app/SettingsApp.html`;\n        options.classes = options.classes ?? [];\n        options.classes = [...options.classes, 'dj-settings-app', 'settings-app'];\n        options.tabs = [\n            {\n                navSelector: `.settings-app-nav`,\n                contentSelector: `.settings-app-body`,\n                initial: `about`,\n            },\n        ];\n        options.width = 600;\n        options.height = 800;\n        return options;\n    }\n\n    constructor(object?: object, options?: FormApplication.Options) {\n        if (object === undefined) {\n            object = {};\n        }\n        super(object, options);\n    }\n\n    getData(options?: object) {\n        const renderData: Record<string, any> = super.getData(options);\n\n        renderData['tabs'] = [\n            `modules/${ModuleSettings.instance.moduleName}/templates/settings-app/tabs/About.html`,\n            `modules/${ModuleSettings.instance.moduleName}/templates/settings-app/tabs/Features.html`,\n            `modules/${ModuleSettings.instance.moduleName}/templates/settings-app/tabs/License.html`,\n        ];\n\n        let features = ModuleSettings.instance.features;\n        for (const setting of features) {\n            setting.inputs.unshift({\n                name: setting.id,\n                label: 'Enable',\n                type: 'checkbox',\n                value: true, // remember will be overridden below\n            });\n\n            for (const input of setting.inputs) {\n                input['value'] = ModuleSettings.instance.get(input.name);\n            }\n        }\n        renderData['features'] = features;\n\n        return renderData;\n    }\n\n    protected async _updateObject(event: Event, formData: any): Promise<void> {\n        let shouldReload = false;\n        const features = ModuleSettings.instance.features;\n        for (const [key, newValue] of Object.entries(formData)) {\n            const oldValue = ModuleSettings.instance.get(key);\n            await ModuleSettings.instance.set(key, newValue);\n\n            if (oldValue !== newValue) {\n                const reloadRequired = features.find((feature) => feature.id === key)?.attributes?.includes(ATTR_RELOAD_REQUIRED) ?? false;\n                shouldReload = shouldReload || reloadRequired;\n            }\n        }\n\n        if (shouldReload) {\n            if (confirm('The Foundry window must be refreshed before some settings are applied. Refresh now?')) {\n                window.location = window.location;\n            }\n        }\n    }\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const MODULE_NAME = `pf2e-lootgen`;\nexport const MODULE_TITLE = `PF2E Loot Generator`;\nexport const PF2E_LOOT_SHEET_NAME = `LootSheetPF2e`;\nexport const ITEM_ID_LENGTH = 16;\n\nexport const TOOLBOX_NAME = `pf2e-toolbox`;\nexport const QUICK_MYSTIFY = `ENABLE_QUICK_MYSTIFY`;\n","/*\n * Copyright 2022 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MODULE_NAME } from './Constants';\nimport { GenType } from './loot-app/source/DataSource';\nimport { numericCommas } from './loot-app/Formatting';\nimport { HandlebarsContext } from '../../FVTT-Common/src/module/Handlebars';\n\nexport async function registerHandlebarsTemplates() {\n    const templatePath = (path: string) => `modules/${MODULE_NAME}/${path}`;\n\n    const partials: Record<string, string> = {\n        'weight-range': `templates/loot-app/partials/weight-range.html`,\n        'tab-buttons': `templates/loot-app/tabs/partials/tab-buttons.html`,\n        'create-select': `templates/loot-app/tabs/partials/create-select.html`,\n        'rune-stats': `templates/loot-app/tabs/partials/rune-stats.html`,\n        'property-runes': `templates/loot-app/tabs/partials/property-runes.html`,\n        'final-info': `templates/loot-app/tabs/partials/final-info.html`,\n        'collapsible': `templates/loot-app/partials/collapsible.html`,\n    };\n\n    const templatePaths = [\n        `templates/settings-app/SettingsApp.html`,\n        `templates/settings-app/tabs/About.html`,\n        `templates/settings-app/tabs/Features.html`,\n        `templates/settings-app/tabs/License.html`,\n\n        `templates/loot-app/inventory.html`,\n        `templates/loot-app/sidebar.html`,\n        `templates/loot-app/partials/loot-profile.html`,\n\n        `templates/loot-app/tabs/settings.html`,\n\n        `templates/loot-app/tabs/create/index.html`,\n        `templates/loot-app/tabs/create/weapon.html`,\n        `templates/loot-app/tabs/create/armor.html`,\n        `templates/loot-app/tabs/create/shield.html`,\n\n        `templates/chat/table-output.html`,\n\n        ...Object.values(GenType).map((type) => `templates/loot-app/tabs/${type}.html`),\n        ...Object.values(partials),\n    ].map(templatePath);\n\n    for (const [key, value] of Object.entries(partials)) {\n        Handlebars.registerPartial(key, `{{> ${templatePath(value)} }}`);\n    }\n\n    await loadTemplates(templatePaths);\n}\n\nexport function registerHandlebarsHelpers() {\n    // stringify the object provided.\n    Handlebars.registerHelper('json', (data: any) => {\n        return JSON.stringify(data);\n    });\n    // object exists and is not null or empty\n    Handlebars.registerHelper('defined', (data: any) => {\n        return data !== undefined && data !== null && data !== '';\n    });\n    // use the provided value if it exists, otherwise default to the fallback.\n    Handlebars.registerHelper('default', (value: any, defaultValue: any) => {\n        return value === undefined || value === null ? defaultValue : value;\n    });\n    // separate hundreds groups in numbers with commas\n    Handlebars.registerHelper('numeric-commas', (a: string | number | undefined) => {\n        if (!a) return undefined;\n        return numericCommas(a);\n    });\n    // round a number or return other values\n    Handlebars.registerHelper('round', (a: any) => {\n        if (typeof a === 'number') {\n            return Math.round(a);\n        }\n        return a;\n    });\n\n    // assorted helpers for dealing with equality in templates\n    Handlebars.registerHelper('eq', (lhs: any, rhs: any, context: HandlebarsContext) => {\n        return lhs === rhs;\n    });\n    Handlebars.registerHelper('lt', (lhs: number, rhs: number, context: HandlebarsContext) => {\n        return lhs < rhs;\n    });\n    Handlebars.registerHelper('gt', (lhs: number, rhs: number, context: HandlebarsContext) => {\n        return lhs > rhs;\n    });\n    Handlebars.registerHelper('lteq', (lhs: number, rhs: number, context: HandlebarsContext) => {\n        return lhs <= rhs;\n    });\n    Handlebars.registerHelper('gteq', (lhs: number, rhs: number, context: HandlebarsContext) => {\n        return lhs >= rhs;\n    });\n\n    /**\n     * Walk an object tree. Mostly exists for convenience so lookup does not need to be chained.\n     * @param data The data to walk over.\n     * @param path The data path to walk.\n     * @param context The handlebars context where this is being called.\n     */\n    const walk = (data: Record<string, any>, path: string, context: HandlebarsContext) => {\n        let current = data;\n        const parts = path.split('.');\n        while (parts.length > 0) {\n            let key = parts.shift() as string;\n\n            if (context.hash && key.startsWith('$')) {\n                key = context.hash[key.substr(1)];\n            }\n            current = current[key];\n\n            if (current === null || current === undefined) {\n                return undefined;\n            }\n        }\n        return current;\n    };\n    Handlebars.registerHelper('walk', walk);\n\n    // When working with keys in the partial system, append the module name\n    //  so we have a lower chance of overwriting or deleting another modules\n    //  registered partials.\n    const blockKey = (key: string) => `${MODULE_NAME}-${key}`;\n\n    /**\n     * Set a block, so the next call to get-block renders the provided content.\n     * @param name The name of the block to set.\n     * @param parentContext The handlebars context where the block is being set.\n     */\n    const setBlock = (name: string, parentContext: HandlebarsContext) => {\n        Handlebars.registerPartial(blockKey(name), (childContext: HandlebarsContext) => {\n            return parentContext.fn!(mergeObject(parentContext, childContext));\n        });\n    };\n    /**\n     * Get and render a block by it's name.\n     * @param name The name of the block.\n     * @param context The handlebars context where this block is rendering.\n     */\n    const getBlock = (name: string, context: HandlebarsContext) => {\n        const loadPartial = (name: string) => {\n            let partial = Handlebars.partials[name];\n            if (typeof partial === 'string') {\n                partial = Handlebars.compile(partial);\n                Handlebars.partials[name] = partial;\n            }\n            return partial;\n        };\n\n        const partial = loadPartial(blockKey(name)) || context.fn;\n        // @ts-ignore\n        return partial(this, { data: context.hash });\n    };\n    /**\n     * Unset a block template. It is important to unset so later calls to\n     *  a template do not re-render old data where it does not belong.\n     * @param name The name of the block to delete.\n     */\n    const delBlock = (name: string) => {\n        Handlebars.unregisterPartial(blockKey(name));\n    };\n\n    Handlebars.registerHelper('set-block', setBlock);\n    Handlebars.registerHelper('del-block', delBlock);\n    Handlebars.registerHelper('get-block', getBlock);\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { setup } from './Setup';\n\nsetup();\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ModuleSettings, { IFeatureDefinition } from '../../FVTT-Common/src/module/ModuleSettings';\nimport { MODULE_NAME, MODULE_TITLE } from './Constants';\nimport { registerHandlebarsHelpers, registerHandlebarsTemplates } from './Handlebars';\nimport { extendLootSheet } from './loot-app/LootApp';\nimport { FLAGS_KEY } from './loot-app/Flags';\n\nexport const FEATURE_ALLOW_MERGING = 'allow-merging';\n\nexport const FEATURE_QUICK_ROLL_MODIFIERS = 'quick-roll-modifiers-enabled';\nexport const FEATURE_QUICK_ROLL_CONTROL = 'quick-roll-control-count';\nexport const FEATURE_QUICK_ROLL_SHIFT = 'quick-roll-shift-count';\n\nexport const FEATURE_OUTPUT_LOOT_ROLLS = 'output-loot-rolls';\nexport const FEATURE_OUTPUT_LOOT_ROLLS_WHISPER = 'output-loot-rolls-whisper';\n\n// TODO: Localization\nexport const FEATURES: IFeatureDefinition[] = [\n    {\n        id: FEATURE_ALLOW_MERGING,\n        title: 'Merge When Generating',\n        attributes: [],\n        description:\n            'If this setting is enabled, PF2E Lootgen will attempt to merge generated items into' +\n            ' existing stacks on the actor. If this setting is disabled, new stacks will still merge but not' +\n            ' merge with existing items.',\n        inputs: [],\n        register: [],\n        help:\n            'PF2E Lootgen will not check for modifications on existing items, so if you expect to change' +\n            ' them this may result in improper treasure values, item descriptions, etc. for generated items.',\n    },\n    {\n        id: FEATURE_QUICK_ROLL_MODIFIERS,\n        title: 'Quick Roll Key Modifiers',\n        attributes: [],\n        description: 'When a key is held when using the quick roll buttons on the loot generator, these settings determine how many items should be rolled.',\n        inputs: [\n            {\n                name: FEATURE_QUICK_ROLL_CONTROL,\n                label: 'Control',\n                type: 'number',\n                value: 10,\n                min: 1,\n            },\n            {\n                name: FEATURE_QUICK_ROLL_SHIFT,\n                label: 'Shift',\n                type: 'number',\n                value: 5,\n                min: 1,\n            },\n        ],\n        register: [\n            {\n                name: FEATURE_QUICK_ROLL_CONTROL,\n                type: Number,\n                default: 10,\n            },\n            {\n                name: FEATURE_QUICK_ROLL_SHIFT,\n                type: Number,\n                default: 5,\n            },\n        ],\n        help: 'Holding down multiple keys will multiply together the modifiers.',\n    },\n    {\n        id: FEATURE_OUTPUT_LOOT_ROLLS,\n        title: 'Output Loot Rolled to Chat',\n        attributes: [],\n        description: '',\n        inputs: [\n            {\n                name: FEATURE_OUTPUT_LOOT_ROLLS_WHISPER,\n                label: 'Whisper Results',\n                type: 'checkbox',\n                value: false,\n                help: 'If enabled, always whisper the results to the GMs. Otherwise, respect your current roll mode.',\n            },\n        ],\n        register: [\n            {\n                name: FEATURE_OUTPUT_LOOT_ROLLS_WHISPER,\n                type: Boolean,\n                default: false,\n            },\n        ],\n        help: '',\n    },\n];\n\nexport const setup = () => {\n    Hooks.on('init', () =>\n        ModuleSettings.initialize({\n            moduleName: MODULE_NAME,\n            moduleTitle: MODULE_TITLE,\n            features: FEATURES,\n        }),\n    );\n\n    Hooks.on('setup', registerHandlebarsTemplates);\n    Hooks.on('setup', registerHandlebarsHelpers);\n\n    Hooks.on('ready', async () => {\n        const extendedSheet = extendLootSheet();\n        // @ts-ignore\n        Actors.registerSheet(MODULE_NAME, extendedSheet, {\n            label: 'PF2E Loot Generator',\n            types: ['loot'],\n            makeDefault: false,\n        });\n\n        // recreate a loot sheet for testing\n        // await game.actors?.getName('TestLoot')?.delete();\n        // await Actor.create({ name: 'TestLoot', type: 'loot', ['flags.core.sheetClass']: 'pf2e-lootgen.LootApp' });\n        // await game.actors?.getName('TestLoot')?.sheet?.render(true);\n    });\n};\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A type of equality comparison.\n */\nexport enum EqualityType {\n    EqualTo,\n    LessThan,\n    LessThanEqualTo,\n    GreaterThan,\n    GreaterThanEqualTo,\n    LocaleInvariant\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ISpecification } from './ISpecification';\nimport { PF2EItem } from '../../types/PF2E';\n\nexport abstract class FilterGroup implements ISpecification<PF2EItem> {\n    protected children: ISpecification<PF2EItem>[];\n\n    protected constructor(children?: ISpecification<PF2EItem>[]) {\n        if (children === undefined) {\n            children = [];\n        }\n\n        this.children = children;\n    }\n\n    public abstract isSatisfiedBy(data: PF2EItem): boolean;\n\n    public and(other: ISpecification<PF2EItem>): ISpecification<PF2EItem> {\n        return new AndGroup([this, other]);\n    }\n\n    public not(other?: ISpecification<PF2EItem>): ISpecification<PF2EItem> {\n        return new NotGroup(this);\n    }\n\n    public or(other: ISpecification<PF2EItem>): ISpecification<PF2EItem> {\n        return new OrGroup([this, other]);\n    }\n\n    public addChildren(others: ISpecification<PF2EItem> | ISpecification<PF2EItem>[]) {\n        if (!Array.isArray(others)) {\n            others = [others];\n        }\n        this.children.push(...others);\n    }\n}\n\nexport class AndGroup extends FilterGroup {\n    public constructor(children?: ISpecification<PF2EItem>[]) {\n        super(children);\n    }\n\n    public isSatisfiedBy(data: PF2EItem): boolean {\n        for (const child of this.children) {\n            if (!child.isSatisfiedBy(data)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nexport class NotGroup extends FilterGroup {\n    public constructor(filter: ISpecification<PF2EItem>) {\n        super([filter]);\n    }\n\n    public isSatisfiedBy(data: PF2EItem): boolean {\n        return !this.children[0].isSatisfiedBy(data);\n    }\n}\n\nexport class OrGroup extends FilterGroup {\n    public constructor(children?: ISpecification<PF2EItem>[]) {\n        super(children);\n    }\n\n    public isSatisfiedBy(data: PF2EItem): boolean {\n        for (const child of this.children) {\n            if (child.isSatisfiedBy(data)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WeightedFilter } from './WeightedFilter';\nimport { EqualityType } from '../EqualityType';\nimport { PF2EItem } from '../../../types/PF2E';\n\nexport class ArrayIncludesFilter extends WeightedFilter<string> {\n    constructor(selector: string, desiredValue: string, weight: number) {\n        super(selector, desiredValue, weight, EqualityType.EqualTo);\n    }\n\n    protected getValue(data: PF2EItem): string {\n        const value = super.getValue(data);\n        if (Array.isArray(value)) {\n            return value.includes(this.desiredValue) ? this.desiredValue : '';\n        }\n        return '';\n    }\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WeightedFilter } from './WeightedFilter';\nimport { EqualityType } from '../EqualityType';\n\nexport class NumberFilter extends WeightedFilter<number> {\n    public constructor(selector: string, desiredValue: number, weight: number, equalityType: EqualityType) {\n        super(selector, desiredValue, weight, equalityType);\n    }\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WeightedFilter } from './WeightedFilter';\nimport { EqualityType } from '../EqualityType';\n\nexport class StringFilter extends WeightedFilter<string> {\n    public constructor(selector: string, desiredValue: string, weight: number) {\n        super(selector, desiredValue, weight, EqualityType.EqualTo);\n    }\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EqualityType } from '../EqualityType';\nimport { ISpecification } from '../ISpecification';\nimport { PF2EItem } from '../../../types/PF2E';\n\nexport abstract class WeightedFilter<T extends number | string | boolean> implements ISpecification<PF2EItem> {\n    protected readonly selector: string;\n    protected readonly desiredValue: T;\n    protected readonly equality: EqualityType;\n    public readonly weight: number;\n\n    // constructor is protected here so we can type them properly, and extend with type specific functions later\n    protected constructor(selector: string, desiredValue: T, weight: number, equalityType: EqualityType) {\n        this.selector = selector;\n        this.desiredValue = desiredValue;\n        this.weight = weight;\n        this.equality = equalityType;\n    }\n\n    /**\n     * Get a value from a data path, e.g. a series of period separated property keys.\n     * @param data The data to fetch the value from.\n     * @protected\n     */\n    protected getValue(data: PF2EItem): T {\n        const path: string[] = this.selector.split('.');\n\n        let current: any = data;\n        while (path.length > 0) {\n            const key = path.shift() as string;\n            current = current[key];\n        }\n        return current;\n    }\n\n    protected compareTo(value: T): boolean {\n        switch (this.equality) {\n            case EqualityType.EqualTo:\n                return value === this.desiredValue;\n            case EqualityType.LessThan:\n                return value < this.desiredValue;\n            case EqualityType.LessThanEqualTo:\n                return value <= this.desiredValue;\n            case EqualityType.GreaterThan:\n                return value > this.desiredValue;\n            case EqualityType.GreaterThanEqualTo:\n                return value >= this.desiredValue;\n            case EqualityType.LocaleInvariant:\n                return value.toLocaleString().localeCompare(this.desiredValue.toLocaleString()) === 0;\n        }\n    }\n\n    /**\n     * Return true if this operation is satisfied by the data.\n     * @param data The data to test.\n     */\n    public isSatisfiedBy(data: PF2EItem): boolean {\n        return this.compareTo(this.getValue(data));\n    }\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpellSchool, SpellTradition } from './source/Spells';\nimport { IEnabled, INamed, IWeighted } from './source/Mixins';\nimport { GenType, ordinalNumber } from './source/DataSource';\nimport { Rarity } from '../../types/PF2E';\n\nexport enum FilterType {\n    SpellSchool = 'school',\n    SpellLevel = 'level',\n    SpellTradition = 'tradition',\n    SpellRarity = 'rarity',\n}\n\nexport interface AppFilter extends IWeighted, IEnabled, INamed {\n    id: string;\n    filterType: FilterType;\n    filterCategory: GenType;\n    desiredValue: number | string | boolean;\n}\nexport interface SpellFilter extends AppFilter {\n    filterCategory: GenType.Spell;\n}\n\nconst levelFilterId = (level: number) => `level-${level}`;\nconst levelFilter = (level: number): SpellFilter => {\n    return {\n        id: levelFilterId(level),\n        name: `${ordinalNumber(level)}-Level`,\n\n        filterType: FilterType.SpellLevel,\n        filterCategory: GenType.Spell,\n\n        desiredValue: level,\n\n        weight: 1,\n        enabled: true,\n    };\n};\n\nconst schoolFilterId = (school: SpellSchool) => `${school}`;\nconst schoolFilter = (school: SpellSchool): SpellFilter => {\n    return {\n        id: schoolFilterId(school),\n        name: school.capitalize(),\n\n        filterType: FilterType.SpellLevel,\n        filterCategory: GenType.Spell,\n\n        desiredValue: school,\n\n        weight: 1,\n        enabled: true,\n    };\n};\n\nconst traditionFilterId = (tradition: SpellTradition) => `${tradition}`;\nconst traditionFilter = (tradition: SpellTradition): SpellFilter => {\n    return {\n        id: traditionFilterId(tradition),\n        name: tradition.capitalize(),\n\n        filterType: FilterType.SpellTradition,\n        filterCategory: GenType.Spell,\n\n        desiredValue: tradition,\n\n        weight: 1,\n        enabled: true,\n    };\n};\n\nconst rarityFilterId = (rarity: Rarity) => `${rarity}`;\nconst rarityFilter = (rarity: Rarity): SpellFilter => {\n    return {\n        id: rarityFilterId(rarity),\n        name: rarity.capitalize(),\n\n        filterType: FilterType.SpellRarity,\n        filterCategory: GenType.Spell,\n\n        desiredValue: rarity,\n\n        weight: 1,\n        enabled: true,\n    };\n};\n\nexport const spellLevelFilters: Record<string, AppFilter> = Array.fromRange(10).reduce(\n    (prev, curr) =>\n        mergeObject(prev, {\n            [levelFilterId(curr + 1)]: levelFilter(curr + 1),\n        }),\n    {},\n);\n\nexport const spellSchoolFilters: Record<string, AppFilter> = Object.values(SpellSchool).reduce(\n    (prev, curr) =>\n        mergeObject(prev, {\n            [schoolFilterId(curr)]: schoolFilter(curr),\n        }),\n    {},\n);\n\nexport const spellTraditionFilters: Record<string, AppFilter> = Object.values(SpellTradition).reduce(\n    (prev, curr) =>\n        mergeObject(prev, {\n            [traditionFilterId(curr)]: traditionFilter(curr),\n        }),\n    {},\n);\nexport const spellRarityFilters: Record<string, AppFilter> = Object.values(Rarity).reduce(\n    (prev, curr) =>\n        mergeObject(prev, {\n            [rarityFilterId(curr)]: rarityFilter(curr),\n        }),\n    {},\n);\n\nexport const spellFilters = { ...spellLevelFilters, ...spellSchoolFilters, ...spellTraditionFilters, ...spellRarityFilters };\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MODULE_NAME } from '../Constants';\nimport { DataSource, GenType } from './source/DataSource';\nimport { dataSourcesOfType, filtersOfType } from './Utilities';\nimport { AppFilter, FilterType } from './Filters';\nimport { IEnabled, IWeighted } from './source/Mixins';\n\nexport const FLAGS_KEY = MODULE_NAME;\n\nexport interface LootCategoryConfig {\n    count: number;\n}\nexport interface LootStoredData extends IEnabled, IWeighted {}\nexport interface LootAppFlags {\n    sources: {\n        [storeId: string]: LootStoredData;\n    };\n    filters: {\n        [storeId: string]: LootStoredData;\n    };\n    config: {\n        [TKey in GenType]: LootCategoryConfig;\n    };\n}\n\nexport function sourceFlagPath(source: DataSource, withFlags: boolean = false): string {\n    let path = `sources.${source.storeId}`;\n    if (withFlags) {\n        path = `flags.${FLAGS_KEY}.${path}`;\n    }\n    return path;\n}\nexport function filterFlagPath(filter: AppFilter, withFlags: boolean = false): string {\n    let path = `filters.${filter.id}`;\n    if (withFlags) {\n        path = `flags.${FLAGS_KEY}.${path}`;\n    }\n    return path;\n}\nexport function createFlagPath(name: string, withFlags: boolean = false): string {\n    let path = `create.${name}`;\n    if (withFlags) {\n        path = `flags.${FLAGS_KEY}.${path}`;\n    }\n    return path;\n}\n\nHandlebars.registerHelper('source-flag', (source: DataSource) => sourceFlagPath(source, true));\nHandlebars.registerHelper('filter-flag', (filter: AppFilter) => filterFlagPath(filter, true));\nHandlebars.registerHelper('create-flag', (name: string) => createFlagPath(name, true));\n\n/**\n * Get a filter with the saved weight and enabled status from an actor.\n * @param actor The actor to fetch from.\n * @param filter The filter to fetch.\n */\nexport function getFilterSettings<T extends AppFilter>(actor: Actor, filter: T): T {\n    const flags = actor.getFlag(FLAGS_KEY, filterFlagPath(filter)) as Partial<AppFilter>;\n    return mergeObject(duplicate(filter) as AppFilter, flags) as T;\n}\n\n/**\n * Load and merge changed settings into a copy of the provided data source.\n * @param actor The actor to load from.\n * @param source The source to load.\n */\nexport function getDataSourceSettings<T extends DataSource>(actor: Actor, source: T): T {\n    const flags = actor.getFlag(FLAGS_KEY, sourceFlagPath(source)) as Partial<DataSource>;\n    return mergeObject(duplicate(source) as DataSource, flags) as T;\n}\n\n/**\n * Set the options values of a single data source for an actor.\n * @param actor The actor to update.\n * @param source The data source to update.\n */\nexport async function setDataSourceSetting(actor: Actor, source: DataSource | DataSource[]): Promise<Actor> {\n    if (!Array.isArray(source)) {\n        source = [source];\n    }\n    const updateData = source.reduce(\n        (prev, curr) =>\n            mergeObject(prev, {\n                [`flags.${FLAGS_KEY}.sources.${curr.itemType}.${curr.id}`]: curr,\n            }),\n        {},\n    );\n    return (await actor.update(updateData))!;\n}\n\n// TODO: Should be pretty easy to collapse buildSourceSettingUpdate + buildFilterSettingUpdate into one function.\nexport type SetValueKeys = keyof IEnabled | keyof IWeighted;\nexport function buildSourceSettingUpdate(actor: Actor, type: GenType, keys: SetValueKeys | SetValueKeys[], values: any | any[]): Record<string, any> {\n    if (!Array.isArray(keys)) keys = [keys];\n    if (!Array.isArray(values)) values = [values];\n    if (keys.length !== values.length) {\n        throw new Error(`keys and values must be of equal length, got ${keys.length} and ${values.length}.`);\n    }\n\n    const sources = dataSourcesOfType(type);\n    const updateData: Record<string, any> = {};\n    for (const source of Object.values(sources)) {\n        for (let i = 0; i < keys.length; i++) {\n            updateData[`${sourceFlagPath(source, true)}.${keys[i]}`] = values[i];\n        }\n    }\n    return updateData;\n}\nexport function buildFilterSettingUpdate(actor: Actor, type: FilterType, keys: SetValueKeys | SetValueKeys[], values: any | any[]): Record<string, any> {\n    if (!Array.isArray(keys)) keys = [keys];\n    if (!Array.isArray(values)) values = [values];\n    if (keys.length !== values.length) {\n        throw new Error(`keys and values must be of equal length, got ${keys.length} and ${values.length}.`);\n    }\n\n    const filters = filtersOfType(type);\n    const updateData: Record<string, any> = {};\n    for (const filter of Object.values(filters)) {\n        for (let i = 0; i < keys.length; i++) {\n            updateData[`${filterFlagPath(filter, true)}.${keys[i]}`] = values[i];\n        }\n    }\n    return updateData;\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Replace numbers in a string with commas.\n * @param value\n */\nexport const numericCommas = (value: string | number) => {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FEATURE_ALLOW_MERGING, FEATURE_QUICK_ROLL_CONTROL, FEATURE_QUICK_ROLL_MODIFIERS, FEATURE_QUICK_ROLL_SHIFT } from '../Setup';\nimport ModuleSettings from '../../../FVTT-Common/src/module/ModuleSettings';\nimport { DataSource, GenType, PoolSource, SourceType } from './source/DataSource';\nimport { buildFilterSettingUpdate, buildSourceSettingUpdate, createFlagPath, FLAGS_KEY, getDataSourceSettings, getFilterSettings, SetValueKeys } from './Flags';\nimport { permanentSources } from './source/Permanent';\nimport { treasureSources } from './source/Treasure';\nimport { AndGroup, OrGroup } from '../filter/FilterGroup';\nimport {\n    calculateFinalPriceAndLevel,\n    createSpellItems,\n    dataSourcesOfType,\n    drawFromSources,\n    DrawResult,\n    getEquipmentType,\n    maybeMystifyItems,\n    maybeOutputItemsToChat,\n    mergeExistingStacks,\n    mergeStacks,\n    rollTreasureValues,\n} from './Utilities';\nimport { SpellItemType, spellSources } from './source/Spells';\nimport { BasePriceData, CREATE_KEY_NONE, getValidMaterialGrades, getValidMaterials, ItemMaterials } from './data/Materials';\nimport { ITEM_ID_LENGTH, MODULE_NAME, PF2E_LOOT_SHEET_NAME, QUICK_MYSTIFY, TOOLBOX_NAME } from '../Constants';\nimport { AppFilter, FilterType, spellLevelFilters, spellRarityFilters, spellSchoolFilters, spellTraditionFilters } from './Filters';\nimport { NumberFilter } from '../filter/Operation/NumberFilter';\nimport { ArrayIncludesFilter } from '../filter/Operation/ArrayIncludesFilter';\nimport { StringFilter } from '../filter/Operation/StringFilter';\nimport { consumableSources } from './source/Consumable';\nimport { WeightedFilter } from '../filter/Operation/WeightedFilter';\nimport { EqualityType } from '../filter/EqualityType';\nimport {\n    ArmorPropertyRuneType,\n    EquipmentItem,\n    EquipmentType,\n    HTMLItemString,\n    isArmor,\n    isEquipment,\n    isShield,\n    isWeapon,\n    PF2EItem,\n    PhysicalItem,\n    PreciousMaterialGrade,\n    PreciousMaterialType,\n    PropertyRuneCreateKey,\n    PropertyRuneType,\n    Rarity,\n    ResiliencyRuneType,\n    StrikingRuneType,\n    WeaponPropertyRuneType,\n} from '../../types/PF2E';\nimport { FundamentalRuneType, ItemRunes, PotencyRuneType } from './data/Runes';\n\nexport enum LootAppSetting {\n    Count = 'count',\n}\n\ninterface FormOption<TSlug, TLabel = string> {\n    slug: TSlug;\n    label: TLabel;\n}\nexport type LootAppCreateData = {\n    type: EquipmentType;\n\n    template: EquipmentItem;\n    templateLink: HTMLItemString;\n    product?: EquipmentItem;\n\n    preciousMaterial: PreciousMaterialType;\n    preciousMaterialGrade: PreciousMaterialGrade;\n\n    potencyRune: PotencyRuneType;\n\n    strikingRune?: StrikingRuneType;\n    resiliencyRune?: ResiliencyRuneType;\n\n    shieldType?: EquipmentType;\n\n    materials: ReturnType<typeof getValidMaterials>;\n    grades: ReturnType<typeof getValidMaterialGrades>;\n    runes: typeof ItemRunes[EquipmentType];\n    shieldTypes?: FormOption<EquipmentType>[];\n\n    hardness: number;\n    hitPoints: number;\n    brokenThreshold: number;\n    finalPrice: BasePriceData;\n    finalLevel: number;\n} & {\n    [T in PropertyRuneCreateKey]: PropertyRuneType;\n};\n\nexport const extendLootSheet = () => {\n    type ActorSheetConstructor = new (...args: any[]) => ActorSheet<ActorSheet.Options, any>;\n\n    // @ts-ignore\n    const BaseClass: ActorSheetConstructor = CONFIG.Actor.sheetClasses['loot'][`pf2e.${PF2E_LOOT_SHEET_NAME}`].cls;\n    class LootApp extends BaseClass {\n        static get defaultOptions() {\n            // @ts-ignore\n            const options = super.defaultOptions;\n            options.classes = options.classes ?? [];\n            options.classes = [...options.classes, 'pf2e-lootgen', 'loot-app'];\n            options.tabs = [\n                ...options.tabs,\n                {\n                    navSelector: '.loot-app-nav',\n                    contentSelector: '.loot-app-content',\n                    initial: 'settings',\n                },\n            ];\n            return options;\n        }\n\n        get title(): string {\n            return 'PF2E Loot Generator';\n        }\n\n        get template(): string {\n            return `modules/${MODULE_NAME}/templates/loot-app/index.html`;\n        }\n\n        // base item data dragged from somewhere\n        protected _createBaseItem: EquipmentItem | undefined;\n\n        protected get createBaseItem(): EquipmentItem | undefined {\n            if (this._createBaseItem) {\n                return duplicate(this._createBaseItem);\n            } else return undefined;\n        }\n\n        protected set createBaseItem(value: EquipmentItem | undefined) {\n            // delete local old base item to prevent memory leak\n            if (this.createBaseItem !== undefined && this.createBaseItem !== null) {\n                game.items?.delete(this.createBaseItem._id);\n            }\n\n            value = duplicate(value) as EquipmentItem;\n            value._id = foundry.utils.randomID(ITEM_ID_LENGTH);\n            value['flags'] = { ...value['flags'], [FLAGS_KEY]: { temporary: true } };\n\n            // @ts-ignore\n            const item: Item = new (game.items as Items).documentClass(value);\n            // @ts-ignore\n            game.items?.set(value._id, item);\n            this._createBaseItem = value;\n        }\n\n        // mapping of collapse-ids to hidden or not states\n        protected collapsibles: Record<string, boolean> = {};\n\n        protected getCreateFlag<T>(key: string): T | undefined {\n            return this.actor.getFlag(FLAGS_KEY, `create.${key}`) as T;\n        }\n\n        protected async getCreateData() {\n            if (this.createBaseItem === undefined) {\n                return {};\n            }\n            const equipmentType = getEquipmentType(this.createBaseItem);\n            if (equipmentType === undefined) {\n                return {};\n            }\n\n            let data: Partial<LootAppCreateData> = {};\n            data['type'] = equipmentType;\n            data['template'] = this.createBaseItem;\n            data['templateLink'] = `@Item[${this.createBaseItem._id}]`;\n\n            const materialGradeType = this.getCreateFlag<PreciousMaterialGrade>('preciousMaterialGrade') ?? PreciousMaterialGrade.None;\n            data['preciousMaterialGrade'] = materialGradeType;\n\n            const materialType = this.getCreateFlag<PreciousMaterialType>('preciousMaterial') ?? CREATE_KEY_NONE;\n            data['preciousMaterial'] = materialType;\n\n            const potencyRuneType = this.getCreateFlag<PotencyRuneType>('potencyRune') ?? '0';\n            data['potencyRune'] = potencyRuneType;\n\n            let fundamentalRune: FundamentalRuneType = '';\n            if (isWeapon(this.createBaseItem)) {\n                fundamentalRune = this.getCreateFlag<StrikingRuneType>('strikingRune') ?? '';\n                data['strikingRune'] = fundamentalRune;\n            }\n            if (isArmor(this.createBaseItem)) {\n                fundamentalRune = this.getCreateFlag<ResiliencyRuneType>('resiliencyRune') ?? '';\n                data['resiliencyRune'] = fundamentalRune;\n            }\n\n            const propertyRunes: [PropertyRuneType, PropertyRuneType, PropertyRuneType, PropertyRuneType] = ['', '', '', ''];\n            for (let i = 0; i < 4; i++) {\n                const key = `propertyRune${i + 1}` as PropertyRuneCreateKey;\n                propertyRunes[i] = this.getCreateFlag<PropertyRuneType>(key) ?? '';\n                data[key] = propertyRunes[i];\n            }\n\n            data['materials'] = getValidMaterials(this.createBaseItem);\n            data['grades'] = getValidMaterialGrades(this.createBaseItem, materialType);\n            data['runes'] = ItemRunes[equipmentType];\n\n            // switch here so the type is narrowed by ts properly\n            switch (equipmentType) {\n                case EquipmentType.Buckler:\n                case EquipmentType.Shield:\n                case EquipmentType.Tower:\n                    data['shieldType'] = equipmentType;\n                    data['shieldTypes'] = [EquipmentType.Buckler, EquipmentType.Shield, EquipmentType.Tower].map((type) => {\n                        return {\n                            slug: type,\n                            label: type.toString().capitalize(),\n                        };\n                    });\n                    break;\n            }\n\n            const dataUpdates = this.validateFlagData(this.createBaseItem);\n            data = mergeObject(data, dataUpdates);\n\n            const { price, level, hardness, hitPoints, brokenThreshold } = calculateFinalPriceAndLevel({\n                item: this.createBaseItem,\n                materialType,\n                materialGradeType,\n                potencyRune: potencyRuneType,\n                fundamentalRune: fundamentalRune,\n                propertyRunes: propertyRunes,\n            });\n\n            data['hardness'] = hardness;\n            data['hitPoints'] = hitPoints;\n            data['brokenThreshold'] = brokenThreshold;\n            data['finalPrice'] = { basePrice: price };\n            data['finalLevel'] = level;\n\n            const product = this.buildProduct(data as LootAppCreateData);\n            if (product) {\n                data['product'] = product;\n            }\n\n            return data;\n        }\n\n        protected buildProduct(data: LootAppCreateData): EquipmentItem | undefined {\n            const product = this.createBaseItem;\n            if (product === undefined) {\n                return undefined;\n            }\n\n            // setting this way to ensure it exists, armor does not contain this ATM but I expect it\n            // to be added to armors in later version of PF2E as automation continues to improve\n            product.data.specific = { value: true };\n\n            product.data.level.value = data.finalLevel;\n            product.data.price.value = `${data.finalPrice.basePrice} gp`;\n\n            product.data.preciousMaterial.value = data.preciousMaterial;\n            product.data.preciousMaterialGrade.value = data.preciousMaterialGrade;\n\n            product.data.propertyRune1.value = data.propertyRune1;\n            product.data.propertyRune2.value = data.propertyRune2;\n            product.data.propertyRune3.value = data.propertyRune3;\n            product.data.propertyRune4.value = data.propertyRune4;\n\n            if (isWeapon(product) && data.strikingRune) {\n                product.data.potencyRune.value = data.potencyRune;\n                product.data.strikingRune.value = data.strikingRune;\n            }\n            if (isArmor(product) && data.resiliencyRune) {\n                product.data.potencyRune.value = data.potencyRune;\n                product.data.resiliencyRune.value = data.resiliencyRune;\n            }\n\n            let newName: string = '';\n            if (data.potencyRune && data.potencyRune !== '0' && (data.potencyRune as string) !== '') {\n                newName = `+${data.potencyRune}`;\n            }\n            if (data.strikingRune && (data.strikingRune as string) !== '') {\n                newName += ` ${game.i18n.localize(CONFIG.PF2E.weaponStrikingRunes[data.strikingRune])}`;\n            }\n            if (data.resiliencyRune && (data.resiliencyRune as string) !== '') {\n                newName += ` ${game.i18n.localize(CONFIG.PF2E.armorResiliencyRunes[data.resiliencyRune])}`;\n            }\n\n            if (data.preciousMaterial && (data.preciousMaterial as string) !== '') {\n                newName += ` ${game.i18n.localize(CONFIG.PF2E.preciousMaterials[data.preciousMaterial])}`;\n            }\n\n            if (isWeapon(product)) {\n                for (let i = 1; i <= 4; i++) {\n                    const key = `propertyRune${i}` as PropertyRuneCreateKey;\n                    const value = data[key] as WeaponPropertyRuneType;\n                    if (value && (value as string) !== '') {\n                        newName += ` ${game.i18n.localize(CONFIG.PF2E.weaponPropertyRunes[value])}`;\n                    }\n                }\n            }\n            if (isArmor(product)) {\n                for (let i = 1; i <= 4; i++) {\n                    const key = `propertyRune${i}` as PropertyRuneCreateKey;\n                    const value = data[key] as ArmorPropertyRuneType;\n                    if (value && (value as string) !== '') {\n                        newName += ` ${game.i18n.localize(CONFIG.PF2E.armorPropertyRunes[value])}`;\n                    }\n                }\n            }\n\n            product.data.hardness.value = data.hardness;\n            product.data.hp.value = data.hitPoints;\n            product.data.maxHp.value = data.hitPoints;\n            product.data.brokenThreshold.value = data.brokenThreshold;\n\n            // update table description of shields\n            if (isShield(product)) {\n                let description = product.data.description.value;\n\n                const startLength = '<td>'.length;\n\n                const hardnessStart = description.indexOf('<td>') + startLength;\n\n                if (hardnessStart !== -1) {\n                    const hardnessEnd = description.indexOf('</td>', hardnessStart);\n                    description = description.slice(0, hardnessStart) + data.hardness + description.slice(hardnessEnd, description.length);\n\n                    const hitPointsStart = description.indexOf('<td>', hardnessStart) + startLength;\n                    const hitPointsEnd = description.indexOf('</td>', hitPointsStart);\n                    description = description.slice(0, hitPointsStart) + data.hitPoints + description.slice(hitPointsEnd, description.length);\n\n                    const breakThresholdStart = description.indexOf('<td>', hitPointsStart) + startLength;\n                    const breakThresholdEnd = description.indexOf('</td>', breakThresholdStart);\n                    description = description.slice(0, breakThresholdStart) + data.brokenThreshold + description.slice(breakThresholdEnd, description.length);\n\n                    product.data.description.value = description;\n                }\n            }\n\n            if (data.finalLevel === 25) {\n                product.data.traits.rarity.value = Rarity.Unique;\n            }\n\n            product.name = `${newName} ${product.name}`;\n            product._id = foundry.utils.randomID(ITEM_ID_LENGTH);\n\n            return product;\n        }\n\n        protected validateFlagData(item: EquipmentItem): Record<string, any> {\n            const dataUpdates: Record<string, any> = {};\n            let equipmentType = getEquipmentType(item)!;\n\n            let preciousMaterialType = this.getCreateFlag<PreciousMaterialType>('preciousMaterial');\n            let preciousMaterialGradeType = this.getCreateFlag<PreciousMaterialGrade>('preciousMaterialGrade');\n\n            if (!preciousMaterialGradeType) {\n                preciousMaterialGradeType = PreciousMaterialGrade.None;\n            }\n\n            if (preciousMaterialType) {\n                let preciousMaterial = ItemMaterials[preciousMaterialType];\n                if (!preciousMaterial.hasOwnProperty(equipmentType)) {\n                    preciousMaterialType = '';\n                    dataUpdates['preciousMaterial'] = preciousMaterialType;\n                }\n\n                const validGrades = getValidMaterialGrades(item, preciousMaterialType);\n                if (!validGrades.hasOwnProperty(preciousMaterialGradeType)) {\n                    preciousMaterialGradeType = preciousMaterial.defaultGrade;\n                    dataUpdates['preciousMaterialGrade'] = preciousMaterialGradeType;\n                }\n            }\n\n            let potencyRuneType = this.getCreateFlag<PotencyRuneType>('potencyRune');\n            // when initializing we can have empty string technically\n            if ((potencyRuneType as string) === '') {\n                potencyRuneType = '0';\n            }\n            if (potencyRuneType) {\n                const potencyValue = parseInt(potencyRuneType);\n\n                if (potencyValue < 4) {\n                    dataUpdates['propertyRune4'] = '';\n                }\n                if (potencyValue < 3) {\n                    dataUpdates['propertyRune3'] = '';\n                }\n                if (potencyValue < 2) {\n                    dataUpdates['propertyRune2'] = '';\n                }\n                if (potencyValue < 1) {\n                    dataUpdates['propertyRune1'] = '';\n                    dataUpdates['strikingRune'] = '';\n                    dataUpdates['resiliencyRune'] = '';\n                }\n            }\n\n            if (!isObjectEmpty(dataUpdates)) {\n                const flagUpdates: Record<string, any> = {};\n                for (const [key, value] of Object.entries(dataUpdates)) {\n                    flagUpdates[createFlagPath(key, true)] = value;\n                }\n                this.actor.update(flagUpdates);\n            }\n            return dataUpdates;\n        }\n\n        public async getData(options?: ActorSheet.Options) {\n            const data = (await super.getData(options)) as Record<string, any>;\n\n            data['constants'] = {\n                rangeMin: 1,\n                rangeMax: 25,\n            };\n            data['collapsibles'] = { ...data['collapsibles'], ...this.collapsibles };\n\n            const getFilter = (filter: AppFilter): AppFilter => getFilterSettings(this.actor, filter);\n            data['filters'] = {\n                spell: {\n                    school: Object.values(spellSchoolFilters).map(getFilter),\n                    level: Object.values(spellLevelFilters).map(getFilter),\n                    tradition: Object.values(spellTraditionFilters).map(getFilter),\n                    rarity: Object.values(spellRarityFilters).map(getFilter),\n                },\n            };\n\n            const getSource = (source: DataSource): DataSource => getDataSourceSettings(this.actor, source);\n            data['sources'] = {\n                [GenType.Consumable]: Object.values(consumableSources).map(getSource),\n                [GenType.Permanent]: Object.values(permanentSources).map(getSource),\n                [GenType.Treasure]: Object.values(treasureSources).map(getSource),\n                [GenType.Spell]: Object.values(spellSources).map(getSource),\n            };\n\n            data['flags'] = {\n                ...data['flags'],\n                ...data['actor']['flags'][FLAGS_KEY],\n            };\n\n            data['create'] = await this.getCreateData();\n\n            return data;\n        }\n\n        private async createItems(datas: PF2EItem[]) {\n            //@ts-ignore\n            await this.actor.createEmbeddedDocuments('Item', datas);\n        }\n\n        private async updateItems(datas: PF2EItem[]) {\n            //@ts-ignore\n            await this.actor.updateEmbeddedDocuments('Item', datas);\n        }\n\n        /**\n         * Create a group of items from a draw result\n         * @param event\n         * @param results\n         * @private\n         */\n        private async createItemsFromDraw(event: JQuery.ClickEvent, results: DrawResult[]) {\n            let itemsToUpdate: PF2EItem[] | undefined = undefined;\n            let itemsToCreate = results.map((d) => d.itemData);\n            await maybeOutputItemsToChat(itemsToCreate as PhysicalItem[]);\n            if (ModuleSettings.instance.get(FEATURE_ALLOW_MERGING)) {\n                const existing = this.actor.data.items.map((item) => item.data as PF2EItem);\n                [itemsToUpdate, itemsToCreate] = mergeExistingStacks(existing, itemsToCreate);\n            } else {\n                itemsToCreate = mergeStacks(itemsToCreate);\n            }\n\n            itemsToCreate = maybeMystifyItems(event, ...(itemsToCreate as PhysicalItem[]));\n            itemsToCreate.sort((a, b) => a.data.slug.localeCompare(b.data.slug));\n\n            if (itemsToUpdate !== undefined) {\n                await this.updateItems(itemsToUpdate);\n            }\n            await this.createItems(itemsToCreate);\n        }\n\n        /**\n         * Helper function to retrieve certain settings from the flags store.\n         * @param type The type of the setting, since these settings are duplicated over the three generator types.\n         * @param key The setting key.\n         * @private\n         */\n        private getLootAppSetting<T = any>(type: GenType, key: LootAppSetting): T {\n            return this.actor.getFlag(MODULE_NAME, `config.${type}.${key}`) as T;\n        }\n\n        protected override async _onDropItem(event: any, data: any) {\n            const dragEvent: DragEvent = event as DragEvent;\n            const dropRegion = $(this.element).find('div.template-drop');\n            const dropTarget = dropRegion.find(dragEvent.target as any);\n\n            const isTemplateDrop = dropTarget.length > 0;\n\n            if (isTemplateDrop) {\n                const item = (await Item.fromDropData(data))?.data as PF2EItem;\n\n                if ((isWeapon(item) && item.data.group.value !== 'bomb') || isArmor(item)) {\n                    this.createBaseItem = item;\n                    await this.actor.unsetFlag(FLAGS_KEY, 'create');\n                } else {\n                    ui.notifications?.warn('The item creator only supports weapons, armor, and shields right now.');\n                    return;\n                }\n\n                const flags: Record<string, any> = {};\n                if (isEquipment(item)) {\n                    flags['preciousMaterial'] = item.data.preciousMaterial.value ?? '';\n                    flags['preciousMaterialGrade'] = item.data.preciousMaterialGrade.value ?? PreciousMaterialGrade.Standard;\n                    flags['propertyRune1'] = item.data.propertyRune1.value ?? '';\n                    flags['propertyRune2'] = item.data.propertyRune2.value ?? '';\n                    flags['propertyRune3'] = item.data.propertyRune3.value ?? '';\n                    flags['propertyRune4'] = item.data.propertyRune4.value ?? '';\n                    flags['potencyRune'] = item.data.potencyRune.value ?? '';\n\n                    if (isWeapon(item)) {\n                        flags['strikingRune'] = item.data.strikingRune.value ?? '';\n                    } else if (isArmor(item)) {\n                        flags['resiliencyRune'] = item.data.resiliencyRune.value ?? '';\n                    }\n\n                    if (isShield(item)) {\n                        flags['shieldType'] = getEquipmentType(item);\n                    }\n                }\n\n                await this.actor.setFlag(FLAGS_KEY, 'create', flags);\n\n                return;\n            }\n\n            return super._onDropItem(event, data);\n        }\n\n        public async activateListeners(html: JQuery) {\n            super.activateListeners(html);\n\n            // Since all our data is derived from the form, for simplicity of code if the\n            //  data has never been set, e.g. the user has never interacted with the form,\n            //  we will submit the form to get a default set of data stored on the server.\n            //  This is done in activateListeners so we can ensure we get the proper HTML\n            //  to derive the form data from.\n            if (!this.actor.getFlag(MODULE_NAME, 'config')) {\n                await this._updateObject(new Event('submit'), this._getSubmitData());\n            }\n\n            // TODO: Move to utility file\n            /**\n             * Calculate quick roll count by checking event modifiers and the module settings.\n             * @param event\n             */\n            const getQuickRollCount = (event: JQuery.ClickEvent): number => {\n                if (!ModuleSettings.instance.get(FEATURE_QUICK_ROLL_MODIFIERS)) {\n                    return 1;\n                }\n\n                let count = 1;\n                if (event.shiftKey) {\n                    count *= ModuleSettings.instance.get(FEATURE_QUICK_ROLL_SHIFT) as number;\n                }\n                if (event.ctrlKey) {\n                    count *= ModuleSettings.instance.get(FEATURE_QUICK_ROLL_CONTROL) as number;\n                }\n                return count;\n            };\n            /**\n             * Get the closest container and element for an event.\n             * @param event\n             */\n            const getContainer = (event: JQuery.ClickEvent) => {\n                const element = $(event.currentTarget);\n                const container = element.closest('.tab-container');\n                return { element, container };\n            };\n\n            const getType = (event: JQuery.ClickEvent) => {\n                const { container } = getContainer(event);\n                return container.data('type') as GenType;\n            };\n\n            // group roll button\n            html.find('.buttons .roll').on('click', async (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                const { container } = getContainer(event);\n                const type = container.data('type') as GenType;\n\n                const sources = Object.values(dataSourcesOfType(type))\n                    .map((source) => getDataSourceSettings(this.actor, source))\n                    .filter((table) => table.enabled);\n\n                let results = await drawFromSources(this.getLootAppSetting<number>(type, LootAppSetting.Count), sources);\n                results = await rollTreasureValues(results);\n\n                await this.createItemsFromDraw(event, results);\n            });\n            // quick roll button for sources\n            html.find('.treasure i.quick-roll, .permanent i.quick-roll, .consumable i.quick-roll').on('click', async (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                const element = $(event.currentTarget).closest('.source-wrapper');\n                const source: DataSource = element.data('source');\n\n                let results = await drawFromSources(getQuickRollCount(event), [source]);\n                results = await rollTreasureValues(results);\n\n                await this.createItemsFromDraw(event, results);\n            });\n\n            const rollSpells = async (event: JQuery.ClickEvent, consumableTypes: SpellItemType[]) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                const promises: Promise<Item[]>[] = [];\n                for (const source of Object.values(spellSources)) {\n                    const pack = game.packs.get(source.id);\n                    if (pack === undefined) {\n                        continue;\n                    }\n                    // noinspection ES6MissingAwait\n                    promises.push(pack.getDocuments() as Promise<Item[]>);\n                }\n\n                const levelFilters = Object.values(spellLevelFilters)\n                    .map((filter) => getFilterSettings(this.actor, filter))\n                    .filter((filter) => filter.enabled)\n                    .map((filter) => new NumberFilter('data.level.value', filter.desiredValue as number, filter.weight, EqualityType.EqualTo));\n                const schoolFilters = Object.values(spellSchoolFilters)\n                    .map((filter) => getFilterSettings(this.actor, filter))\n                    .filter((filter) => filter.enabled)\n                    .map((filter) => new StringFilter('data.school.value', filter.desiredValue as string, filter.weight));\n                const traditionFilters = Object.values(spellTraditionFilters)\n                    .map((filter) => getFilterSettings(this.actor, filter))\n                    .filter((filter) => filter.enabled)\n                    .map((filter) => new ArrayIncludesFilter('data.traditions.value', filter.desiredValue as string, filter.weight));\n                const rarityFilters = Object.values(spellRarityFilters)\n                    .map((filter) => getFilterSettings(this.actor, filter))\n                    .filter((filter) => filter.enabled)\n                    .map((filter) => new StringFilter('data.traits.rarity.value', filter.desiredValue as string, filter.weight));\n\n                const isLevel = new OrGroup([...levelFilters]);\n                const isSchool = new OrGroup([...schoolFilters]);\n                const isTradition = new OrGroup([...traditionFilters]);\n                const isRarity = new OrGroup([...rarityFilters]);\n                const isEnabled = new AndGroup([isLevel, isSchool, isTradition, isRarity]);\n                const filters: WeightedFilter<number | string>[] = [...levelFilters, ...schoolFilters, ...traditionFilters, ...rarityFilters];\n\n                let spells = (await Promise.all(promises)).flat().map((spell) => spell.data) as unknown as PF2EItem[];\n                spells = spells.filter((spell) => isEnabled.isSatisfiedBy(spell));\n\n                const sources: Record<number, PoolSource> = {};\n                for (const entry of spells) {\n                    const weight = filters.reduce((prev, curr) => (curr.isSatisfiedBy(entry) ? prev + curr.weight : prev), 0);\n                    if (!sources.hasOwnProperty(weight)) {\n                        sources[weight] = {\n                            id: null,\n                            storeId: null,\n                            enabled: true,\n                            sourceType: SourceType.Pool,\n                            weight: weight,\n                            elements: [],\n                        };\n                    }\n                    sources[weight].elements.push(entry);\n                }\n\n                if (Object.values(sources).length === 0) {\n                    // TODO: Localization\n                    ui.notifications?.warn('The current filters excluded all spells.', { permanent: true });\n                    return;\n                }\n\n                const drawnSpells = await drawFromSources(this.getLootAppSetting<number>(GenType.Spell, LootAppSetting.Count), Object.values(sources));\n\n                let createdItems = (await createSpellItems(drawnSpells, consumableTypes)) as PhysicalItem[];\n                createdItems = maybeMystifyItems(event, ...createdItems);\n\n                // TODO: Join stacks, slug needs updating to do so.\n\n                await this.createItems(createdItems);\n                await maybeOutputItemsToChat(createdItems);\n            };\n\n            // roll scrolls\n            html.find('.buttons .roll-scroll').on('click', async (event) => {\n                await rollSpells(event, [SpellItemType.Scroll]);\n            });\n            // roll wands\n            html.find('.buttons .roll-wand').on('click', async (event) => {\n                await rollSpells(event, [SpellItemType.Wand]);\n            });\n            // roll scrolls + wands\n            html.find('.buttons .roll-both').on('click', async (event) => {\n                await rollSpells(event, [SpellItemType.Scroll, SpellItemType.Wand]);\n            });\n\n            // create item\n            html.find('#create-item').on('click', async (event) => {\n                const createData = await this.getCreateData();\n                if (!createData.product) {\n                    return;\n                }\n\n                [createData.product] = maybeMystifyItems(event, createData.product) as EquipmentItem[];\n\n                await this.createItems([createData.product]);\n            });\n            // clear loot\n            html.find('button.clear-loot').on('click', async (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                await this.actor.deleteEmbeddedDocuments(\n                    'Item',\n                    this.actor.items.map((item) => item.id!),\n                );\n            });\n\n            /**\n             * Handle a settings update event, e.g. one of the check all, check none, or reset buttons are pressed.\n             * @param event The triggering even.\n             * @param keys The keys that should be updated.\n             * @param values The values that should be placed in those keys.\n             */\n            const settingsUpdate = async (event: JQuery.ClickEvent, keys: SetValueKeys[], values: any[]): Promise<void> => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                let updateData = buildSourceSettingUpdate(this.actor, getType(event), keys, values);\n                if (getType(event) === GenType.Spell) {\n                    updateData = { ...updateData, ...buildFilterSettingUpdate(this.actor, FilterType.SpellSchool, keys, values) };\n                    updateData = { ...updateData, ...buildFilterSettingUpdate(this.actor, FilterType.SpellLevel, keys, values) };\n                    updateData = { ...updateData, ...buildFilterSettingUpdate(this.actor, FilterType.SpellTradition, keys, values) };\n                }\n                await this.actor.update(updateData);\n            };\n\n            // check-all button\n            html.find('.buttons .check-all').on('click', async (event) => {\n                await settingsUpdate(event, ['enabled'], [true]);\n            });\n            // check-none button\n            html.find('.buttons .check-none').on('click', async (event) => {\n                await settingsUpdate(event, ['enabled'], [false]);\n            });\n            // reset button\n            html.find('.buttons .reset').on('click', async (event) => {\n                await settingsUpdate(event, ['weight', 'enabled'], [1, true]);\n            });\n\n            // collapsibles\n            html.find('.collapsible h4').on('click', async (event) => {\n                const header = $(event.currentTarget);\n                const container = header.closest('.collapsible');\n                const wrapper = header.next('.collapse-content');\n\n                const id: string = container.data('collapse-id');\n                wrapper.toggle('fast', 'swing', () => {\n                    this.collapsibles[id] = wrapper.css('display') === 'none';\n                });\n            });\n        }\n    }\n    return LootApp;\n};\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { permanentSources } from './source/Permanent';\nimport { consumableSources } from './source/Consumable';\nimport { isTreasureSource, TreasureSource, treasureSources } from './source/Treasure';\nimport { scrollTemplateIds, SpellItemType, spellSources, TEMPLATE_PACK_ID, wandTemplateIds } from './source/Spells';\nimport { DataSource, GenType, getPack, isPackSource, isPoolSource, isTableSource } from './source/DataSource';\nimport { AppFilter, FilterType, spellLevelFilters, spellRarityFilters, spellSchoolFilters, spellTraditionFilters } from './Filters';\nimport {\n    ConsumableItem,\n    EquipmentItem,\n    EquipmentType,\n    isArmor,\n    isPhysicalItem,\n    isShield,\n    isSpell,\n    isTreasure,\n    isWeapon,\n    PF2EItem,\n    PhysicalItem,\n    PreciousMaterialGrade,\n    PreciousMaterialType,\n    PriceString,\n    PropertyRuneType,\n    Shield,\n    SpellItem,\n} from '../../types/PF2E';\nimport { isWeaponArmorData, ItemMaterials } from './data/Materials';\nimport { FundamentalRuneType, ItemRunes, PotencyRuneType } from './data/Runes';\nimport { DocumentClassForCompendiumMetadata } from '@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/collections/documentCollections/compendiumCollection';\nimport { MODULE_NAME, QUICK_MYSTIFY, TOOLBOX_NAME } from '../Constants';\nimport { ChatMessageDataConstructorData } from '@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs/chatMessageData';\nimport { DiceRollMode } from '@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/constants.mjs';\nimport ModuleSettings from '../../../FVTT-Common/src/module/ModuleSettings';\nimport { FEATURE_OUTPUT_LOOT_ROLLS, FEATURE_OUTPUT_LOOT_ROLLS_WHISPER } from '../Setup';\n\n/**\n * Returns distinct elements of an array when used to filter an array.\n * @param value\n * @param index\n * @param array\n */\nexport function distinct<T>(value: T, index: number, array: T[]): boolean {\n    return array.indexOf(value) === index;\n}\n\n/**\n * Choose a random element from the array.\n * @param choices The array of choices.\n */\nfunction chooseFromArray<T>(choices: T[]): T {\n    return choices[Math.floor(Math.random() * choices.length)];\n}\n\n/**\n * Return the correct source map for the given item type.\n * @param type Type of sources to fetch.\n */\nexport function dataSourcesOfType(type: GenType): Record<string, DataSource> {\n    switch (type) {\n        case GenType.Treasure:\n            return treasureSources;\n        case GenType.Permanent:\n            return permanentSources;\n        case GenType.Consumable:\n            return consumableSources;\n        case GenType.Spell:\n            return spellSources;\n    }\n}\n\nexport function filtersOfType(type: FilterType): Record<string, AppFilter> {\n    switch (type) {\n        case FilterType.SpellSchool:\n            return spellSchoolFilters;\n        case FilterType.SpellLevel:\n            return spellLevelFilters;\n        case FilterType.SpellTradition:\n            return spellTraditionFilters;\n        case FilterType.SpellRarity:\n            return spellRarityFilters;\n    }\n}\n\n/**\n * Get an item with an id of itemId from the pack with id packId.\n * @param packId\n * @param itemId\n */\nexport async function getItemFromPack<T = DocumentClassForCompendiumMetadata<CompendiumCollection.Metadata>>(\n    packId: string,\n    itemId: string,\n): Promise<T | undefined> {\n    const pack = await game.packs?.get(packId);\n    if (pack === undefined) {\n        return undefined;\n    }\n    const result = await pack.getDocument(itemId);\n    if (!result) {\n        return undefined;\n    }\n    return result as unknown as T;\n}\n\nexport interface DrawOptions {}\nexport interface DrawResult {\n    itemData: PF2EItem;\n    source: DataSource;\n}\nexport interface SpellDrawResult extends DrawResult {}\n\n/**\n * Draw from a series of data sources and return the item data for the items drawn, along with their source tables.\n * @param count The number of items to draw.\n * @param sources The data sources available to be drawn from.\n * @param options Options\n */\nexport async function drawFromSources(count: number, sources: DataSource[], options?: DrawOptions): Promise<DrawResult[]> {\n    if (options === undefined) {\n        options = {};\n    }\n\n    if (sources.length === 0) {\n        return [];\n    }\n    sources = duplicate(sources) as DataSource[];\n\n    let weightTotal = 0;\n    sources.forEach((source) => {\n        weightTotal += source.weight;\n        source.weight = weightTotal;\n    });\n\n    const chooseSource = () => {\n        let choice = sources[0];\n        const random = Math.random() * weightTotal;\n        for (let i = 1; i < sources.length; i++) {\n            if (random < choice.weight) break;\n            choice = sources[i];\n        }\n        return choice;\n    };\n\n    const results: DrawResult[] = [];\n    for (let i = 0; i < count; i++) {\n        const source = chooseSource();\n\n        let item: PF2EItem | undefined;\n        if (isTableSource(source)) {\n            const table = await getItemFromPack<RollTable>(source.tableSource.id, source.id);\n\n            // @ts-ignore\n            const draw: any = await table.roll({ roll: null, recursive: true });\n            const [result]: [LootTableResult] = draw.results;\n\n            if (result.data.resultId) {\n                item = await getItemFromPack(result.data.collection, result.data.resultId);\n            } else {\n                // TODO: Create random weapons/armor/gear of rolled type\n                i -= 1;\n                continue;\n            }\n        } else if (isPackSource(source)) {\n            // @ts-ignore\n            const itemId: string = chooseFromArray(getPack(source).index.contents).key;\n            item = await getItemFromPack(source.id, itemId);\n        } else if (isPoolSource(source)) {\n            item = chooseFromArray(source.elements);\n        } else {\n            throw new Error(`Unknown source type: ${source.sourceType}`);\n        }\n\n        if (item === undefined) {\n            i -= 1;\n            continue;\n        }\n\n        results.push({\n            itemData: item,\n            source: source,\n        });\n    }\n\n    return results;\n}\n\nexport async function createSpellItems(itemDatas: DrawResult[], itemTypes: SpellItemType[]): Promise<PF2EItem[]> {\n    itemDatas = duplicate(itemDatas) as DrawResult[];\n\n    const itemType = (draw: DrawResult): SpellItemType | undefined => {\n        if (draw.itemData.data.level?.value === 10) {\n            if (itemTypes.includes(SpellItemType.Scroll)) {\n                return SpellItemType.Scroll;\n            } else {\n                return undefined;\n            }\n        }\n        return chooseFromArray(itemTypes);\n    };\n\n    const itemName = (itemData: PF2EItem, type: SpellItemType): string => {\n        // TODO: Localization\n        switch (type) {\n            case SpellItemType.Scroll:\n                return `Scroll of ${itemData.name} (Level ${itemData.data.level?.value})`;\n            case SpellItemType.Wand:\n                return `Wand of ${itemData.name} (Level ${itemData.data.level?.value})`;\n        }\n    };\n\n    const templates: Record<SpellItemType, ConsumableItem[]> = {\n        [SpellItemType.Wand]: (await Promise.all(\n            Object.values(wandTemplateIds).map((id) => getItemFromPack<ConsumableItem>(TEMPLATE_PACK_ID, id)),\n        )) as ConsumableItem[],\n        [SpellItemType.Scroll]: (await Promise.all(\n            Object.values(scrollTemplateIds).map((id) => getItemFromPack<ConsumableItem>(TEMPLATE_PACK_ID, id)),\n        )) as ConsumableItem[],\n    };\n\n    let wandMessage: boolean = false;\n    const results: PF2EItem[] = [];\n    while (itemDatas.length > 0) {\n        const drawResult = itemDatas.shift() as DrawResult;\n        const type = itemType(drawResult);\n\n        if (type === undefined) {\n            if (!wandMessage) {\n                ui.notifications?.warn(`Cannot create a magic wand for provided spell: ${drawResult.itemData.name}`);\n                wandMessage = true;\n            }\n            continue;\n        }\n\n        if (isSpell(drawResult.itemData)) {\n            const spellData = drawResult.itemData as SpellItem;\n            const template = duplicate(templates[type][drawResult.itemData.data.level.value - 1]) as ConsumableItem;\n            template.data.traits.value.push(...spellData.data.traditions.value);\n            template.data.traits.rarity.value = spellData.data.traits.rarity.value;\n            template.name = itemName(spellData, type);\n\n            const description = template.data.description.value;\n            template.data.description.value = `@Compendium[pf2e.spells-srd.${spellData._id}]{${spellData.name}}\\n<hr/>${description}`;\n            template.data.spell = {\n                data: duplicate(spellData) as SpellItem,\n                heightenedLevel: spellData.data.level.value,\n            };\n\n            results.push(template);\n        }\n    }\n\n    return results;\n}\n\n/**\n * Roll and create a new set of item data for the values of treasure items in the results\n * @param results The results to duplicate and then modify\n */\nexport async function rollTreasureValues(results: DrawResult[]) {\n    const rollValue = async (source: TreasureSource): Promise<number> => {\n        const roll = await new Roll(source.value).roll({ async: true });\n        return roll.total!;\n    };\n\n    results = duplicate(results) as DrawResult[];\n    for (const result of results) {\n        if (isTreasureSource(result.source) && isTreasure(result.itemData)) {\n            result.itemData.data.value.value = await rollValue(result.source);\n        }\n    }\n\n    return results;\n}\n\nexport async function maybeOutputItemsToChat(results: PhysicalItem[]) {\n    if (!ModuleSettings.instance.get<boolean>(FEATURE_OUTPUT_LOOT_ROLLS)) {\n        return;\n    }\n\n    results = mergeStacks(results) as PhysicalItem[];\n\n    const data: Record<string, any> = {};\n    data['description'] = `Rolled ${results.length} items.`;\n    data['results'] = results.map((item) => {\n        return {\n            id: item._id,\n            icon: item.img,\n            text: `@Compendium[pf2e.equipment-srd.${item._id}]{${item.data.quantity.value}x ${item.name}}`,\n        };\n    });\n\n    const template = await renderTemplate(`modules/${MODULE_NAME}/templates/chat/table-output.html`, data);\n\n    const rollModeArgs: Partial<ChatMessageDataConstructorData> = {};\n    const gmIds = game.users!.filter((user) => user.isGM).map((user) => user.id!);\n    let rollMode = game.settings.get('core', 'rollMode') as DiceRollMode;\n    if (ModuleSettings.instance.get<boolean>(FEATURE_OUTPUT_LOOT_ROLLS_WHISPER)) {\n        rollMode = 'gmroll';\n    }\n\n    switch (rollMode) {\n        case 'blindroll':\n            rollModeArgs.blind = true;\n            rollModeArgs.whisper = gmIds;\n            break;\n        case 'roll':\n            break;\n        case 'selfroll':\n            rollModeArgs.whisper = [game.user?.id!];\n            break;\n        case 'gmroll':\n            rollModeArgs.whisper = gmIds;\n            break;\n    }\n\n    await ChatMessage.create({\n        user: game.user?.id!,\n        content: template,\n        ...rollModeArgs,\n    });\n}\n\nexport interface MergeStacksOptions {\n    /**\n     * Should values be compared when determining uniqueness?\n     */\n    compareValues?: boolean;\n}\n\n/**\n * Get a function that correctly fetches a slug from an item data given the options.\n * @param options\n */\nconst getSlugFunction = (options: MergeStacksOptions) => {\n    // Our slugs are human readable unique ids, in our case when we want to\n    // compare the values as well we can append the value to the slug and get\n    // a pseudo-hash to use for comparison instead\n    let getSlug: (i: PF2EItem) => string;\n    if (options.compareValues) {\n        getSlug = (i: PF2EItem) => {\n            if (isPhysicalItem(i)) {\n                // TODO: Need to convert currency types.\n                return `${i.data.slug}-${i.data.price}`;\n            } else {\n                return i.data.slug;\n            }\n        };\n    } else {\n        getSlug = (i) => i.data.slug;\n    }\n    return getSlug;\n};\n\n/**\n *  * Takes two sets of itemDatas, and attempts to merge all the new datas into the old datas.\n * Returns an array of items that were unable to be merges\n * @param oldDatas\n * @param newDatas\n * @param options\n * @returns [merged, remaining]\n *  merged: The successfully merged old + new items\n *  remaining: items that could not be merged.\n */\nexport function mergeExistingStacks(oldDatas: PF2EItem[], newDatas: PF2EItem[], options?: MergeStacksOptions) {\n    if (options === undefined) {\n        options = { compareValues: true };\n    }\n\n    const getSlug = getSlugFunction(options);\n\n    oldDatas = duplicate(oldDatas) as PF2EItem[];\n    newDatas = duplicate(newDatas) as PF2EItem[];\n\n    const oldSlugs = oldDatas.map(getSlug);\n    const newSlugs = newDatas.map(getSlug);\n\n    for (let i = newSlugs.length - 1; i >= 0; i--) {\n        const index = oldSlugs.indexOf(newSlugs[i]);\n        if (index === -1) continue;\n\n        const sourceItem = oldDatas[index];\n        const targetItem = newDatas[i];\n\n        if (!isPhysicalItem(sourceItem)) continue;\n        if (!isPhysicalItem(targetItem)) continue;\n\n        mergeItem(sourceItem, targetItem);\n        newDatas.splice(i, 1);\n    }\n\n    newDatas = mergeStacks(newDatas, options);\n\n    return [oldDatas, newDatas];\n}\n\n/**\n * Merge an array of item datas into a set of stacked items of the same slug\n *  and optionally also compare and do not merge items based on provided options.\n * @param itemDatas\n * @param options\n */\nexport function mergeStacks(itemDatas: PF2EItem[], options?: MergeStacksOptions) {\n    if (options === undefined) {\n        options = { compareValues: true };\n    }\n\n    itemDatas = duplicate(itemDatas) as PF2EItem[];\n\n    const getSlug = getSlugFunction(options);\n\n    let allSlugs: string[] = itemDatas.map(getSlug);\n    const unqSlugs = allSlugs.filter(distinct);\n    for (const slug of unqSlugs) {\n        // we'll keep the first item in the array, and discard the rest\n        const first = allSlugs.indexOf(slug);\n        const sourceItem = itemDatas[first];\n\n        if (!isPhysicalItem(sourceItem)) continue;\n\n        for (let i = itemDatas.length - 1; i > first; i--) {\n            const targetItem = itemDatas[i];\n\n            if (!isPhysicalItem(targetItem)) continue;\n            if (getSlug(targetItem) !== slug) continue;\n\n            mergeItem(sourceItem, targetItem);\n\n            itemDatas.splice(i, 1);\n            allSlugs.splice(i, 1);\n        }\n    }\n\n    return itemDatas;\n}\n\n/**\n * Merge item a IN PLACE by incrementing it's quantity by item b's quantity.\n * @param a The target item\n * @param b The item to increase the target by\n */\nexport function mergeItem(a: PhysicalItem, b: PhysicalItem) {\n    a.data.quantity.value += b.data.quantity.value;\n}\n\n/**\n * Parse a price ending in {cp|sp|gp|pp} to gp\n * @param price\n */\nexport function parsePrice(price: PriceString): number {\n    const multiples: Record<string, number> = {\n        cp: 1 / 100,\n        sp: 1 / 10,\n        gp: 1,\n        pp: 10,\n    };\n\n    const matches = price.toLowerCase().match(/([0-9]+)(.*)(cp|sp|gp|pp)/);\n    if (matches === null) {\n        return 0;\n    }\n\n    return parseInt(matches[1].trim()) * multiples[matches[3].trim()];\n}\n\n/**\n * Parse a weight string, returning an absolute numeric representation of the weight\n * @param item\n */\nexport function getItemBulkMultiplier(item: PhysicalItem): number {\n    const weightString = item.data.weight.value.trim().toLowerCase();\n    if (weightString.endsWith('l')) {\n        return parseInt(weightString.substr(weightString.length - 1)) / 10;\n    } else {\n        return parseInt(weightString);\n    }\n}\n\n/**\n * Select the correct EquipmentType for this item\n * @param item\n */\nexport function getEquipmentType(item: PF2EItem): EquipmentType | undefined {\n    if (isWeapon(item)) {\n        return EquipmentType.Weapon;\n    } else if (isShield(item)) {\n        return inferShieldType(item) ?? EquipmentType.Shield;\n    } else if (isArmor(item)) {\n        return EquipmentType.Armor;\n    } else {\n        return undefined;\n    }\n}\n\n/**\n * Infer shield type from ac/bulk\n * @param item\n */\nexport function inferShieldType(item: Shield): EquipmentType | undefined {\n    if (item.data.armor.value === 1) {\n        return EquipmentType.Buckler;\n    }\n\n    try {\n        // out of the remaining shields, towers have a bulk more than 1\n        const bulk = parseInt(item.data.weight.value);\n        if (bulk > 1) {\n            return EquipmentType.Tower;\n        } else {\n            return EquipmentType.Shield;\n        }\n    } catch (e) {\n        return undefined;\n    }\n}\n\ninterface FinalPriceAndLevelArgs {\n    item: EquipmentItem;\n    materialType: PreciousMaterialType;\n    materialGradeType: PreciousMaterialGrade;\n    potencyRune: PotencyRuneType;\n    fundamentalRune: FundamentalRuneType;\n    propertyRunes: [PropertyRuneType, PropertyRuneType, PropertyRuneType, PropertyRuneType];\n}\ninterface FinalPriceAndLevelResults {\n    level: number;\n    price: number;\n    hardness: number;\n    hitPoints: number;\n    brokenThreshold: number;\n}\n\n/**\n * Given an item and a set of changes, compute the final price and level of the item.\n * @param args\n */\nexport function calculateFinalPriceAndLevel(args: FinalPriceAndLevelArgs): FinalPriceAndLevelResults {\n    const equipmentType = getEquipmentType(args.item);\n    if (equipmentType === undefined) {\n        return {\n            level: 0,\n            price: 0,\n            hardness: 0,\n            hitPoints: 0,\n            brokenThreshold: 0,\n        };\n    }\n\n    let finalLevel = args.item.data.level.value;\n    let finalPrice = parsePrice(args.item.data.price.value);\n    let finalHardness = args.item.data.hardness.value;\n    let finalHitPoints = args.item.data.hp.value;\n    let finalBreakThreshold = args.item.data.brokenThreshold.value;\n\n    const materialData = ItemMaterials[args.materialType][equipmentType]?.[args.materialGradeType];\n    if (materialData) {\n        finalLevel = Math.max(finalLevel, materialData.level);\n        finalPrice += materialData.price.basePrice;\n        if (isWeaponArmorData(materialData)) {\n            finalPrice += materialData.price.bulkPrice * getItemBulkMultiplier(args.item);\n        } else {\n            finalHardness = materialData.durability.hardness;\n            finalHitPoints = materialData.durability.hitPoints;\n            finalBreakThreshold = materialData.durability.brokenThreshold;\n        }\n    }\n\n    const potencyRuneData = ItemRunes[equipmentType]['potency']?.[args.potencyRune];\n    if (potencyRuneData) {\n        finalLevel = Math.max(finalLevel, potencyRuneData.level);\n        finalPrice += potencyRuneData.price.basePrice;\n    }\n\n    for (const propertyRuneType of args.propertyRunes) {\n        const propertyRuneData = ItemRunes[equipmentType]['property'][propertyRuneType];\n        if (propertyRuneData) {\n            finalLevel = Math.max(finalLevel, propertyRuneData.level);\n            finalPrice += propertyRuneData.price.basePrice;\n        }\n    }\n\n    const fundamentalRuneData = ItemRunes[equipmentType]['fundamental'][args.fundamentalRune];\n    if (fundamentalRuneData) {\n        finalLevel = Math.max(finalLevel, fundamentalRuneData.level);\n        finalPrice += fundamentalRuneData.price.basePrice;\n    }\n\n    return {\n        level: finalLevel,\n        price: finalPrice,\n        hardness: finalHardness,\n        hitPoints: finalHitPoints,\n        brokenThreshold: finalBreakThreshold,\n    };\n}\n\n/**\n * Mystify all items **IN PLACE** so they are unidentified\n * @param items\n */\nexport function mystifyItems(...items: PhysicalItem[]): PhysicalItem[] {\n    for (const item of items) {\n        item.data.identification.status = 'unidentified';\n    }\n    return items;\n}\n\n/**\n * Mystify all items **IN PLACE** if quick mystification is enabled in Toolbox and alt is held in the event\n * @param event\n * @param items\n */\nexport function maybeMystifyItems(event: JQuery.ClickEvent, ...items: PhysicalItem[]): PhysicalItem[] {\n    const mystifyEnabled = game.settings.get(TOOLBOX_NAME, QUICK_MYSTIFY) as boolean;\n    if (mystifyEnabled && event.altKey) {\n        items = mystifyItems(...items);\n    }\n    return items;\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EquipmentItem, EquipmentType, PreciousMaterialGrade, PreciousMaterialType, WeightString } from '../../../types/PF2E';\nimport { getEquipmentType } from '../Utilities';\nimport { numericCommas } from '../Formatting';\n\nexport interface BaseMaterialData {\n    slug: PreciousMaterialGrade;\n    label: string;\n    level: number;\n    price: BasePriceData;\n}\nexport interface BasePriceData {\n    basePrice: number;\n}\nexport interface ScalingPriceData extends BasePriceData {\n    bulkPrice: number;\n    displayPrice: string;\n}\n\nexport interface WeaponArmorData extends BaseMaterialData {\n    price: ScalingPriceData;\n}\nexport function isWeaponArmorData(data: BaseMaterialData): data is WeaponArmorData {\n    return data.price.hasOwnProperty('bulkPrice');\n}\n\nexport interface DurabilityData {\n    hardness: number;\n    hitPoints: number;\n    brokenThreshold: number;\n}\nexport interface ShieldData extends BaseMaterialData {\n    bulk: WeightString;\n    durability: DurabilityData;\n}\n\nconst durabilityData = (hardness: number): DurabilityData => {\n    return {\n        hardness,\n        hitPoints: hardness * 4,\n        brokenThreshold: hardness * 2,\n    };\n};\nconst shieldData = (grade: PreciousMaterialGrade, level: number, basePrice: number, hardness: number, bulk: WeightString): ShieldData => {\n    return {\n        slug: grade,\n        label: `PF2E.PreciousMaterial${grade.capitalize()}Grade`,\n        level,\n        price: { basePrice },\n        bulk,\n        durability: durabilityData(hardness),\n    };\n};\nconst scalingPriceData = (basePrice: number): ScalingPriceData => {\n    return {\n        basePrice,\n        bulkPrice: basePrice / 10,\n        displayPrice: `${numericCommas(basePrice)}gp + ${numericCommas(basePrice / 10)}gp/bulk`,\n    };\n};\nconst weaponArmorData = (grade: PreciousMaterialGrade, level: number, basePrice: number): WeaponArmorData => {\n    return {\n        slug: grade,\n        label: `PF2E.PreciousMaterial${grade.capitalize()}Grade`,\n        level,\n        price: scalingPriceData(basePrice),\n    };\n};\n\ntype GradedMaterialData<T> = {\n    [TGrade in PreciousMaterialGrade]?: T;\n};\n\nexport interface IMaterial {\n    slug: string;\n    label: string;\n    defaultGrade: PreciousMaterialGrade;\n    [EquipmentType.Armor]?: GradedMaterialData<WeaponArmorData>;\n    [EquipmentType.Weapon]?: GradedMaterialData<WeaponArmorData>;\n    [EquipmentType.Buckler]?: GradedMaterialData<ShieldData>;\n    [EquipmentType.Shield]?: GradedMaterialData<ShieldData>;\n    [EquipmentType.Tower]?: GradedMaterialData<ShieldData>;\n}\n\nexport const CREATE_KEY_NONE = '';\nexport const MaterialNone: IMaterial = {\n    slug: CREATE_KEY_NONE,\n    label: 'None',\n    defaultGrade: PreciousMaterialGrade.None,\n    [EquipmentType.Weapon]: {},\n    [EquipmentType.Armor]: {},\n    [EquipmentType.Buckler]: {},\n    [EquipmentType.Shield]: {},\n    [EquipmentType.Tower]: {},\n};\n\nexport const MaterialAdamantine: IMaterial = {\n    slug: 'adamantine',\n    label: 'PF2E.PreciousMaterialAdamantine',\n    defaultGrade: PreciousMaterialGrade.Standard,\n    [EquipmentType.Weapon]: {\n        [PreciousMaterialGrade.Standard]: weaponArmorData(PreciousMaterialGrade.Standard, 11, 1_400),\n        [PreciousMaterialGrade.High]: weaponArmorData(PreciousMaterialGrade.High, 17, 13_000),\n    },\n    [EquipmentType.Armor]: {\n        [PreciousMaterialGrade.Standard]: weaponArmorData(PreciousMaterialGrade.Standard, 12, 1_600),\n        [PreciousMaterialGrade.High]: weaponArmorData(PreciousMaterialGrade.High, 19, 32_000),\n    },\n\n    [EquipmentType.Buckler]: {\n        [PreciousMaterialGrade.Standard]: shieldData(PreciousMaterialGrade.Standard, 8, 400, 8, `L`),\n        [PreciousMaterialGrade.High]: shieldData(PreciousMaterialGrade.High, 16, 8_000, 11, `1`),\n    },\n    [EquipmentType.Shield]: {\n        [PreciousMaterialGrade.Standard]: shieldData(PreciousMaterialGrade.Standard, 8, 440, 8, `L`),\n        [PreciousMaterialGrade.High]: shieldData(PreciousMaterialGrade.High, 16, 8_800, 13, `1`),\n    },\n};\nexport const MaterialColdIron: IMaterial = {\n    slug: 'coldIron',\n    label: 'PF2E.PreciousMaterialColdIron',\n    defaultGrade: PreciousMaterialGrade.Standard,\n    [EquipmentType.Weapon]: {\n        [PreciousMaterialGrade.Low]: weaponArmorData(PreciousMaterialGrade.Low, 2, 40),\n        [PreciousMaterialGrade.Standard]: weaponArmorData(PreciousMaterialGrade.Standard, 10, 880),\n        [PreciousMaterialGrade.High]: weaponArmorData(PreciousMaterialGrade.High, 16, 9_000),\n    },\n    [EquipmentType.Armor]: {\n        [PreciousMaterialGrade.Low]: weaponArmorData(PreciousMaterialGrade.Low, 5, 140),\n        [PreciousMaterialGrade.Standard]: weaponArmorData(PreciousMaterialGrade.Standard, 11, 1_200),\n        [PreciousMaterialGrade.High]: weaponArmorData(PreciousMaterialGrade.High, 18, 20_000),\n    },\n\n    [EquipmentType.Buckler]: {\n        [PreciousMaterialGrade.Low]: shieldData(PreciousMaterialGrade.Low, 2, 30, 3, `L`),\n        [PreciousMaterialGrade.Standard]: shieldData(PreciousMaterialGrade.Standard, 7, 300, 5, `L`),\n        [PreciousMaterialGrade.High]: shieldData(PreciousMaterialGrade.High, 15, 5_000, 8, `L`),\n    },\n    [EquipmentType.Shield]: {\n        [PreciousMaterialGrade.Low]: shieldData(PreciousMaterialGrade.Low, 2, 34, 5, `1`),\n        [PreciousMaterialGrade.Standard]: shieldData(PreciousMaterialGrade.Standard, 7, 340, 7, `1`),\n        [PreciousMaterialGrade.High]: shieldData(PreciousMaterialGrade.High, 15, 5_500, 10, `1`),\n    },\n};\nexport const MaterialDarkwood: IMaterial = {\n    slug: 'darkwood',\n    label: 'PF2E.PreciousMaterialDarkwood',\n    defaultGrade: PreciousMaterialGrade.Standard,\n    [EquipmentType.Weapon]: {\n        [PreciousMaterialGrade.Standard]: weaponArmorData(PreciousMaterialGrade.Standard, 11, 1_400),\n        [PreciousMaterialGrade.High]: weaponArmorData(PreciousMaterialGrade.High, 17, 13_500),\n    },\n    [EquipmentType.Armor]: {\n        [PreciousMaterialGrade.Standard]: weaponArmorData(PreciousMaterialGrade.Standard, 12, 1_600),\n        [PreciousMaterialGrade.High]: weaponArmorData(PreciousMaterialGrade.High, 19, 32_000),\n    },\n\n    [EquipmentType.Buckler]: {\n        [PreciousMaterialGrade.Standard]: shieldData(PreciousMaterialGrade.Standard, 8, 400, 3, `L`),\n        [PreciousMaterialGrade.High]: shieldData(PreciousMaterialGrade.High, 15, 5_000, 6, `L`),\n    },\n    [EquipmentType.Shield]: {\n        [PreciousMaterialGrade.Standard]: shieldData(PreciousMaterialGrade.Standard, 8, 440, 5, `L`),\n        [PreciousMaterialGrade.High]: shieldData(PreciousMaterialGrade.High, 15, 5_500, 8, `L`),\n    },\n    [EquipmentType.Tower]: {\n        [PreciousMaterialGrade.Standard]: shieldData(PreciousMaterialGrade.Standard, 8, 560, 5, `3`),\n        [PreciousMaterialGrade.High]: shieldData(PreciousMaterialGrade.High, 15, 5_500, 8, `3`),\n    },\n};\nexport const MaterialDragonhide: IMaterial = {\n    slug: 'dragonhide',\n    label: 'PF2E.PreciousMaterialDragonhide',\n    defaultGrade: PreciousMaterialGrade.Standard,\n    [EquipmentType.Armor]: {\n        // TODO: +1 circumstance bonus to your AC and saving throws\n        //  against attacks and spells that deal the corresponding\n        //  damage type\n        [PreciousMaterialGrade.Standard]: weaponArmorData(PreciousMaterialGrade.Standard, 12, 1_600),\n        [PreciousMaterialGrade.High]: weaponArmorData(PreciousMaterialGrade.High, 19, 32_000),\n    },\n\n    [EquipmentType.Buckler]: {\n        [PreciousMaterialGrade.Standard]: shieldData(PreciousMaterialGrade.Standard, 8, 400, 2, `L`),\n        [PreciousMaterialGrade.High]: shieldData(PreciousMaterialGrade.High, 16, 8_000, 5, `L`),\n    },\n    [EquipmentType.Shield]: {\n        [PreciousMaterialGrade.Standard]: shieldData(PreciousMaterialGrade.Standard, 8, 440, 4, `1`),\n        [PreciousMaterialGrade.High]: shieldData(PreciousMaterialGrade.High, 16, 8_800, 7, `1`),\n    },\n};\nexport const MaterialMithral: IMaterial = {\n    slug: 'mithral',\n    label: 'PF2E.PreciousMaterialMithral',\n    defaultGrade: PreciousMaterialGrade.Standard,\n    [EquipmentType.Weapon]: {\n        // TODO: Bulk reduced by 1\n        [PreciousMaterialGrade.Standard]: weaponArmorData(PreciousMaterialGrade.Standard, 11, 1_400),\n        [PreciousMaterialGrade.High]: weaponArmorData(PreciousMaterialGrade.High, 17, 13_500),\n    },\n    [EquipmentType.Armor]: {\n        [PreciousMaterialGrade.Standard]: weaponArmorData(PreciousMaterialGrade.Standard, 12, 1_600),\n        [PreciousMaterialGrade.High]: weaponArmorData(PreciousMaterialGrade.High, 19, 32_000),\n    },\n\n    [EquipmentType.Buckler]: {\n        [PreciousMaterialGrade.Standard]: shieldData(PreciousMaterialGrade.Standard, 8, 400, 3, `L`),\n        [PreciousMaterialGrade.High]: shieldData(PreciousMaterialGrade.High, 16, 8_000, 6, `L`),\n    },\n    [EquipmentType.Shield]: {\n        [PreciousMaterialGrade.Standard]: shieldData(PreciousMaterialGrade.Standard, 8, 440, 5, `L`),\n        [PreciousMaterialGrade.High]: shieldData(PreciousMaterialGrade.High, 16, 8_800, 8, `L`),\n    },\n};\nexport const MaterialOrichalcum: IMaterial = {\n    slug: 'orichalcum',\n    label: 'PF2E.PreciousMaterialOrichalcum',\n    defaultGrade: PreciousMaterialGrade.High,\n    [EquipmentType.Weapon]: {\n        // TODO: Speed costs half the normal price\n        [PreciousMaterialGrade.High]: weaponArmorData(PreciousMaterialGrade.High, 18, 22_500),\n    },\n    [EquipmentType.Armor]: {\n        // TODO: +1 circumstance bonus to initiative rolls\n        [PreciousMaterialGrade.High]: weaponArmorData(PreciousMaterialGrade.High, 20, 55_000),\n    },\n\n    [EquipmentType.Buckler]: {\n        [PreciousMaterialGrade.High]: shieldData(PreciousMaterialGrade.High, 17, 12_000, 14, `L`),\n    },\n    [EquipmentType.Shield]: {\n        [PreciousMaterialGrade.High]: shieldData(PreciousMaterialGrade.High, 17, 13_200, 16, `1`),\n    },\n};\nexport const MaterialSilver: IMaterial = {\n    slug: 'silver',\n    label: 'PF2E.PreciousMaterialSilver',\n    defaultGrade: PreciousMaterialGrade.Standard,\n    [EquipmentType.Weapon]: {\n        [PreciousMaterialGrade.Low]: weaponArmorData(PreciousMaterialGrade.Low, 2, 40),\n        [PreciousMaterialGrade.Standard]: weaponArmorData(PreciousMaterialGrade.Standard, 10, 880),\n        [PreciousMaterialGrade.High]: weaponArmorData(PreciousMaterialGrade.High, 16, 9_000),\n    },\n    [EquipmentType.Armor]: {\n        [PreciousMaterialGrade.Low]: weaponArmorData(PreciousMaterialGrade.Low, 5, 140),\n        [PreciousMaterialGrade.Standard]: weaponArmorData(PreciousMaterialGrade.Standard, 11, 1_200),\n        [PreciousMaterialGrade.High]: weaponArmorData(PreciousMaterialGrade.High, 18, 20_000),\n    },\n\n    [EquipmentType.Buckler]: {\n        [PreciousMaterialGrade.Low]: shieldData(PreciousMaterialGrade.Low, 2, 30, 1, `L`),\n        [PreciousMaterialGrade.Standard]: shieldData(PreciousMaterialGrade.Standard, 7, 300, 3, `L`),\n        [PreciousMaterialGrade.High]: shieldData(PreciousMaterialGrade.High, 15, 5_000, 6, `L`),\n    },\n    [EquipmentType.Shield]: {\n        [PreciousMaterialGrade.Low]: shieldData(PreciousMaterialGrade.Low, 2, 34, 3, `1`),\n        [PreciousMaterialGrade.Standard]: shieldData(PreciousMaterialGrade.Standard, 7, 340, 5, `1`),\n        [PreciousMaterialGrade.High]: shieldData(PreciousMaterialGrade.High, 15, 5_500, 8, `1`),\n    },\n};\nexport const MaterialSovereignSteel: IMaterial = {\n    slug: 'sovereignSteel',\n    label: 'PF2E.PreciousMaterialSovereignSteel',\n    defaultGrade: PreciousMaterialGrade.Standard,\n    [EquipmentType.Weapon]: {\n        [PreciousMaterialGrade.Standard]: weaponArmorData(PreciousMaterialGrade.Standard, 12, 1_600),\n        [PreciousMaterialGrade.High]: weaponArmorData(PreciousMaterialGrade.High, 19, 32_000),\n    },\n    [EquipmentType.Armor]: {\n        [PreciousMaterialGrade.Standard]: weaponArmorData(PreciousMaterialGrade.Standard, 13, 2_400),\n        [PreciousMaterialGrade.High]: weaponArmorData(PreciousMaterialGrade.High, 20, 50_000),\n    },\n};\nexport const MaterialWarpglass: IMaterial = {\n    slug: 'warpglass',\n    label: 'PF2E.PreciousMaterialWarpglass',\n    defaultGrade: PreciousMaterialGrade.Standard,\n    [EquipmentType.Weapon]: {\n        [PreciousMaterialGrade.High]: weaponArmorData(PreciousMaterialGrade.High, 17, 14_000),\n    },\n};\n\nexport const ItemMaterials: Record<PreciousMaterialType, IMaterial> = {\n    '': MaterialNone,\n    'adamantine': MaterialAdamantine,\n    'coldIron': MaterialColdIron,\n    'darkwood': MaterialDarkwood,\n    'dragonhide': MaterialDragonhide,\n    'mithral': MaterialMithral,\n    'orichalcum': MaterialOrichalcum,\n    'silver': MaterialSilver,\n    'sovereignSteel': MaterialSovereignSteel,\n    'warpglass': MaterialWarpglass,\n};\n\n/**\n * Get all valid materials that could be used for this item.\n * @param item\n */\nexport const getValidMaterials = (item: EquipmentItem): Partial<Record<PreciousMaterialType, IMaterial>> => {\n    const equipmentType = getEquipmentType(item);\n    if (!equipmentType) {\n        return {};\n    }\n\n    const materials: Partial<Record<PreciousMaterialType, IMaterial>> = {};\n\n    for (const [materialType, materialData] of Object.entries(ItemMaterials)) {\n        if (!materialData.hasOwnProperty(equipmentType)) {\n            continue;\n        }\n        materials[materialType as PreciousMaterialType] = materialData;\n    }\n\n    return materials;\n};\n\n/**\n * Get valid material grade data for the item and specified material\n * @param item\n * @param materialType\n */\nexport const getValidMaterialGrades = (item: EquipmentItem, materialType: PreciousMaterialType): GradedMaterialData<WeaponArmorData | ShieldData> => {\n    const equipmentType = getEquipmentType(item);\n    if (!equipmentType) {\n        return {};\n    }\n\n    if (ItemMaterials[materialType].hasOwnProperty(equipmentType)) {\n        return ItemMaterials[materialType][equipmentType]!;\n    } else {\n        return {};\n    }\n};\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EquipmentItem, EquipmentType, PropertyRuneType, ResiliencyRuneType, StrikingRuneType, ZeroToFour } from '../../../types/PF2E';\nimport { BasePriceData, CREATE_KEY_NONE } from './Materials';\nimport { getEquipmentType } from '../Utilities';\n\nexport interface IRune {\n    slug: string;\n    label: string;\n    level: number;\n    price: BasePriceData;\n}\n\nconst RuneNone: IRune = {\n    slug: CREATE_KEY_NONE,\n    label: 'None',\n    price: {\n        basePrice: 0,\n    },\n    level: 0,\n};\n\nexport type FundamentalRuneType = StrikingRuneType | ResiliencyRuneType;\nexport type PotencyRuneType = `${ZeroToFour}`;\n\nconst price = (basePrice: number) => {\n    return {\n        basePrice,\n    };\n};\n\nexport interface IRuneMap {\n    potency?: Record<PotencyRuneType, IRune>;\n    fundamental: Record<string, IRune>;\n    property: Record<string, IRune>;\n}\nexport type ItemRunes = {\n    [EquipmentType.Weapon]: IRuneMap;\n    [EquipmentType.Armor]: IRuneMap;\n    [EquipmentType.Buckler]: IRuneMap;\n    [EquipmentType.Shield]: IRuneMap;\n    [EquipmentType.Tower]: IRuneMap;\n};\nexport const ItemRunes: ItemRunes = {\n    [EquipmentType.Weapon]: {\n        potency: {\n            '0': {\n                ...RuneNone,\n            },\n            '1': {\n                slug: '1',\n                label: 'PF2E.WeaponPotencyRune1',\n                level: 2,\n                price: price(35),\n            },\n            '2': {\n                slug: '2',\n                label: 'PF2E.WeaponPotencyRune2',\n                level: 10,\n                price: price(935),\n            },\n            '3': {\n                slug: '3',\n                label: 'PF2E.WeaponPotencyRune3',\n                level: 16,\n                price: price(8935),\n            },\n            '4': {\n                slug: '4',\n                label: 'PF2E.WeaponPotencyRune4',\n                level: 25,\n                price: price(0),\n            },\n        },\n        fundamental: {\n            [CREATE_KEY_NONE]: {\n                ...RuneNone,\n            },\n            striking: {\n                slug: 'striking',\n                label: 'PF2E.ArmorStrikingRune',\n                price: price(65),\n                level: 4,\n            },\n            greaterStriking: {\n                slug: 'greaterStriking',\n                label: 'PF2E.ArmorGreaterStrikingRune',\n                price: price(1065),\n                level: 12,\n            },\n            majorStriking: {\n                slug: 'majorStriking',\n                label: 'PF2E.ArmorMajorStrikingRune',\n                price: price(31065),\n                level: 19,\n            },\n        },\n        property: {\n            [CREATE_KEY_NONE]: {\n                ...RuneNone,\n            },\n            anarchic: {\n                slug: 'anarchic',\n                label: 'PF2E.WeaponPropertyRuneAnarchic',\n                price: price(1400),\n                level: 11,\n            },\n            ancestralEchoing: {\n                slug: 'ancestralEchoing',\n                label: 'PF2E.WeaponPropertyRuneAncestralEchoing',\n                price: price(9500),\n                level: 15,\n            },\n            axiomatic: {\n                slug: 'axiomatic',\n                label: 'PF2E.WeaponPropertyRuneAxiomatic',\n                price: price(1400),\n                level: 11,\n            },\n            bloodbane: {\n                slug: 'bloodbane',\n                label: 'PF2E.WeaponPropertyRuneBloodbane',\n                price: price(475),\n                level: 8,\n            },\n            corrosive: {\n                slug: 'corrosive',\n                label: 'PF2E.WeaponPropertyRuneCorrosive',\n                price: price(500),\n                level: 8,\n            },\n            dancing: {\n                slug: 'dancing',\n                label: 'PF2E.WeaponPropertyRuneDancing',\n                price: price(2700),\n                level: 13,\n            },\n            disrupting: {\n                slug: 'disrupting',\n                label: 'PF2E.WeaponPropertyRuneDisrupting',\n                price: price(150),\n                level: 5,\n            },\n            fearsome: {\n                slug: 'fearsome',\n                label: 'PF2E.WeaponPropertyRuneFearsome',\n                price: price(160),\n                level: 5,\n            },\n            flaming: {\n                slug: 'flaming',\n                label: 'PF2E.WeaponPropertyRuneFlaming',\n                price: price(500),\n                level: 8,\n            },\n            frost: {\n                slug: 'frost',\n                label: 'PF2E.WeaponPropertyRuneFrost',\n                price: price(500),\n                level: 8,\n            },\n            ghostTouch: {\n                slug: 'ghostTouch',\n                label: 'PF2E.WeaponPropertyRuneGhostTouch',\n                price: price(75),\n                level: 4,\n            },\n            greaterBloodbane: {\n                slug: 'greaterBloodbane',\n                label: 'PF2E.WeaponPropertyRuneGreaterBloodbane',\n                price: price(6500),\n                level: 15,\n            },\n            greaterCorrosive: {\n                slug: 'greaterCorrosive',\n                label: 'PF2E.WeaponPropertyRuneGreaterCorrosive',\n                price: price(6500),\n                level: 15,\n            },\n            greaterDisrupting: {\n                slug: 'greaterDisrupting',\n                label: 'PF2E.WeaponPropertyRuneGreaterDisrupting',\n                price: price(4300),\n                level: 14,\n            },\n            greaterFearsome: {\n                slug: 'greaterFearsome',\n                label: 'PF2E.WeaponPropertyRuneGreaterFearsome',\n                price: price(2000),\n                level: 12,\n            },\n            greaterFlaming: {\n                slug: 'greaterFlaming',\n                label: 'PF2E.WeaponPropertyRuneGreaterFlaming',\n                price: price(6500),\n                level: 15,\n            },\n            greaterFrost: {\n                slug: 'greaterFrost',\n                label: 'PF2E.WeaponPropertyRuneGreaterFrost',\n                price: price(6500),\n                level: 15,\n            },\n            greaterShock: {\n                slug: 'greaterShock',\n                label: 'PF2E.WeaponPropertyRuneGreaterShock',\n                price: price(6500),\n                level: 15,\n            },\n            greaterThundering: {\n                slug: 'greaterThundering',\n                label: 'PF2E.WeaponPropertyRuneGreaterThundering',\n                price: price(6500),\n                level: 15,\n            },\n            grievous: {\n                slug: 'grievous',\n                label: 'PF2E.WeaponPropertyRuneGrievous',\n                price: price(700),\n                level: 9,\n            },\n            holy: {\n                slug: 'holy',\n                label: 'PF2E.WeaponPropertyRuneHoly',\n                price: price(1400),\n                level: 11,\n            },\n            keen: {\n                slug: 'keen',\n                label: 'PF2E.WeaponPropertyRuneKeen',\n                price: price(3000),\n                level: 13,\n            },\n            kinWarding: {\n                slug: 'kinWarding',\n                label: 'PF2E.WeaponPropertyRuneKinWarding',\n                price: price(52),\n                level: 3,\n            },\n            pacifying: {\n                slug: 'pacifying',\n                label: 'PF2E.WeaponPropertyRunePacifying',\n                price: price(150),\n                level: 5,\n            },\n            returning: {\n                slug: 'returning',\n                label: 'PF2E.WeaponPropertyRuneReturning',\n                price: price(55),\n                level: 3,\n            },\n            serrating: {\n                slug: 'serrating',\n                label: 'PF2E.WeaponPropertyRuneSerrating',\n                price: price(1000),\n                level: 10,\n            },\n            shifting: {\n                slug: 'shifting',\n                label: 'PF2E.WeaponPropertyRuneShifting',\n                price: price(225),\n                level: 6,\n            },\n            shock: {\n                slug: 'shock',\n                label: 'PF2E.WeaponPropertyRuneShock',\n                price: price(500),\n                level: 8,\n            },\n            speed: {\n                slug: 'speed',\n                label: 'PF2E.WeaponPropertyRuneSpeed',\n                price: price(10000),\n                level: 16,\n            },\n            spellStoring: {\n                slug: 'spellStoring',\n                label: 'PF2E.WeaponPropertyRuneSpellStoring',\n                price: price(2700),\n                level: 13,\n            },\n            thundering: {\n                slug: 'thundering',\n                label: 'PF2E.WeaponPropertyRuneThundering',\n                price: price(500),\n                level: 8,\n            },\n            unholy: {\n                slug: 'unholy',\n                label: 'PF2E.WeaponPropertyRuneUnholy',\n                price: price(1400),\n                level: 11,\n            },\n            vorpal: {\n                slug: 'vorpal',\n                label: 'PF2E.WeaponPropertyRuneVorpal',\n                price: price(15000),\n                level: 17,\n            },\n            wounding: {\n                slug: 'wounding',\n                label: 'PF2E.WeaponPropertyRuneWounding',\n                price: price(340),\n                level: 7,\n            },\n        },\n    },\n    [EquipmentType.Armor]: {\n        potency: {\n            '0': {\n                ...RuneNone,\n            },\n            '1': {\n                slug: '1',\n                label: 'PF2E.ArmorPotencyRune1',\n                level: 5,\n                price: price(160),\n            },\n            '2': {\n                slug: '2',\n                label: 'PF2E.ArmorPotencyRune2',\n                level: 11,\n                price: price(1060),\n            },\n            '3': {\n                slug: '3',\n                label: 'PF2E.ArmorPotencyRune3',\n                level: 18,\n                price: price(20560),\n            },\n            '4': {\n                slug: '4',\n                label: 'PF2E.ArmorPotencyRune4',\n                level: 25,\n                price: price(0),\n            },\n        },\n        fundamental: {\n            [CREATE_KEY_NONE]: {\n                ...RuneNone,\n            },\n            resilient: {\n                slug: 'resilient',\n                label: 'PF2E.ArmorResilientRune',\n                level: 8,\n                price: price(340),\n            },\n            greaterResilient: {\n                slug: 'greaterResilient',\n                label: 'PF2E.ArmorGreaterResilientRune',\n                level: 14,\n                price: price(3440),\n            },\n            majorResilient: {\n                slug: 'majorResilient',\n                label: 'PF2E.ArmorMajorResilientRune',\n                level: 20,\n                price: price(49440),\n            },\n        },\n        property: {\n            [CREATE_KEY_NONE]: {\n                ...RuneNone,\n            },\n            acidResistant: {\n                slug: 'acidResistant',\n                label: 'PF2E.ArmorPropertyRuneAcidResistant',\n                price: price(420),\n                level: 8,\n            },\n            antimagic: {\n                slug: 'antimagic',\n                label: 'PF2E.ArmorPropertyRuneAntimagic',\n                price: price(6500),\n                level: 15,\n            },\n            coldResistant: {\n                slug: 'coldResistant',\n                label: 'PF2E.ArmorPropertyRuneColdResistant',\n                price: price(420),\n                level: 8,\n            },\n            electricityResistant: {\n                slug: 'electricityResistant',\n                label: 'PF2E.ArmorPropertyRuneElectricityResistant',\n                price: price(420),\n                level: 8,\n            },\n            ethereal: {\n                slug: 'ethereal',\n                label: 'PF2E.ArmorPropertyRuneEthereal',\n                price: price(13500),\n                level: 17,\n            },\n            fireResistant: {\n                slug: 'fireResistant',\n                label: 'PF2E.ArmorPropertyRuneFireResistant',\n                price: price(420),\n                level: 8,\n            },\n            fortification: {\n                slug: 'fortification',\n                label: 'PF2E.ArmorPropertyRuneFortification',\n                price: price(2000),\n                level: 12,\n            },\n            glamered: {\n                slug: 'glamered',\n                label: 'PF2E.ArmorPropertyRuneGlamered',\n                price: price(140),\n                level: 5,\n            },\n            greaterAcidResistant: {\n                slug: 'greaterAcidResistant',\n                label: 'PF2E.ArmorPropertyRuneGreaterAcidResistant',\n                price: price(1650),\n                level: 12,\n            },\n            greaterColdResistant: {\n                slug: 'greaterColdResistant',\n                label: 'PF2E.ArmorPropertyRuneGreaterColdResistant',\n                price: price(1650),\n                level: 12,\n            },\n            greaterElectricityResistant: {\n                slug: 'greaterElectricityResistant',\n                label: 'PF2E.ArmorPropertyRuneGreaterElectricityResistant',\n                price: price(1650),\n                level: 12,\n            },\n            greaterFireResistant: {\n                slug: 'greaterFireResistant',\n                label: 'PF2E.ArmorPropertyRuneGreaterFireResistant',\n                price: price(1650),\n                level: 12,\n            },\n            greaterFortification: {\n                slug: 'greaterFortification',\n                label: 'PF2E.ArmorPropertyRuneGreaterFortification',\n                price: price(24000),\n                level: 18,\n            },\n            greaterInvisibility: {\n                slug: 'greaterInvisibility',\n                label: 'PF2E.ArmorPropertyRuneGreaterInvisibility',\n                price: price(1000),\n                level: 10,\n            },\n            greaterReady: {\n                slug: 'greaterReady',\n                label: 'PF2E.ArmorPropertyRuneGreaterReady',\n                price: price(1200),\n                level: 11,\n            },\n            greaterShadow: {\n                slug: 'greaterShadow',\n                label: 'PF2E.ArmorPropertyRuneGreaterShadow',\n                price: price(650),\n                level: 9,\n            },\n            greaterSlick: {\n                slug: 'greaterSlick',\n                label: 'PF2E.ArmorPropertyRuneGreaterSlick',\n                price: price(450),\n                level: 8,\n            },\n            greaterWinged: {\n                slug: 'greaterWinged',\n                label: 'PF2E.ArmorPropertyRuneGreaterWinged',\n                price: price(35000),\n                level: 19,\n            },\n            invisibility: {\n                slug: 'invisibility',\n                label: 'PF2E.ArmorPropertyRuneInvisibility',\n                price: price(500),\n                level: 8,\n            },\n            majorShadow: {\n                slug: 'majorShadow',\n                label: 'PF2E.ArmorPropertyRuneMajorShadow',\n                price: price(14000),\n                level: 17,\n            },\n            majorSlick: {\n                slug: 'majorSlick',\n                label: 'PF2E.ArmorPropertyRuneMajorSlick',\n                price: price(9000),\n                level: 16,\n            },\n            ready: {\n                slug: 'ready',\n                label: 'PF2E.ArmorPropertyRuneReady',\n                price: price(200),\n                level: 6,\n            },\n            rockBraced: {\n                slug: 'rockBraced',\n                label: 'PF2E.ArmorPropertyRuneRockBraced',\n                price: price(3000),\n                level: 13,\n            },\n            shadow: {\n                slug: 'shadow',\n                label: 'PF2E.ArmorPropertyRuneShadow',\n                price: price(55),\n                level: 3,\n            },\n            sinisterKnight: {\n                slug: 'sinisterKnight',\n                label: 'PF2E.ArmorPropertyRuneSinisterKnight',\n                price: price(500),\n                level: 8,\n            },\n            slick: {\n                slug: 'slick',\n                label: 'PF2E.ArmorPropertyRuneSlick',\n                price: price(45),\n                level: 3,\n            },\n            winged: {\n                slug: 'winged',\n                label: 'PF2E.ArmorPropertyRuneWinged',\n                price: price(2500),\n                level: 13,\n            },\n        },\n    },\n\n    [EquipmentType.Buckler]: {\n        fundamental: {},\n        property: {},\n    },\n    [EquipmentType.Shield]: {\n        fundamental: {},\n        property: {},\n    },\n    [EquipmentType.Tower]: {\n        fundamental: {},\n        property: {},\n    },\n};\n\n/**\n * Get all valid runes that could be used for this item.\n * @param item\n */\nexport const getValidPropertyRunes = (item: EquipmentItem): Partial<Record<PropertyRuneType, IRune>> => {\n    const equipmentType = getEquipmentType(item);\n    if (!equipmentType) {\n        return {};\n    }\n\n    return ItemRunes[equipmentType]['property'];\n};\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SourceType, TableSource, GenType, tableStoreId, ordinalNumber } from './DataSource';\nimport { INamed } from './Mixins';\nimport { RollableTablesPack } from './RollableTables';\n\nexport interface ConsumableSource extends TableSource, INamed {}\n\nconst tableIds: string[] = [\n    'tlX5PLwar8b1tmiQ',\n    'g30jZWCJEiK1RlIa',\n    'mDPLoPYwuPo3o0Wj',\n    '0WpkRFm8SyfwVCP6',\n    'zRyuNslbOzN9oW5u',\n    'A68C9O0vtWbFXbfS',\n    'E9ZNupg1p4yLpfrd',\n    'UmJGUUgN9TQtFQDI',\n    'XAJFTpuo8qrcW30P',\n    'AIBvZzHidUXxZfEF',\n    'Ca7vD8PZtMPqVuHu',\n    '5HHqLskEnfjxpkCO',\n    'awfTQvkm7NrRjRaQ',\n    'Vhuuy0vFJV5tYldR',\n    'Af7beeFZhtvDAZaM',\n    'aomFSKgGl52z7tdX',\n    'YyQkwd1PksU1Lno4',\n    'PSs31Xj5RfszMbAe',\n    'pH85KVl31VBdENuy',\n    'nusyoQjLs0ZxifRd',\n];\nconst consumableSourceTemplate = (level: number): ConsumableSource => {\n    return {\n        id: tableIds[level],\n        storeId: tableStoreId(tableIds[level]),\n        name: `${ordinalNumber(level + 1)}-Level`,\n        tableSource: RollableTablesPack,\n        sourceType: SourceType.Table,\n        itemType: GenType.Permanent,\n        weight: 1,\n        enabled: true,\n    };\n};\n\nexport const consumableSources: Record<string, ConsumableSource> = tableIds.reduce(\n    (prev, curr, indx) =>\n        mergeObject(prev, {\n            [tableStoreId(curr)]: consumableSourceTemplate(indx),\n        }),\n    {},\n);\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IEnabled, IWeighted } from './Mixins';\nimport { PF2EItem } from '../../../types/PF2E';\n\nexport enum SourceType {\n    Table = 'table',\n    Pack = 'pack',\n    Pool = 'pool',\n}\n\nexport enum GenType {\n    Treasure = 'treasure',\n    Permanent = 'permanent',\n    Consumable = 'consumable',\n    Spell = 'spell',\n}\n\nexport const tableStoreId = (id: string) => `table-${id}`;\nexport const filterStoreId = (id: string) => `filter-${id}`;\n\nexport interface IStorable {\n    id: string | null;\n    storeId: string | null;\n}\nexport interface DataSource extends IStorable, IWeighted, IEnabled {\n    id: string | null;\n    sourceType: SourceType;\n    itemType?: GenType;\n}\n\nexport interface TableSource extends DataSource {\n    // id is table id in this case\n    id: string;\n    sourceType: SourceType.Table;\n    // Where to find the table.\n    tableSource: PackSource;\n}\nexport function isTableSource(source: DataSource): source is TableSource {\n    return source.sourceType === SourceType.Table;\n}\nexport async function getTableSourceTable(source: TableSource): Promise<RollTable> {\n    return await getFromPackSource(source.tableSource, source.id);\n}\n\nexport interface PackSource extends DataSource {\n    // id is compendium pack id in this case\n    id: string;\n    sourceType: SourceType.Pack;\n}\nexport function isPackSource(source: DataSource): source is PackSource {\n    return source.sourceType === SourceType.Pack;\n}\nexport function getPack(source: PackSource) {\n    return game.packs.get(source.id);\n}\nexport async function getFromPackSource<TResult = PF2EItem>(source: PackSource, documentId: string): Promise<TResult> {\n    const pack = game.packs.get(source.id);\n    // @ts-ignore\n    return await pack.getDocument(documentId);\n}\nexport async function getPackSourceContents(source: PackSource): Promise<PF2EItem[]> {\n    const pack = game.packs.get(source.id);\n    // @ts-ignore\n    return await pack.getDocuments();\n}\n\nexport interface PoolSource extends DataSource {\n    // id will be null in this case\n    id: null;\n    sourceType: SourceType.Pool;\n    elements: PF2EItem[];\n}\nexport function isPoolSource(source: DataSource): source is PoolSource {\n    return source.sourceType === SourceType.Pool;\n}\n\nexport type FilteredSource<TSource extends DataSource, TItem extends PF2EItem = PF2EItem> = TSource & {\n    getFiltered: (source: TSource) => Promise<TItem[]>;\n};\n\n/**\n * Convert a number to an ordinal string (1st, 2nd, 3rd...)\n * @param n The number to convert.\n */\nexport function ordinalNumber(n: number): string {\n    const suffixes = ['th', 'st', 'nd', 'rd'];\n    const index = n % 100;\n    const ordinal = suffixes[(index - 20) % 10] || suffixes[index] || suffixes[0];\n    return `${n}${ordinal}`;\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SourceType, TableSource, GenType, tableStoreId, ordinalNumber } from './DataSource';\nimport { INamed } from './Mixins';\nimport { RollableTablesPack } from './RollableTables';\n\nexport interface PermanentSource extends TableSource, INamed {}\n\n// const leveledSources = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''];\n// ordered 1st through 20th level\nconst tableIds: string[] = [\n    'JyDn13oc0MdLjpyw',\n    'q6hhGYSee35XxKE8',\n    'Ow2zoRUSX0s7JjMo',\n    'k0Al2PJni2NTtdIY',\n    'k5bG37570BbflxR2',\n    '9xol7FdCfaU585WR',\n    'r8F8mI2BZU6nOMQB',\n    'QoEkRoteKJwHHVRd',\n    'AJOYeeeF3E8UC7KF',\n    'W0qudblot2Z9Vu86',\n    'ood552HB1onSdJFS',\n    'uzkmxRIn4CtzfP47',\n    'eo7kjM8xv6KD5h5q',\n    'cBpFoBUNSApkvP6L',\n    'X2QkgnYrda4mV5v3',\n    'J7XfeVrfUj72IkRY',\n    '0jlGmwn6YGqsfG1q',\n    '6FmhLLYH94xhucIs',\n    'gkdB45QC0u1WeiRA',\n    'NOkobOGi0nqsboHI',\n];\nconst permanentSourceTemplate = (level: number): PermanentSource => {\n    return {\n        id: tableIds[level],\n        storeId: tableStoreId(tableIds[level]),\n        name: `${ordinalNumber(level + 1)}-Level`,\n        tableSource: RollableTablesPack,\n        sourceType: SourceType.Table,\n        itemType: GenType.Permanent,\n        weight: 1,\n        enabled: true,\n    };\n};\n\nexport const permanentSources: Record<string, PermanentSource> = tableIds.reduce(\n    (prev, curr, indx) =>\n        mergeObject(prev, {\n            [tableStoreId(curr)]: permanentSourceTemplate(indx),\n        }),\n    {},\n);\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { INamed } from './Mixins';\nimport { PackSource, SourceType, tableStoreId } from './DataSource';\n\nexport interface RollableTableSource extends PackSource, INamed {}\n\nexport const RollableTablesPack: RollableTableSource = {\n    id: 'pf2e.rollable-tables',\n    storeId: tableStoreId('rollable-tables'),\n    name: 'Rollable Tables',\n    sourceType: SourceType.Pack,\n    weight: 1,\n    enabled: true,\n};\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PackSource, SourceType, GenType, tableStoreId} from './DataSource';\nimport { INamed } from './Mixins';\n\nexport enum SpellSchool {\n    Abjuration = 'abjuration',\n    Conjuration = 'conjuration',\n    Divination = 'divination',\n    Enchantment = 'enchantment',\n    Evocation = 'evocation',\n    Illusion = 'illusion',\n    Necromancy = 'necromancy',\n    Transmutation = 'transmutation',\n}\n\nexport enum SpellItemType {\n    Wand = 'wand',\n    Scroll = 'scroll',\n}\n\nexport enum SpellTradition {\n    Arcane = 'arcane',\n    Divine = 'divine',\n    Primal = 'primal',\n    Occult = 'occult',\n}\n\nexport interface SpellSource extends PackSource, INamed {}\n\nexport const spellSources: Record<string, SpellSource> = {\n    'spells-srd': {\n        id: 'pf2e.spells-srd',\n        storeId: tableStoreId('spells-srd'),\n        name: 'SRD Spells',\n        sourceType: SourceType.Pack,\n        itemType: GenType.Spell,\n        weight: 1,\n        enabled: true,\n    },\n};\n\nexport const TEMPLATE_PACK_ID = 'pf2e.equipment-srd';\n\nexport const scrollTemplateIds = {\n    1: 'RjuupS9xyXDLgyIr',\n    2: 'Y7UD64foDbDMV9sx',\n    3: 'ZmefGBXGJF3CFDbn',\n    4: 'QSQZJ5BC3DeHv153',\n    5: 'tjLvRWklAylFhBHQ',\n    6: '4sGIy77COooxhQuC',\n    7: 'fomEZZ4MxVVK3uVu',\n    8: 'iPki3yuoucnj7bIt',\n    9: 'cFHomF3tty8Wi1e5',\n    10: 'o1XIHJ4MJyroAHfF',\n};\nexport const wandTemplateIds = {\n    1: 'UJWiN0K3jqVjxvKk',\n    2: 'vJZ49cgi8szuQXAD',\n    3: 'wrDmWkGxmwzYtfiA',\n    4: 'Sn7v9SsbEDMUIwrO',\n    5: '5BF7zMnrPYzyigCs',\n    6: 'kiXh4SUWKr166ZeM',\n    7: 'nmXPj9zuMRQBNT60',\n    8: 'Qs8RgNH6thRPv2jt',\n    9: 'Fgv722039TVM5JTc',\n};\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSource, isTableSource, GenType, SourceType, TableSource, tableStoreId } from './DataSource';\nimport { INamed } from './Mixins';\nimport { RollableTablesPack } from './RollableTables';\n\nexport enum Denomination {\n    Copper = 'cp',\n    Silver = 'sp',\n    Gold = 'gp',\n    Platinum = 'pp',\n}\n\nexport interface TreasureSource extends TableSource, INamed {\n    value: string;\n    denomination: Denomination;\n}\nexport function isTreasureSource(source: DataSource): source is TreasureSource {\n    return isTableSource(source) && source.hasOwnProperty('value');\n}\n\ntype UniqueTableData = {\n    id: string;\n    name: string;\n    value: string;\n    denomination: Denomination;\n};\n\nconst semipreciousTables: UniqueTableData[] = [\n    {\n        id: 'ucTtWBPXViITI8wr',\n        name: 'Lesser Semiprecious Stones',\n        value: '1d4*5',\n        denomination: Denomination.Silver,\n    },\n    {\n        id: 'mCzuipepJAJcuY0H',\n        name: 'Moderate Semiprecious Stones',\n        value: '1d4*25',\n        denomination: Denomination.Silver,\n    },\n    {\n        id: 'P3HzJtS2iUUWMedJ',\n        name: 'Greater Semiprecious Stones',\n        value: '1d4*5',\n        denomination: Denomination.Gold,\n    },\n];\nconst preciousTables: UniqueTableData[] = [\n    {\n        id: 'ZCYAQplm6zORj6eN',\n        name: 'Lesser Precious Stones',\n        value: '1d4*50',\n        denomination: Denomination.Gold,\n    },\n    {\n        id: 'wCXPh3nft3qWuxro',\n        name: 'Moderate Precious Stones',\n        value: '1d4*100',\n        denomination: Denomination.Gold,\n    },\n    {\n        id: 'teZCrF2SOghusarb',\n        name: 'Greater Precious Stones',\n        value: '1d4*500',\n        denomination: Denomination.Gold,\n    },\n];\nconst artTables: UniqueTableData[] = [\n    {\n        id: 'ME37cisDz8J2m0H7',\n        name: 'Minor Art Object',\n        value: '1d4*1',\n        denomination: Denomination.Gold,\n    },\n    {\n        id: 'zyXbnTnUGs7tWR5j',\n        name: 'Lesser Art Object',\n        value: '1d4*10',\n        denomination: Denomination.Gold,\n    },\n    {\n        id: 'bCD07W38YjbnyVoZ',\n        name: 'Moderate Art Object',\n        value: '1d4*25',\n        denomination: Denomination.Gold,\n    },\n    {\n        id: 'qmxGfxkMp9vCOtNQ',\n        name: 'Greater Art Object',\n        value: '1d4*250',\n        denomination: Denomination.Gold,\n    },\n    {\n        id: 'hTBTUf9dmhDkpIo8',\n        name: 'Major Art Object',\n        value: '1d4*1000',\n        denomination: Denomination.Gold,\n    },\n];\n\nconst valueMultiplier = (source: UniqueTableData): number => {\n    // TODO: Select value with a regex to avoid errors with values other than 1d4*n\n    let value = parseInt(source.value.substr('1d4*'.length));\n    switch (source.denomination) {\n        case Denomination.Copper:\n            return value / 100;\n        case Denomination.Silver:\n            return value / 10;\n        case Denomination.Gold:\n            return value;\n        case Denomination.Platinum:\n            return value * 10;\n    }\n};\nconst tableIds: UniqueTableData[] = [...semipreciousTables, ...preciousTables, ...artTables].sort((a, b) => valueMultiplier(a) - valueMultiplier(b));\n\nconst treasureSourceTemplate = (data: UniqueTableData): TreasureSource => {\n    return {\n        id: data.id,\n        storeId: tableStoreId(data.id),\n        name: data.name,\n        value: data.value,\n        denomination: data.denomination,\n\n        tableSource: RollableTablesPack,\n        sourceType: SourceType.Table,\n        itemType: GenType.Permanent,\n        weight: 1,\n        enabled: true,\n    };\n};\n\nexport const treasureSources: Record<string, TreasureSource> = tableIds.reduce(\n    (prev, curr) =>\n        mergeObject(prev, {\n            [tableStoreId(curr.id)]: treasureSourceTemplate(curr),\n        }),\n    {},\n);\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpellSchool, SpellTradition } from '../module/loot-app/source/Spells';\nimport { PotencyRuneType } from '../module/loot-app/data/Runes';\n\ndeclare global {\n    interface CONFIG {\n        PF2E: {\n            preciousMaterials: {\n                [T in PreciousMaterialType]: string;\n            };\n            preciousMaterialGrades: {\n                [T in PreciousMaterialGrade]: string;\n            };\n            weaponStrikingRunes: {\n                [T in StrikingRuneType]: string;\n            };\n            armorResiliencyRunes: {\n                [T in ResiliencyRuneType]: string;\n            };\n            weaponPotencyRunes: {\n                [T in ZeroToFour]: string;\n            };\n            armorPotencyRunes: {\n                [T in ZeroToFour]: string;\n            };\n            weaponPropertyRunes: {\n                [T in WeaponPropertyRuneType]: string;\n            };\n            armorPropertyRunes: {\n                [T in ArmorPropertyRuneType]: string;\n            };\n        };\n    }\n}\n\nexport type HTMLItemString = `@Item[${string}]` | `@Item[${string}]{${string}}`;\n\nexport enum Rarity {\n    Common = 'common',\n    Uncommon = 'uncommon',\n    Rare = 'rare',\n    Unique = 'unique',\n}\n\nexport enum EquipmentType {\n    Weapon = 'weapon',\n    Armor = 'armor',\n\n    Buckler = 'buckler',\n    Shield = 'shield',\n    Tower = 'tower',\n}\n\nexport const PropertyRuneCreateKey = ['propertyRune1', 'propertyRune2', 'propertyRune3', 'propertyRune4'];\nexport type PropertyRuneCreateKey = `propertyRune${'1' | '2' | '3' | '4'}`;\n\nexport type EquipmentItemType = 'armor' | 'weapon';\nexport type PhysicalItemType = EquipmentItemType | 'consumable' | 'equipment' | 'treasure';\nexport type ItemType = PhysicalItemType | 'spell';\n\nexport type ResiliencyRuneType = 'resilient' | 'greaterResilient' | 'majorResilient' | '';\nexport type StrikingRuneType = 'striking' | 'greaterStriking' | 'majorStriking' | '';\nexport type ArmorType = 'shield' | 'unarmored' | 'light' | 'medium' | 'heavy';\nexport type WeaponType = 'unarmed' | 'simple' | 'advanced' | 'martial';\n\nexport type WeaponPropertyRuneType =\n    | ''\n    | 'kinWarding'\n    | 'returning'\n    | 'ghostTouch'\n    | 'disrupting'\n    | 'pacifying'\n    | 'fearsome'\n    | 'shifting'\n    | 'conducting'\n    | 'wounding'\n    | 'bloodbane'\n    | 'corrosive'\n    | 'cunning'\n    | 'flaming'\n    | 'frost'\n    | 'shock'\n    | 'thundering'\n    | 'grievous'\n    | 'serrating'\n    | 'anarchic'\n    | 'axiomatic'\n    | 'holy'\n    | 'unholy'\n    | 'greaterFearsome'\n    | 'dancing'\n    | 'spellStoring'\n    | 'greaterBloodbane'\n    | 'keen'\n    | 'greaterDisrupting'\n    | 'greaterCorrosive'\n    | 'greaterFlaming'\n    | 'greaterFrost'\n    | 'greaterShock'\n    | 'greaterThundering'\n    | 'ancestralEchoing'\n    | 'speed'\n    | 'vorpal';\n\nexport type ArmorPropertyRuneType =\n    | ''\n    | 'ready'\n    | 'slick'\n    | 'shadow'\n    | 'glamered'\n    | 'acidResistant'\n    | 'coldResistant'\n    | 'electricityResistant'\n    | 'fireResistant'\n    | 'greaterSlick'\n    | 'invisibility'\n    | 'sinisterKnight'\n    | 'greaterReady'\n    | 'greaterShadow'\n    | 'greaterInvisibility'\n    | 'greaterAcidResistant'\n    | 'greaterColdResistant'\n    | 'greaterElectricityResistant'\n    | 'greaterFireResistant'\n    | 'fortification'\n    | 'winged'\n    | 'rockBraced'\n    | 'soaring'\n    | 'antimagic'\n    | 'majorSlick'\n    | 'ethereal'\n    | 'majorShadow'\n    | 'greaterFortification'\n    | 'greaterWinged';\n\nexport type PropertyRuneType = WeaponPropertyRuneType | ArmorPropertyRuneType;\n\nexport type SpellType = 'attack' | 'save' | 'utility' | 'heal';\n\nexport type ConsumableType = 'ammo' | 'potion' | 'oil' | 'scroll' | 'talisman' | 'snare' | 'drug' | 'elixir' | 'mutagen' | 'other' | 'poison' | 'tool' | 'wand';\n\nexport type ZeroToFour = 0 | 1 | 2 | 3 | 4;\n\nexport type CurrencyType = 'cp' | 'sp' | 'gp' | 'pp';\nexport type PriceString = `${number} ${CurrencyType}` | `${number}${CurrencyType}`;\n\nexport type WeightType = 'L';\nexport type WeightString = `${number}${WeightType | ''}` | WeightType;\n\nexport type PreciousMaterialType =\n    | 'adamantine'\n    | 'coldIron'\n    | 'darkwood'\n    | 'dragonhide'\n    | 'mithral'\n    | 'orichalcum'\n    | 'silver'\n    | 'sovereignSteel'\n    | 'warpglass'\n    | '';\n\nexport type ArmorGroupType = 'composite' | 'chain' | 'cloth' | 'leather' | 'plate';\nexport type WeaponGroupType =\n    | 'club'\n    | 'knife'\n    | 'brawling'\n    | 'spear'\n    | 'sword'\n    | 'axe'\n    | 'flail'\n    | 'polearm'\n    | 'pick'\n    | 'hammer'\n    | 'shield'\n    | 'dart'\n    | 'bow'\n    | 'sling'\n    | 'bomb';\n\nexport enum PreciousMaterialGrade {\n    None = '',\n    Low = 'low',\n    Standard = 'standard',\n    High = 'high',\n}\n\nexport type IdentificationStatus = 'identified' | 'unidentified';\n\nexport interface IValue<T> {\n    value: T;\n}\n\nexport interface Identification {\n    identified: IdentificationData;\n    unidentified: IdentificationData;\n    status: IdentificationStatus;\n}\nexport interface IdentificationData {\n    data: {\n        description: IValue<string>;\n    };\n    img: string;\n    name: string;\n}\n\nexport interface PF2EItem {\n    _id: string;\n    name?: string;\n    type: ItemType;\n    data: PF2EItemData;\n    img: string;\n    flags: Record<string, unknown>;\n    folder?: string;\n}\nexport interface PF2EItemData {\n    slug: string;\n    level: IValue<number>;\n    description: IValue<string>;\n    source: IValue<string>;\n    traits: IValue<Array<string>> & {\n        rarity: IValue<Rarity>;\n    };\n}\n\nexport interface SpellItem extends PF2EItem {\n    type: 'spell';\n    data: SpellData;\n}\nexport interface SpellData extends PF2EItemData {\n    spellType: IValue<SpellType>;\n    school: IValue<SpellSchool>;\n    traditions: IValue<Array<SpellTradition>>;\n}\nexport function isSpell(item: PF2EItem | undefined): item is SpellItem {\n    if (item === undefined) return false;\n    return item.data.hasOwnProperty('spellType');\n}\n\nexport interface PhysicalItem extends PF2EItem {\n    type: PhysicalItemType;\n    data: PhysicalItemData;\n}\nexport interface PhysicalItemData extends PF2EItemData {\n    hp: IValue<number>;\n    maxHp: IValue<number>;\n    hardness: IValue<number>;\n    brokenThreshold: IValue<number>;\n\n    price: IValue<PriceString>;\n    weight: IValue<WeightString>;\n\n    quantity: IValue<number>;\n    stackGroup: IValue<string>;\n    equipped: IValue<boolean>;\n    invested: IValue<boolean>;\n\n    identification: Identification;\n\n    preciousMaterial: IValue<PreciousMaterialType>;\n    preciousMaterialGrade: IValue<PreciousMaterialGrade>;\n}\nconst physicalCheckProperties = ['hp', 'maxHp', 'price', 'weight'];\nexport function isPhysicalItem(item: PF2EItem | undefined): item is PhysicalItem {\n    if (item === undefined) return false;\n    for (let i = 0; i < physicalCheckProperties.length; i++) {\n        if (!item.data.hasOwnProperty(physicalCheckProperties[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport interface TreasureItem extends PhysicalItem {\n    type: 'treasure';\n    data: TreasureItemData;\n}\nexport interface TreasureItemData extends PhysicalItemData {\n    value: IValue<number>;\n}\nexport function isTreasure(item: PF2EItem | undefined): item is TreasureItem {\n    if (item === undefined) return false;\n    return isPhysicalItem(item) && item.data.hasOwnProperty('value');\n}\n\nexport interface ConsumableItem extends PhysicalItem {\n    type: 'consumable';\n    data: ConsumableItemData;\n}\ninterface ConsumableSpellData {\n    data: SpellItem;\n    heightenedLevel: number;\n}\ninterface NoConsumableSpellData {\n    data: null;\n    heightenedLevel: null;\n}\nexport interface ConsumableItemData extends PhysicalItemData {\n    consumableType: IValue<ConsumableType>;\n    spell: ConsumableSpellData | NoConsumableSpellData;\n}\n\nexport interface EquipmentItem extends PhysicalItem {\n    type: EquipmentItemType;\n    data: EquipmentItemData;\n}\nexport interface EquipmentItemData extends PhysicalItemData {\n    group: IValue<WeaponGroupType> | IValue<ArmorGroupType>;\n    specific: IValue<boolean>;\n    equippedBulk: IValue<WeightString | ''>;\n    propertyRune1: IValue<WeaponPropertyRuneType | ArmorPropertyRuneType>;\n    propertyRune2: IValue<WeaponPropertyRuneType | ArmorPropertyRuneType>;\n    propertyRune3: IValue<WeaponPropertyRuneType | ArmorPropertyRuneType>;\n    propertyRune4: IValue<WeaponPropertyRuneType | ArmorPropertyRuneType>;\n}\nconst equipmentCheckProperties = ['equippedBulk', 'propertyRune1', 'propertyRune2'];\nexport function isEquipment(item: PF2EItem | undefined): item is EquipmentItem {\n    if (item === undefined) return false;\n    if (!isPhysicalItem(item)) return false;\n    for (let i = 0; i < equipmentCheckProperties.length; i++) {\n        if (!item.data.hasOwnProperty(equipmentCheckProperties[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport interface Weapon extends EquipmentItem {\n    type: 'weapon';\n    data: WeaponData;\n}\nexport interface WeaponData extends EquipmentItemData {\n    group: IValue<WeaponGroupType>;\n    weaponData: IValue<WeaponType>;\n    potencyRune: IValue<PotencyRuneType>;\n    strikingRune: IValue<StrikingRuneType>;\n\n    propertyRune1: IValue<WeaponPropertyRuneType>;\n    propertyRune2: IValue<WeaponPropertyRuneType>;\n    propertyRune3: IValue<WeaponPropertyRuneType>;\n    propertyRune4: IValue<WeaponPropertyRuneType>;\n}\nexport function isWeapon(item: PF2EItem | undefined): item is Weapon {\n    if (item === undefined) return false;\n    return item.type === 'weapon';\n}\n\nexport interface BaseArmor extends EquipmentItem {\n    type: 'armor';\n    data: ArmorData | ShieldData;\n}\nexport interface BaseArmorData extends EquipmentItemData {\n    group: IValue<ArmorGroupType>;\n    armorType: IValue<ArmorType>;\n    armor: IValue<number>;\n    strength: IValue<number>;\n    dex: IValue<number>;\n\n    propertyRune1: IValue<ArmorPropertyRuneType>;\n    propertyRune2: IValue<ArmorPropertyRuneType>;\n    propertyRune3: IValue<ArmorPropertyRuneType>;\n    propertyRune4: IValue<ArmorPropertyRuneType>;\n}\n\nexport interface Armor extends BaseArmor {\n    data: ArmorData;\n}\nexport interface ArmorData extends BaseArmorData {\n    potencyRune: IValue<PotencyRuneType>;\n    resiliencyRune: IValue<ResiliencyRuneType>;\n}\nexport function isArmor(item: PF2EItem | undefined): item is Armor {\n    if (item === undefined) return false;\n    return item.type === 'armor';\n}\n\nexport interface Shield extends BaseArmor {\n    data: ShieldData;\n}\nexport interface ShieldData extends BaseArmorData {}\nexport function isShield(item: PF2EItem | undefined): item is Shield {\n    if (item === undefined) return false;\n    return isArmor(item) && item.data.armorType.value === 'shield';\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}