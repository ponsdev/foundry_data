const FAST_RECOVERY="Compendium.pf2e.feats-srd.N8Xz5fuW6o7GW124",DREAM_MAY="Compendium.pf2e.feats-srd.kqnFdIhToKTnOpMl",levelMultiplier=actor=>actor.items.filter((item=>[FAST_RECOVERY,DREAM_MAY].includes(item.data.flags.core?.sourceId))).length+1,recover=()=>{const Character=CONFIG.PF2E.Actor.entityClasses.character,Condition=CONFIG.PF2E.Item.entityClasses.condition,tokens=canvas.tokens.controlled.filter((token=>token.actor instanceof Character));0===tokens.length&&ui.notifications.warn("Select at least one token.");for(const token of tokens){const actor=token.actor,actorData=duplicate(actor.data),items=Array.from(actor.items.values()),abilities=actorData.data.abilities,attributes=actorData.data.attributes,conModifier=abilities.con.mod,level=actorData.data.details.level.value,maxRestored=Math.max(conModifier,1)*level*levelMultiplier(actor),hpLost=attributes.hp.max-attributes.hp.value,hpRestored=hpLost>=maxRestored?maxRestored:hpLost;attributes.hp.value+=hpRestored;const conditions=items.filter((item=>"condition"===item.type&&item.getFlag("pf2e","condition"))),conditionChanges={},fatigued=conditions.find((item=>"Fatigued"===item.name));fatigued instanceof Condition&&(PF2eConditionManager.removeConditionFromToken(fatigued.id,token),conditionChanges.Fatigued=null);for(const conditionName of["Doomed","Drained"]){const doomedOrDrained=conditions.find((condition=>condition.name===conditionName));if(void 0===doomedOrDrained)continue;const value=doomedOrDrained.data.data.value.value;if(1===value)PF2eConditionManager.removeConditionFromToken(doomedOrDrained.id,token),conditionChanges[conditionName]=null;else{const newValue=value-1;PF2eConditionManager.updateConditionValue(doomedOrDrained.id,token,newValue),conditionChanges[conditionName]=newValue}}let wandRecharged=!1;const updateData=items.filter((i=>"wand"===i.data.data.consumableType?.value)).map((w=>({_id:w.id,"data.charges.value":parseInt(w.data.data.charges.max)})));updateData.length>0&&(wandRecharged=!0);const restoredList=[],entriesUpdateData=items.filter((item=>"spellcastingEntry"===item.type)).flatMap((entry=>{const entryType=entry.data.data.prepared.value?entry.data.data.prepared.value:"focus";if("focus"===entryType){const focusPool=duplicate(entry.data.data.focus);return focusPool.points<focusPool.pool?(focusPool.points=focusPool.pool,restoredList.push("Focus Pool"),{_id:entry.id,"data.focus":focusPool}):[]}const slots=entry.data.data.slots;let updated=!1;for(const slot of Object.values(slots))if(["spontaneous","innate"].includes(entryType))slot.value<slot.max&&(slot.value=slot.max,updated=!0);else for(const preparedSpell of Object.values(slot.prepared))preparedSpell.expended&&(preparedSpell.expended=!1,updated=!0);return updated?(restoredList.push("focus"===entryType?"Focus Pool":`${entry.name} spell slots`),{_id:entry.id,"data.slots":slots}):[]}));updateData.push(...entriesUpdateData);const staminaSetting=game.settings.storage.get("world").get("pf2e.staminaVariant");if(!!staminaSetting&&Boolean(parseInt(staminaSetting.replace(/"/g,""),10))){const stamina=attributes.sp,keyAbility=actorData.data.details.keyability.value;stamina.value<stamina.max&&(stamina.value=stamina.max,restoredList.push("Stamina"));const resolve=attributes.resolve,maxResolve=abilities[keyAbility].mod;resolve.value<maxResolve&&(resolve.value=maxResolve,restoredList.push("Resolve"))}(hpRestored>0||restoredList.length>0)&&actor.update({"data.attributes":attributes}),updateData.length>0&&actor.updateOwnedItem(updateData);const messages=[`${token.name} awakens well-rested.`];hpRestored>0&&messages.push(`${hpRestored} hit points restored.`),wandRecharged&&messages.push("Spellcasting wands recharged.");const restoredString=0===restoredList.length?"":1===restoredList.length?`${restoredList[0]}`:2===restoredList.length?`${restoredList.join(" and ")}`:`${restoredList.slice(0,-1).join(", ")}, and ${restoredList.slice(-1)[0]}`;messages.push(restoredList.length>0?`${restoredString} fully restored.`:null);const removedConditions=Object.keys(conditionChanges).filter((key=>null===conditionChanges[key])),removedString=0===removedConditions.length?"":1===removedConditions.length?`${removedConditions[0]}`:2===removedConditions.length?`${removedConditions.join(" or ")}`:`${restoredList.slice(0,-1).join(", ")}, or ${restoredList.slice(-1)[0]}`;messages.push(removedConditions.length>0?`No longer ${removedString}.`:null);const reducedConditions=Object.keys(conditionChanges).filter((key=>Number.isInteger(conditionChanges[key]))),reducedString=0===reducedConditions.length?"":1===reducedConditions.length?`${reducedConditions[0]} condition`:`${reducedConditions.join(" and ")} conditions`;messages.push(reducedConditions.length>0?`${reducedString} reduced by 1.`:null),ChatMessage.create({user:game.user.id,content:messages.join(" "),speaker:{alias:token.name}})}};new Dialog({title:"Rest",content:"<p>Rest for the night?</p>",buttons:{yes:{icon:'<i class="fas fa-check"></i>',label:"Rest",callback:recover},no:{icon:'<i class="fas fa-times"></i>',label:"Cancel"}},default:"yes"}).render(!0);