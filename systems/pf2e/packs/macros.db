{"_id":"084MOWWSEVNwpHVG","author":"ru9MkwAaWXaeSZph","command":"const tokens = canvas.tokens.controlled.filter((t) => ['character', 'npc', 'familiar'].includes(t.actor.data.type));\nif (tokens.length === 0) {\n    ui.notifications.error(`You must select at least one npc/pc token`);\n} else {\n    tokens.map((p) => p.actor).forEach((actor) => actor.data.data.attributes.perception.roll({event, options: ['secret']}));\n}","img":"systems/pf2e/icons/spells/vision-of-weakness.webp","name":"Perception For Selected Tokens","permission":{"default":0},"scope":"global","type":"script","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.084MOWWSEVNwpHVG"}}}
{"_id":"0GU2sdy3r2MeC56x","actorIds":[],"author":"4rlSA43v1xPa1vsy","command":"game.pf2e.actions.restForTheNight({ actors: [token?.actor ?? actor ?? game.user.character].filter((actor) => actor) })","img":"icons/svg/sleep.svg","name":"Rest for the Night","permission":{"default":1},"scope":"global","type":"script","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.0GU2sdy3r2MeC56x"}}}
{"_id":"6duZj0Ygiqv712rq","author":"4rlSA43v1xPa1vsy","command":"game.pf2e.actions.treatWounds({ event, actors: [token?.actor ?? actor ?? game.user.character].filter((actor) => actor) })","img":"icons/svg/regen.svg","name":"Treat Wounds","permission":{"default":1},"scope":"global","type":"script","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.6duZj0Ygiqv712rq"}}}
{"_id":"MAHxEeGf31wqv3jp","author":"oxKN2HrOvz2sSqlF","command":"/**\n * @typedef {{data: {data: {details: {level: number|string|undefined|null, isComplex: boolean}}, type: string}}} Hazard\n */\n/**\n * @param actors {Array<Hazard>}\n * @param type {string}\n * @returns {Array<HazardLevel>}\n */\nfunction getHazardLevels(actors) {\n    return actors.filter((a) => a.data.type === \"hazard\");\n}\n/**\n * @typedef {{data: {data: {details: {level: {value: number|string|undefined|null}}}, type: string}}} Actor\n */\n/**\n * @param actors {Array<Actor>}\n * @param type {string}\n * @returns {Array<number>}\n */\nfunction getLevels(actors, type) {\n    return actors.filter((a) => a.data.type === type).map((a) => parseInt(a.data.data.details.level.value ?? \"1\", 10));\n}\n/**\n * @param xp {XP}\n * @returns {string}\n */\nfunction dialogTemplate(xp) {\n    return `\n<h2>XP</h2>\n<table>\n    <tr>\n        <th>${game.i18n.localize(\"PF2E.Encounter.Budget.PartySize\")}</th>\n        <td>${xp.partySize}</td>\n    </tr>\n    <tr>\n        <th>${game.i18n.localize(\"PF2E.Encounter.Budget.PartyLevel\")}</th>\n        <td>${xp.partyLevel}</td>\n    </tr>\n    <tr>\n        <th>${game.i18n.localize(\"PF2E.Encounter.Budget.Threat\")}</th>\n        <td>${game.i18n.localize(\"PF2E.Encounter.Budget.Threats.\"+xp.rating)} (${xp.totalXP} XP)</td>\n    </tr>\n    <tr>\n        <th>${game.i18n.localize(\"PF2E.Encounter.Budget.Reward\")}</th>\n        <td>${xp.xpPerPlayer} XP</td>\n    </tr>\n</table>\n<h2>${game.i18n.localize(\"PF2E.Encounter.Budget.EncounterBudget\")}</h2>\n<table class=\"pf2-table\">\n    <tr>\n        <th>${game.i18n.localize(\"PF2E.Encounter.Budget.Threat\")}</th>\n        <th>${game.i18n.localize(\"PF2E.Encounter.Budget.XPBudget\")}</th>\n        <th>${game.i18n.localize(\"PF2E.Encounter.Budget.XPNeeded\")}</th>\n        <th>${game.i18n.localize(\"PF2E.Encounter.Budget.Reward\")}</th>\n    </tr>\n    <tr>\n        <td>${game.i18n.localize(\"PF2E.Encounter.Budget.Threats.trivial\")}</td>\n        <td>${xp.encounterBudgets.trivial}</td>\n        <td>${xp.encounterBudgets.trivial - xp.totalXP}</td>\n        <td>40</td>\n    </tr>\n    <tr>\n        <td>${game.i18n.localize(\"PF2E.Encounter.Budget.Threats.low\")}</td>\n        <td>${xp.encounterBudgets.low}</td>\n        <td>${xp.encounterBudgets.low - xp.totalXP}</td>\n        <td>60</td>\n    </tr>\n    <tr>\n        <td>${game.i18n.localize(\"PF2E.Encounter.Budget.Threats.moderate\")}</td>\n        <td>${xp.encounterBudgets.moderate}</td>\n        <td>${xp.encounterBudgets.moderate - xp.totalXP}</td>\n        <td>80</td>\n    </tr>\n    <tr>\n        <td>${game.i18n.localize(\"PF2E.Encounter.Budget.Threats.severe\")}</td>\n        <td>${xp.encounterBudgets.severe}</td>\n        <td>${xp.encounterBudgets.severe - xp.totalXP}</td>\n        <td>120</td>\n    </tr>\n    <tr>\n        <td>${game.i18n.localize(\"PF2E.Encounter.Budget.Threats.extreme\")}</td>\n        <td>${xp.encounterBudgets.extreme}</td>\n        <td>${xp.encounterBudgets.extreme - xp.totalXP}</td>\n        <td>160</td>\n    </tr>\n</table>\n<h2>${game.i18n.localize(\"PF2E.Encounter.CreatureXPAndRole.CreatureXPAndRole\")}</h2>\n<table class=\"pf2-table\">\n    <tr>\n        <th>${game.i18n.localize(\"PF2E.Encounter.CreatureXPAndRole.CreatureLevel\")}</th>\n        <th>XP</th>\n        <th>${game.i18n.localize(\"PF2E.Encounter.CreatureXPAndRole.SuggestedRole\")}</th>\n    </tr>\n    <tr>\n        <td>${xp.partyLevel - 4}</td>\n        <td>10</td>\n        <td>${game.i18n.localize(\"PF2E.Encounter.CreatureXPAndRole.CreatureLevels.-4\")}</td>\n    </tr>\n    <tr>\n        <td>${xp.partyLevel - 3}</td>\n        <td>15</td>\n        <td>${game.i18n.localize(\"PF2E.Encounter.CreatureXPAndRole.CreatureLevels.-3\")}</td>\n    </tr>\n    <tr>\n        <td>${xp.partyLevel - 2}</td>\n        <td>20</td>\n        <td>${game.i18n.localize(\"PF2E.Encounter.CreatureXPAndRole.CreatureLevels.-2\")}</td>\n    </tr>\n    <tr>\n        <td>${xp.partyLevel - 1}</td>\n        <td>30</td>\n        <td>${game.i18n.localize(\"PF2E.Encounter.CreatureXPAndRole.CreatureLevels.-1\")}</td>\n    </tr>\n    <tr>\n        <td>${xp.partyLevel}</td>\n        <td>40</td>\n        <td>${game.i18n.localize(\"PF2E.Encounter.CreatureXPAndRole.CreatureLevels.0\")}</td>\n    </tr>\n    <tr>\n        <td>${xp.partyLevel + 1}</td>\n        <td>60</td>\n        <td>${game.i18n.localize(\"PF2E.Encounter.CreatureXPAndRole.CreatureLevels.1\")}</td>\n    </tr>\n    <tr>\n        <td>${xp.partyLevel + 2}</td>\n        <td>80</td>\n        <td>${game.i18n.localize(\"PF2E.Encounter.CreatureXPAndRole.CreatureLevels.2\")}</td>\n    </tr>\n    <tr>\n        <td>${xp.partyLevel + 3}</td>\n        <td>120</td>\n        <td>${game.i18n.localize(\"PF2E.Encounter.CreatureXPAndRole.CreatureLevels.3\")}</td>\n    </tr>\n    <tr>\n        <td>${xp.partyLevel + 4}</td>\n        <td>160</td>\n        <td>${game.i18n.localize(\"PF2E.Encounter.CreatureXPAndRole.CreatureLevels.4\")}</td>\n    </tr>\n</table>`;\n}\nconst askLevelPopupTemplate = () => {\n    const partySize = parseInt(localStorage.getItem(\"xpMacroPartySize\") ?? 4, 10);\n    const partyLevel = parseInt(localStorage.getItem(\"xpMacroPartyLevel\") ?? 1, 10);\n    return `\n    <form>\n    <div class=\"form-group\">\n        <label>${game.i18n.localize(\"PF2E.Encounter.Budget.PartySize\")}</label>\n        <input id=\"party-size\" name=\"party-size\" type=\"number\" value=\"${partySize}\">\n    </div>\n    <div class=\"form-group\">\n        <label>${game.i18n.localize(\"PF2E.Encounter.Budget.PartyLevel\")}</label>\n        <input id=\"party-level\" name=\"party-level\" type=\"number\" value=\"${partyLevel}\">\n    </div>\n    </form>\n    `;\n};\n/**\n * @param partyLevel {number}\n * @param partySize {number}\n * @param npcLevels {Array<number>}\n * @param hazardLevels {Array<HazardLevel>}\n */\nfunction showXP(partyLevel, partySize, npcLevels, hazardLevels) {\n    const xp = game.pf2e.gm.calculateXP(partyLevel, partySize, npcLevels, hazardLevels, {\n        proficiencyWithoutLevel: game.settings.get(\"pf2e\", \"proficiencyVariant\") === \"ProficiencyWithoutLevel\",\n    });\n    new Dialog({\n        title: \"XP\",\n        content: dialogTemplate(xp),\n        buttons: {},\n    }).render(true);\n}\n/**\n * @param npcLevels {Array<number>}\n * @param hazardLevels {Array<HazardLevel>}\n */\nfunction askPartyLevelAndSize(npcLevels, hazardLevels) {\n    new Dialog({\n        title: \"Party Information\",\n        content: askLevelPopupTemplate,\n        buttons: {\n            no: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: \"Cancel\",\n            },\n            yes: {\n                icon: '<i class=\"fas fa-calculator\"></i>',\n                label: \"Calculate XP\",\n                callback: ($html) => {\n                    const partySize = parseInt($html[0].querySelector('[name=\"party-size\"]').value, 10) ?? 1;\n                    const partyLevel = parseInt($html[0].querySelector('[name=\"party-level\"]').value, 10) ?? 1;\n                    // persist for future uses\n                    localStorage.setItem(\"xpMacroPartySize\", partySize);\n                    localStorage.setItem(\"xpMacroPartyLevel\", partyLevel);\n                    showXP(partyLevel, partySize, npcLevels, hazardLevels);\n                },\n            },\n        },\n        default: \"yes\",\n    }).render(true);\n}\nfunction main() {\n    const actors = canvas.tokens.controlled.map((a) => a.actor);\n    const npcLevels = getLevels(actors, \"npc\");\n    const pcLevels = getLevels(actors, \"character\");\n    const hazardLevels = getHazardLevels(actors);\n    if (npcLevels.length === 0 && hazardLevels.length === 0) {\n        ui.notifications.error(`You must select at least one npc and/or hazard token and optionally all PC tokens`);\n        return;\n    }\n    if (pcLevels.length === 0) {\n        askPartyLevelAndSize(npcLevels, hazardLevels);\n    } else {\n        showXP(pcLevels[0], pcLevels.length, npcLevels, hazardLevels);\n    }\n}\nmain();","img":"systems/pf2e/icons/spells/athletic-rush.webp","name":"XP","permission":{"default":0},"scope":"global","type":"script","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.MAHxEeGf31wqv3jp"}}}
{"_id":"NQkc5rKoeFemdVHr","actorIds":[],"author":"ru9MkwAaWXaeSZph","command":"const tokens = canvas.tokens.controlled;\nif (tokens.length === 0) {\n    ui.notifications.error(`You must select at least one pc token`);\n} else {\n    game.pf2e.gm.launchTravelSheet(tokens.map((p) => p.actor));\n}","img":"systems/pf2e/icons/equipment/adventuring-gear/cartographers-kit.webp","name":"Travel Duration","permission":{"default":0},"scope":"global","type":"script","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.NQkc5rKoeFemdVHr"}}}
{"_id":"aS6F7PSUlS9JM5jr","actorIds":[],"author":"gE95JAZb6BOLkaNX","command":"let toChat = (content) => {\r\n    let chatData = {\r\n        user: game.user.id,\r\n        content,\r\n        speaker: ChatMessage.getSpeaker(),\r\n    }\r\n    ChatMessage.create(chatData, {})\r\n}\r\n\r\nlet applyChanges = false;\r\nnew Dialog({\r\n  title: `Take a Breather`,\r\n  content: `\r\n    <div>Rest for 10 minutes, spend a resolve point, and regain stamina?</div>\r\n    `,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Take a Breather`,\r\n      callback: () => applyChanges = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel`\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n        for ( let token of canvas.tokens.controlled ) {\r\n            const {name} = token;\r\n            console.log(token);\r\n            const {resolve, sp} = token.actor.data.data.attributes;\r\n            console.log(resolve, sp);\r\n            if (resolve.value > 0) {\r\n                let oldSP = sp.value;\r\n                toChat(`${name} has ${sp.value}/${sp.max} SP and spends a resolve point, taking a 10 minute breather. Stamina Refreshed.`);\r\n                token.actor.update({\r\n                    'data.attributes.sp.value': sp.max,\r\n                    'data.attributes.resolve.value': resolve.value-1\r\n                });\r\n            } else {\r\n                toChat(`${name} is tired and needs to go to bed! No resolve points remaining.`);\r\n            }\r\n        }\r\n      }\r\n    }\r\n}).render(true);","img":"icons/svg/unconscious.svg","name":"Take a Breather","permission":{"default":1},"scope":"global","type":"script","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.aS6F7PSUlS9JM5jr"}}}
{"_id":"mxHKWibjPrgfJTDg","actorIds":[],"author":"ru9MkwAaWXaeSZph","command":"function escapeHtml(html) {\n    const text = document.createTextNode(html);\n    const p = document.createElement('p');\n    p.appendChild(text);\n    return p.innerHTML;\n}\nfunction capitalize(s) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n}\nfunction isExperiencedProfessional(actor) {\n    return actor.data.items.some((item) => item.type === 'feat' && item.name === 'Experienced Professional');\n}\nfunction rankToProficiency(rank) {\n    if (rank === 0) {\n        return 'untrained';\n    } else if (rank === 1) {\n        return 'trained';\n    } else if (rank === 2) {\n        return 'expert';\n    } else if (rank === 3) {\n        return 'master';\n    } else {\n        return 'legendary';\n    }\n}\nfunction degreeOfSuccessLabel(degreeOfSuccessLabel) {\n    if (degreeOfSuccessLabel === 0) {\n        return 'Critical Failure';\n    } else if (degreeOfSuccessLabel === 1) {\n        return 'Failure';\n    } else if (degreeOfSuccessLabel === 2) {\n        return 'Success';\n    } else {\n        return 'Critical Success';\n    }\n}\nfunction coinsToString(coins, degreeOfSuccess) {\n    if (degreeOfSuccess === 'Critical Failure') {\n        return 'none';\n    } else {\n        return Object.entries(coins)\n            .map(([key, value]) => `${value} ${game.i18n.localize(CONFIG.PF2E.currencies[key])}`)\n            .join(', ');\n    }\n}\nfunction chatTemplate(skillName, earnIncomeResult) {\n    const degreeOfSuccess = degreeOfSuccessLabel(earnIncomeResult.degreeOfSuccess);\n    const payPerDay = escapeHtml(coinsToString(earnIncomeResult.rewards.perDay, degreeOfSuccess));\n    const combinedPay = escapeHtml(coinsToString(earnIncomeResult.rewards.combined, degreeOfSuccess));\n    const level = earnIncomeResult.level;\n    const daysSpentWorking = earnIncomeResult.daysSpentWorking;\n    const forDays =\n        daysSpentWorking > 1 ? `<p><strong>Salary for ${daysSpentWorking} days</strong> ${combinedPay}</p>` : '';\n    const successColor = earnIncomeResult.degreeOfSuccess > 1 ? 'darkgreen' : 'darkred';\n    const dc = earnIncomeResult.dc;\n    const roll = earnIncomeResult.roll;\n    return `\n    <div class=\"pf2e chat-card\">\n        <header class=\"card-header flexrow\">\n            <img src=\"systems/pf2e/icons/equipment/treasure/currency/gold-pieces.webp\" title=\"Income\" width=\"36\" height=\"36\">\n            <h3>Earn Income Level ${level}</h3>\n        </header>\n        <div class=\"card-content\">\n            <p><strong>Result</strong> <span style=\"color: ${successColor}\">${degreeOfSuccess} (DC: ${dc}, Roll: ${roll})</span></p>\n            <p><strong>Skill</strong> ${escapeHtml(skillName)}</p>\n            <p><strong>Salary per day</strong> ${payPerDay}</p>\n            ${forDays}\n        </div>\n    </div>\n    `;\n}\nfunction postToChat(skillName, earnIncomeResult) {\n    const content = chatTemplate(skillName, earnIncomeResult);\n    const chatData = {\n        user: game.user.id,\n        content,\n        speaker: ChatMessage.getSpeaker(),\n    };\n    ChatMessage.create(chatData, {});\n}\nfunction isProficiencyWithoutLevel() {\n    return game.settings.get('pf2e', 'proficiencyVariant') === 'ProficiencyWithoutLevel';\n}\nfunction calculateIncome(actor, skill, roll, level, days) {\n    const dcOptions = {\n        proficiencyWithoutLevel: isProficiencyWithoutLevel(),\n    };\n    const earnIncomeOptions = {\n        useLoreAsExperiencedProfessional: isExperiencedProfessional(actor) && skill.isLore,\n    };\n    const income = game.pf2e.actions.earnIncome(level, days, roll, skill.proficiency, earnIncomeOptions, dcOptions);\n    postToChat(skill.name, income);\n}\nfunction runEarnIncome(actor, skill, assurance, level, days) {\n    if (assurance) {\n        const actorLevel = actor.data.data.details?.level?.value ?? 1;\n        const proficiencyLevel = isProficiencyWithoutLevel() ? 0 : actorLevel;\n        const proficiencyBonus = proficiencyLevel + skill.rank * 2;\n        calculateIncome(actor, skill, { dieValue: 10, modifier: proficiencyBonus }, level, days);\n    } else {\n        const options = actor.getRollOptions(['all', 'skill-check', skill.name]);\n        options.push('earn-income');\n        game.pf2e.Check.roll(\n            new game.pf2e.CheckModifier(\n                '<span style=\"font-family: Pathfinder2eActions\">A</span> Earn Income',\n                actor.data.data.skills[skill.acronym],\n                [],\n            ),\n            { actor, type: 'skill-check', options },\n            event,\n            (roll) => {\n                const dieValue = roll.dice[0].results[0].result;\n                const modifier = roll._total - dieValue;\n                calculateIncome(actor, skill, { dieValue, modifier }, level, days);\n            },\n        );\n    }\n}\nfunction getSkills(actor) {\n    return (\n        Object.entries(actor.data.data.skills)\n            .map(([acronym, value]) => {\n                return {\n                    acronym,\n                    name: capitalize(value.name),\n                    isLore: value.lore === true,\n                    proficiency: rankToProficiency(value.rank),\n                    rank: value.rank,\n                };\n            })\n            // earn income is a trained action\n            .filter((skill) => skill.proficiency !== 'untrained')\n    );\n}\nfunction askSkillPopupTemplate(skills) {\n    const level = parseInt(localStorage.getItem('earnIncomeLevel') ?? 0, 10);\n    const days = parseInt(localStorage.getItem('earnIncomeDays') ?? 1, 10);\n    const skillAcronym = localStorage.getItem('earnIncomeSkillAcronym');\n    const assurance = localStorage.getItem('earnIncomeAssurance') === 'true';\n    return `\n    <form>\n    <div class=\"form-group\">\n        <label>Trained Skills/Lores</label>\n        <select name=\"skillAcronym\">\n            ${skills\n                .map(\n                    (skill) =>\n                        `<option value=\"${skill.acronym}\" ${\n                            skillAcronym === skill.acronym ? 'selected' : ''\n                        }>${escapeHtml(skill.name)}</option>`,\n                )\n                .join('')}\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label>Use Assurance</label>\n        <input name=\"assurance\" type=\"checkbox\" ${assurance ? 'checked' : ''}>\n    </div>\n    <div class=\"form-group\">\n        <label>Level</label>\n        <select name=\"level\">\n            ${Array(21)\n                .fill(0)\n                .map((_, index) => `<option value=\"${index}\" ${index === level ? 'selected' : ''}>${index}</option>`)\n                .join('')}\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label>Days</label>\n        <input type=\"number\" name=\"days\" value=\"${days}\">\n    </div>\n    </form>\n    `;\n}\nfunction showEarnIncomePopup(actor) {\n    if (actor === null || actor === undefined) {\n        ui.notifications.error(`You must select at least one PC`);\n    } else {\n        const skills = getSkills(actor);\n        new Dialog({\n            title: 'Earn Income',\n            content: askSkillPopupTemplate(skills),\n            buttons: {\n                no: {\n                    icon: '<i class=\"fas fa-times\"></i>',\n                    label: 'Cancel',\n                },\n                yes: {\n                    icon: '<i class=\"fas fa-coins\"></i>',\n                    label: 'Earn Income',\n                    callback: ($html) => {\n                        const level = parseInt($html[0].querySelector('[name=\"level\"]').value, 10) ?? 1;\n                        const days = parseInt($html[0].querySelector('[name=\"days\"]').value, 10) ?? 1;\n                        const skillAcronym = $html[0].querySelector('[name=\"skillAcronym\"]').value;\n                        const assurance = $html[0].querySelector('[name=\"assurance\"]').checked;\n                        const skill = skills.find((skill) => skill.acronym === skillAcronym);\n                        localStorage.setItem('earnIncomeLevel', level);\n                        localStorage.setItem('earnIncomeDays', days);\n                        localStorage.setItem('earnIncomeSkillAcronym', skillAcronym);\n                        localStorage.setItem('earnIncomeAssurance', assurance);\n                        runEarnIncome(actor, skill, assurance, level, days);\n                    },\n                },\n            },\n            default: 'yes',\n        }).render(true);\n    }\n}\nshowEarnIncomePopup(actor);","img":"systems/pf2e/icons/equipment/treasure/currency/gold-pieces.webp","name":"Earn Income","permission":{"default":1},"scope":"global","type":"script","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.mxHKWibjPrgfJTDg"}}}
{"_id":"s2sa8lo9dcIA6UGe","author":"Ooz20ZCUmh0bjKL3","command":"game.pf2e.compendiumBrowser.rendered ? game.pf2e.compendiumBrowser.close() : game.pf2e.compendiumBrowser.render(true);","img":"systems/pf2e/icons/equipment/adventuring-gear/advanced-book-of-translation.webp","name":"Toggle Compendium Browser","permission":{"default":1},"scope":"global","type":"script","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.s2sa8lo9dcIA6UGe"}}}
{"_id":"yBuEphSaJJ7V9Yw3","author":"ru9MkwAaWXaeSZph","command":"const tokens = canvas.tokens.controlled.filter((t) => ['character', 'npc', 'familiar'].includes(t.actor.data.type));\nif (tokens.length === 0) {\n    ui.notifications.error(`You must select at least one npc/pc token`);\n} else {\n    tokens.map((p) => p.actor).forEach((actor) => actor.data.data.skills.ste.roll({event, options: ['secret']}));\n}","img":"systems/pf2e/icons/features/classes/surprice-attack.webp","name":"Stealth For Selected Tokens","permission":{"default":0},"scope":"global","type":"script","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.yBuEphSaJJ7V9Yw3"}}}
